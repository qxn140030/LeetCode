Given an index k, return the kth row of the Pascal's triangle.
For example, given k = 3, Return [1,3,3,1].
Note: Could you optimize your algorithm to use only O(k) extra space?

1 0 0 0    k = 0
1 1 0 0    k = 1
1 1 1 0
1 2 1 0    k = 2
1 2 1 1
1 2 3 1
1 3 3 1    k = 3
in-place. Time complexity: O(n^2). Space complexity: O(1).
public class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> rst = new ArrayList<Integer>();
        for (int i = 0; i <= rowIndex; i++) {
            rst.add(0);
        }
        rst.set(0, 1);
        for (int i = 1; i <= rowIndex; i++) {
            for (int j = i; j > 0; j--) {
                rst.set(j, rst.get(j - 1) + rst.get(j));
            }
        }
        return rst;
    }
}
