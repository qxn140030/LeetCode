You have information about n different recipes. You are given a string array recipes and a 2D string array ingredients. The ith recipe has the name recipes[i], 
and you can create it if you have all the needed ingredients from ingredients[i]. Ingredients to a recipe may need to be created from other recipes, 
i.e., ingredients[i] may contain a string that is in recipes.
You are also given a string array supplies containing all the ingredients that you initially have, and you have an infinite supply of all of them.
Return a list of all the recipes that you can create. You may return the answer in any order.
Note that two recipes may contain each other in their ingredients.
Example 1:
Input: recipes = ["bread"], ingredients = [["yeast","flour"]], supplies = ["yeast","flour","corn"]
Output: ["bread"]
Explanation: We can create "bread" since we have the ingredients "yeast" and "flour".

Example 2:
Input: recipes = ["bread","sandwich"], ingredients = [["yeast","flour"],["bread","meat"]], supplies = ["yeast","flour","meat"]
Output: ["bread","sandwich"]
Explanation:
We can create "bread" since we have the ingredients "yeast" and "flour".
We can create "sandwich" since we have the ingredient "meat" and can create the ingredient "bread".

Example 3:
Input: recipes = ["bread","sandwich","burger"], ingredients = [["yeast","flour"],["bread","meat"],["sandwich","meat","bread"]], supplies = ["yeast","flour","meat"]
Output: ["bread","sandwich","burger"]
Explanation:
We can create "bread" since we have the ingredients "yeast" and "flour".
We can create "sandwich" since we have the ingredient "meat" and can create the ingredient "bread".
We can create "burger" since we have the ingredient "meat" and can create the ingredients "bread" and "sandwich".

Approach 1: Brute Force
Repeated BFS till no any more finding.
1. Put all supplies into a HashSet, seen, for checking the availability in O(1) time;
2. Put into a Queue all indexes of the recipes;
3. BFS and put into seen all recipes that we currently can create; put back into the Queue if a recipe we currently can not create;
4. After any round of breadth search, if no any more recipe we can create, return the recipes we found so far.

class Solution {
    public List<String> findAllRecipes(String[] recipes, List<List<String>> ingredients, String[] supplies) {
        Set<String> supple = new HashSet<>(Arrays.asList(supplies));       // Put all supplies into a HashSet for checking the availability in O(1) time.
        Set<String> ans = new HashSet<>();
        for (int i = 0; i < recipes.length; i++) {
            outer:
            for (int j = 0; j < ingredients.size(); j++) {
                if (ans.contains(recipes[j])) {             // recipe has already been made.
                    continue;                               
                }
                for (String ingre : ingredients.get(j)) {
                    if (!supple.contains(ingre)) {          // As all ingredients are not present in supplies.
                        continue outer;                     
                    }
                }
                ans.add(recipes[j]);                        // add it to the answer.
                supple.add(recipes[j]);                     // add it to the supplies list so that another recipe can use this recipe.
            }
        }
        return new ArrayList<>(ans);
    }
}

class Solution {
    public List<String> findAllRecipes(String[] recipes, List<List<String>> ingredients, String[] supplies) {
        Set<String> seen = new HashSet<>();
        for (String sup : supplies) {
            seen.add(sup);
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < recipes.length; ++i) {
            q.offer(i);
        }
        List<String> ans = new ArrayList<>();
        int prevSize = seen.size() - 1;
        while (seen.size() > prevSize) {
            prevSize = seen.size();
            mid:
            for (int sz = q.size(); sz > 0; --sz) {
                int i = q.poll();
                for (String ing : ingredients.get(i)) {
                    if (!seen.contains(ing)) {
                        q.offer(i);
                        continue mid;
                    }
                }
                seen.add(recipes[i]);
                ans.add(recipes[i]);
            }
        }
        return ans;
    }
}

Approach 2: Topological sort
1. For each recipe, count its non-available ingredients as indegree; Store (non-available ingredient, dependent recipes) as HashMap;
2. Store all 0-indegree recipes into a list as the starting points of topological sort;
3. Use topogical sort to decrease the indegree of recipes, whenever the indegree reaches 0, add it to return list.

class Solution {
    public List<String> findAllRecipes(String[] recipes, List<List<String>> ingredients, String[] supplies) {
        Set<String> sup = new HashSet<>(Arrays.asList(supplies));
        Map<String, Integer> index = new HashMap<>();
        Map<String, List<String>> ingToRecipes = new HashMap<>();
        for (int i = 0; i < recipes.length; i++) {
            index.put(recipes[i], i);              // store index of all recipes
        }
        int[] indegree = new int[recipes.length];
        for (int i = 0; i < recipes.length; i++) {
            for (String ing : ingredients.get(i)) {
                if (!sup.contains(ing)) {
                    ingToRecipes.putIfAbsent(ing, new ArrayList<String>());
                    ingToRecipes.get(ing).add(recipes[i]);
                    indegree[i]++;
                }
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < recipes.length; i++) {
            if (indegree[i] == 0) {
                q.add(i);                        // add all the recipes with indegree 0 to the queue.
            }
        }
        List<String> rst = new ArrayList<>();
        while (!q.isEmpty()) {
            int i = q.poll();
            rst.add(recipes[i]);
            if (ingToRecipes.containsKey(recipes[i])) {    
                for (String recipe : ingToRecipes.get(recipes[i])) {
                    if (--indegree[index.get(recipe)] == 0) {
                        q.add(index.get(recipe));
                    }
                }                                 
            } 
        }
        return rst;
    }
}
