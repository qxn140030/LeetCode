There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites 
where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. 
If it is impossible to finish all courses, return an empty array.
Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].

Example 2:
Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. 
Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].

Example 3:
Input: numCourses = 1, prerequisites = []
Output: [0]

Approach 1: DFS
This problem is equivalent to finding the topological order in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.
Time complexity: O(E + V)
Space complexity: O(E + V)

class Solution {
    int order[], pos = 0;
    Set<Integer> visited = new HashSet<>();
    Map<Integer, List<Integer>> map = new HashMap<>();
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        for (int[] relation : prerequisites) {
            List<Integer> pre = map.getOrDefault(relation[0], new ArrayList<>());
            pre.add(relation[1]);
            map.put(relation[0], pre);
        }
        order = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (!map.containsKey(i)){
                order[pos++] = i;
                visited.add(i);
            }
        }
        for (int[] p : prerequisites) {
            if (!visited.contains(p[0])) {
                if (!dfs(p[0], new HashSet<>())) {
                    return new int[0];
                }
            }
        }
        return order;
    }
    private boolean dfs(int cur, Set<Integer> set) {
        if (visited.contains(cur)) {
            return true;
        }
        if (!map.containsKey(cur) || map.get(cur).size() == 0) {
            order[pos++] = cur;
        } else {
            for (int node : map.get(cur)) {
                if (set.contains(node)) {
                    return false;
                }
                set.add(node);
                if (!visited.contains(node)) {
                    if (!dfs(node, set)) {
                        return false;
                    }
                }
                set.remove(node);
            }
            order[pos++] = cur;    
        }
        visited.add(cur);
        return true;
    }
}

Approach 2: Using Node Indegree
We first process all the nodes/course with 0 in-degree implying no prerequisite courses required. 
If we remove all these courses from the graph, along with their outgoing edges, we can find out the courses/nodes that should be processed next. 
These would again be the nodes with 0 in-degree. We can continuously do this until all the courses have been accounted for.
Time complexity: O(V + E)
Space complexity: O(V + E)

class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<List<Integer>> adj = new ArrayList<>(numCourses);
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());                             // Note.
        }
        int[] indegrees = new int[numCourses];
        for (int[] pre : prerequisites) {
            adj.get(pre[1]).add(pre[0]);
            indegrees[pre[0]]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegrees[i] == 0) {
                q.offer(i);
            }
        }
        int[] order = new int[numCourses];
        int index = 0;
        while (!q.isEmpty()) {
            int cur = q.poll();
            order[index++] = cur; 
            for (int neighbor : adj.get(cur)) {
                indegrees[neighbor]--;
                if (indegrees[neighbor] == 0) {
                    q.offer(neighbor);
                }
            }
        }
        return index == numCourses ? order : new int[0];  
    }
}

public class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] indegrees = new int[numCourses];
        for (int[] pre : prerequisites) {
            indegrees[pre[0]]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegrees[i] == 0) {
                q.offer(i);
            }
        }
        int[] order = new int[numCourses];
        int index = 0;
        while (!q.isEmpty()) {
            int cur = q.poll();
            order[index++] = cur; 
            for (int[] pre : prerequisites) {
                if (pre[1] == cur) {
                    indegrees[pre[0]]--;
                    if (indegrees[pre[0]] == 0) {
                        q.offer(pre[0]);
                    }
                }
            }
        }
        return index == numCourses ? order : new int[0];         // return [] an empty array.
    }
}
