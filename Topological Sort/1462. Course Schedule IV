There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where 
prerequisites[i] = [ai, bi] indicates that you must take course ai first if you want to take course bi.
For example, the pair [0, 1] indicates that you have to take course 0 before you can take course 1.
Prerequisites can also be indirect. If course a is a prerequisite of course b, and course b is a prerequisite of course c, then course a is a prerequisite of course c.
You are also given an array queries where queries[j] = [uj, vj]. For the jth query, you should answer whether course uj is a prerequisite of course vj or not.
Return a boolean array answer, where answer[j] is the answer to the jth query.
Example 1:
           1 -> 0
Input: numCourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]
Output: [false,true]
Explanation: The pair [1, 0] indicates that you have to take course 1 before you can take course 0.
Course 0 is not a prerequisite of course 1, but the opposite is true.

Example 2:
Input: numCourses = 2, prerequisites = [], queries = [[1,0],[0,1]]
Output: [false,false]
Explanation: There are no prerequisites, and each course is independent.

Example 3:
Input: numCourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]
Output: [true,true]

Approach 1: Brute Force DFS (TLE)
Time complexity: O(V + E + n * E)
Space complexity: O(V + E)

class Solution {
    List<List<Integer>> adj;
    public List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {
        adj = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] p : prerequisites) {
            adj.get(p[0]).add(p[1]);
        }
        Set<Integer> visited = new HashSet<>();
        List<Boolean> rst = new ArrayList<>();
        for (int[] q : queries) {
            visited.clear();
            rst.add(dfs(q[0], q[1], visited));
        }
        return rst;
    }
    private boolean dfs(int start, int target, Set<Integer> visited) {
        if (start == target) {
            return true;
        }
        if (!visited.contains(start)) {
            visited.add(start);
            for (int neighbor : adj.get(start)) {
                if (dfs(neighbor, target, visited)) {
                    return true;
                }
            }
            visited.remove(start);
        }
        return false;
    }
}

Approach 2: Transitive closure - Floyd Warshall
build a nxn boolean matrix with either the second node is reachable from the first or not.
we can save a lot of time by pre-building all the relations before checking the queries.
Time complexity: O(V^3)
Space complexity: O(V^2)

class Solution {
    public List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {
        boolean[][] graph = new boolean[numCourses][numCourses];
        for (int i = 0; i < numCourses; i++) {
            graph[i][i] = true;
        }
        for (int[] p : prerequisites) {
            graph[p[0]][p[1]] = true;
        }
        for (int k = 0; k < numCourses; k++) {
            for (int i = 0; i < numCourses; i++) {
                for (int j = 0; j < numCourses; j++) {
                    graph[i][j] |= (graph[i][k] && graph[k][j]);
                }
            }
        }
        List<Boolean> rst = new ArrayList<>();
        for (int[] q : queries) {
            rst.add(graph[q[0]][q[1]]);
        }
        return rst;
    }
}
