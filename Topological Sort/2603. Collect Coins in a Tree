There exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. You are given an integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given an array coins of size n where coins[i] can be either 0 or 1, where 1 indicates the presence of a coin in the vertex i.

Initially, you choose to start at any vertex in the tree. Then, you can perform the following operations any number of times: 

Collect all the coins that are at a distance of at most 2 from the current vertex, or
Move to any adjacent vertex in the tree.
Find the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex.

Note that if you pass an edge several times, you need to count it into the answer several times.

Example 1:
Input: coins = [1,0,0,0,0,1], edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]
Output: 2
Explanation: Start at vertex 2, collect the coin at vertex 0, move to vertex 3, collect the coin at vertex 5 then move back to vertex 2.

Example 2:
Input: coins = [0,0,0,1,1,0,0,1], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]]
Output: 2
Explanation: Start at vertex 0, collect the coins at vertices 4 and 3, move to vertex 2,  collect the coin at vertex 7, then move back to vertex 0.

public int collectTheCoins(int[] coins, int[][] edges) {
    int n = coins.length;
    // Step 1: 建图 + 记录每个节点的度数
    List<List<Integer>> graph = new ArrayList<>();
    int[] degree = new int[n];
    for (int i = 0; i < n; i++) graph.add(new ArrayList<>());
    for (int[] edge : edges) {
        int u = edge[0], v = edge[1];
        graph.get(u).add(v);
        graph.get(v).add(u);
        degree[u]++;
        degree[v]++;
    }
    // Step 2: 删除所有“没有硬币”的叶子节点（剪枝第一轮）
    Queue<Integer> queue = new ArrayDeque<>();
    for (int i = 0; i < n; i++) {
        if (degree[i] == 1 && coins[i] == 0) {
            queue.offer(i);
        }
    }
    boolean[] removed = new boolean[n];
    while (!queue.isEmpty()) {
        int node = queue.poll();
        removed[node] = true;
        for (int neighbor : graph.get(node)) {
            if (!removed[neighbor]) {
                degree[neighbor]--;
                if (degree[neighbor] == 1 && coins[neighbor] == 0) {
                    queue.offer(neighbor);
                }
            }
        }
    }
    // Step 3: 再剪两轮，删除最远的“必要路径”节点（每个硬币需要到达点距 ≤2）
    for (int round = 0; round < 2; round++) {
        queue.clear();
        for (int i = 0; i < n; i++) {
            if (degree[i] == 1 && !removed[i]) {
                queue.offer(i);
            }
        }
        int size = queue.size();
        for (int i = 0; i < size; i++) {
            int node = queue.poll();
            removed[node] = true;
            for (int neighbor : graph.get(node)) {
                if (!removed[neighbor]) {
                    degree[neighbor]--;
                }
            }
        }
    }
    // Step 4: 统计剩余边数，每条边都要走两次（来回），即操作次数 = 剩余边数 * 2
    int remainingEdges = 0;
    for (int[] edge : edges) {
        if (!removed[edge[0]] && !removed[edge[1]]) {
            remainingEdges++;
        }
    }
    return remainingEdges * 2;
}
