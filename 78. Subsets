Given a set of distinct integers, nums, return all possible subsets.
Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example, If nums = [1,2,3], a solution is:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

Solution 1: recursion. Time complexity: exponential. Space complexity: exponential.
public class Solution {          
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0) {
            return result;
        }
        Arrays.sort(nums);                   // Elements in a subset must be in non-descending order.
		List<Integer> list = new ArrayList<Integer>();
        helper(nums, result, list, 0);
        return result;
    }
    private void helper(int[] nums, List<List<Integer>> result, List<Integer> list, int pos) {
        result.add(new ArrayList<Integer>(list)); 
        for (int i = pos; i < nums.length; i++) {
            list.add(nums[i]);
            subsetsHelper(nums, result, list, i + 1);
            list.remove(list.size() - 1);
        }
    }
}

Solution 2: iteration. Time complexity: exponential. Space complexity: exponential.
public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> rst = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0) {
            return rst;
        }
        int n = nums.length;
        Arrays.sort(nums);
        rst.add(new ArrayList<Integer>());                  // rst.size() = 1.
        for (int i = 0; i < nums.length; i++) {
            int size = rst.size();
            for (int j = 0; j < size; j++) {
                List<Integer> item = new ArrayList<Integer>(rst.get(j));         // copy
                item.add(nums[i]);
                rst.add(item);
            }
        }
        return rst;
    }
}
