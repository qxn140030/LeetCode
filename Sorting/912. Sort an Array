Given an array of integers nums, sort the array in ascending order and return it.
You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.
Example 1:
Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).

Example 2:
Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]
Explanation: Note that the values of nums are not necessairly unique.

Approach 1: Quick Sort
Time complexity: O(nlogn)
Space complexity: O(1)

class Solution {
    private static Random random;
    public int[] sortArray(int[] nums) {
        random = new Random();
        quickSort(nums, 0, nums.length - 1);
        return nums;
    }
    private void quickSort(int[] nums, int start, int end) {
        if (start < end) {
            int mid = partition(nums, start, end);
            quickSort(nums, start, mid - 1);
            quickSort(nums, mid + 1, end);
        }
    }
    private int partition(int[] nums, int start, int end) {
        int pivotIndex = start + random.nextInt(end - start + 1);    // use random to get average 
        int pivot = nums[pivotIndex], left = start;
        swap(nums, pivotIndex, end);
        for (int i = start; i < end; i++) {
            if (nums[i] < pivot) {
                swap(nums, i, left);
                left++;
            }
        }
        swap(nums, left, end);
        return left;
    }
    private void swap(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
}
