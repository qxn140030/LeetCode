Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.
The result may be very large, so you need to return a string instead of an integer.
Example 1: 
Input: nums = [10,2]
Output: "210"

Example 2: 
Input: nums = [3,30,34,5,9]
Output: "9534330"

Approach 1: Sorting via custom comparator
To construct the largest number, we want to ensure that the most significant digits are occupied by the largest digits.
convert each integer to a string, sort the array of strings.
Time complexity: O(nlogn)
overall runtime is donimated by the complexity of sort, although we are doing extra work in comparator, only a constant factor.
Space complexity: O(n), we allocate additional space to store the copy of nums.

public class Solution {
    public String largestNumber(int[] nums) {
        String[] arr = new String[nums.length];
        for (int i = 0; i < nums.length; i++) {
            arr[i] = String.valueOf(nums[i]);
        }
        Arrays.sort(arr, new Comparator<String>() {
           public int compare(String s1, String s2) {
               return (s2 + s1).compareTo(s1 + s2);      // in descending order.
           }       // (s1 + s2).compareTo(s2 + s1);             ascending order.
        });
        if (arr[0].equals("0")) {
            return "0";
        }
        StringBuilder sb = new StringBuilder();
        for (String s : arr) {
            sb.append(s);
        }
        return sb.toString();
    }
}
