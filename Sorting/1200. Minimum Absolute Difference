Given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements.
Return a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows
* a, b are from arr
* a < b
* b - a equals to the minimum absolute difference of any two elements in arr
Example 1:
Input: arr = [4,2,1,3]
Output: [[1,2],[2,3],[3,4]]
Explanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.

Example 2:
Input: arr = [1,3,6,10,15]
Output: [[1,3]]

Example 3:
Input: arr = [3,8,-10,23,19,-4,-14,27]
Output: [[-14,-10],[19,23],[23,27]]

Approach 1: Sort + 2 Traversals
Time complexity: O(nlog⁡n)
Space complexity: O(log⁡n)

class Solution {
    public List<List<Integer>> minimumAbsDifference(int[] arr) {
        Arrays.sort(arr);
        int n = arr.length, minDiff = Integer.MAX_VALUE;
        for (int i = 1; i < n; i++) {
            minDiff = Math.min(minDiff, arr[i] - arr[i - 1]);
        }
        List<List<Integer>> rst = new ArrayList<>();
        for (int i = 1; i < n; i++) {
            if (arr[i] - arr[i - 1] == minDiff) {
                rst.add(Arrays.asList(arr[i - 1], arr[i]));
            }
        }
        return rst;
    }
}

Approach 2: Bucket Sort
Time complexity: O(m + n), where n is the size of the input array, m is the range of values in arr.
Space complexity: O(m + n)

class Solution {
    public List<List<Integer>> minimumAbsDifference(int[] arr) {
        int minElement = arr[0], maxElement = arr[0];
        for (int num : arr) {
            minElement = Math.min(minElement, num);
            maxElement = Math.max(maxElement, num);
        }
        int shift = -1 * minElement;
        int[] line = new int[maxElement - minElement + 1];        
        List<List<Integer>> answer = new ArrayList();
        for (int num : arr) {
            line[num + shift] = 1;
        }
        int minPairDiff = maxElement - minElement, prev = 0;
        for (int i = 1; i <= maxElement + shift; i++) {
            if (line[i] == 0) {
                continue;
            }
            if (i - prev == minPairDiff) {       
                answer.add(Arrays.asList(prev - shift, i - shift));
            } else if (i - prev < minPairDiff) {
                answer = new ArrayList();
                minPairDiff = i - prev;
                answer.add(Arrays.asList(prev - shift, i - shift));                
            } 
            prev = i;
        }  
        return answer;
    }
}
