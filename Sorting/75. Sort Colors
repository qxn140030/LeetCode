Dutch National Flag Problem
Question: Given an array nums with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with
the colors in the order red, white and blue. Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.
Note: 
You are not suppose to use the library's sort function for this problem.

Follow up:
A rather straight forward solution is a two-pass algorithm using counting sort.
First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and
followed by 2's. Could you come up with an one-pass algorithm using only constant space?

Approach 1: Counting sort
Time complexity: O(n). 
Space complexity: O(1).

class Solution {
    public void sortColors(int[] nums) {
        if (nums == null || nums.length < 2) {
            return;
        }
        int[] count = new int[3];
        for (int i : nums) {
            count[i]++;
        }
        int j = 0;
        for (int i = 0; i < 3; i++) {
            while (count[i]-- > 0) {
                nums[j++] = i;
            }
        }
    }
}

Approach 2: Three pointers
to track the rightmost boundary of zeros, the leftmost boundary of twos and the current element under the consideration.
Time complexity: O(n). 
Space complexity: O(1).

public class Solution {
    public void sortColors(int[] nums) {
        if (nums == null || nums.length < 2) {
            return;
        }
        int left = 0;
        int right = nums.length - 1;
        int i = 0;
        while (i <= right) {
            if (nums[i] == 0) {
                swap(nums, i, left);
                left++;
                i++;
            } else if (nums[i] == 1) {
                i++;
            } else {
                swap(nums, i, right);
                right--;
            }
        }
    }
    private void swap(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
}
