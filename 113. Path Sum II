Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.
For example: Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]

Approach 1: DFS (Recursion)
Time complexity: O(n^2)
In the worst case, we could have a complete binary tree, then there would be N/2 leafs. 
For every leaf, we perform a potential O(N) operation of copying over the path nodes to a new list to be added to the final list.
Space complexity: O(n)
The only additional space that we use is the path list to keep track of nodes along a branch.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> rst = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        dfs(root, sum, rst, path);
        return rst;
    }
    private void dfs(TreeNode root, int sum, List<List<Integer>> rst, List<Integer> path) {
        if (root == null) {
            return;
        }
        path.add(root.val);
        sum -= root.val;
        if (root.left == null && root.right == null && sum == 0) {
            rst.add(new ArrayList<>(path));
            return;
        }
        if (root.left != null) {
            dfs(root.left, sum, rst, path);
            path.remove(path.size() - 1);
        }
        if (root.right != null) {
            dfs(root.right, sum, rst, path);
            path.remove(path.size() - 1);
        }
    }
}
