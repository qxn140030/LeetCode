Question: Given the root of a binary tree, return its maximum depth. 
The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Approach 1: Recursion (DFS)
Time complexity: O(n)
Space complexity: O(logn)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
    }
}

Approach 2: Iteration + Queue
Time complexity: O(n)
Space complexity: O(n)

 public class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int depth = 0;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
            depth++;
        }
        return depth;
    }
}

Approach 3: Iteration + Stack
Time complexity: O(n)
Space complexity: O(logn)

class Solution {
  public int maxDepth(TreeNode root) {
    LinkedList<TreeNode> stack = new LinkedList<>();
    LinkedList<Integer> depths = new LinkedList<>();
    if (root == null) {
        return 0;
    }
    stack.add(root);
    depths.add(1);
    int depth = 0;
    while(!stack.isEmpty()) {
      root = stack.pollLast();
      int currentDepth = depths.pollLast();
      if (root != null) {
        depth = Math.max(depth, currentDepth);
        stack.add(root.left);
        stack.add(root.right);
        depths.add(currentDepth + 1);
        depths.add(currentDepth + 1);
      }
    }
    return depth;
  }
}
