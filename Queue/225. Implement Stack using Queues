Implement the following operations of a stack using queues.
push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Notes:
> You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid. 
> Depending on your language, queue may not be supported natively. You may simulate a queue by using a
list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).

Approach 1: Two queues
store numbers in q1 in reverse order.

class MyStack {
    Queue<Integer> q1;
    Queue<Integer> q2;
    public MyStack() {
         q1 = new LinkedList<>();
         q2 = new LinkedList<>();
    }
    public void push(int x) {
        if (q1.isEmpty()) {
            q1.add(x);
        } else {
            q2.add(x);
            while (!q1.isEmpty()) {
                q2.add(q1.remove());
            }
            Queue tmp = q2;
            q2 = q1;
            q1 = tmp;
        }
    }
    public void pop() {
        if (!q1.isEmpty()) {
            q1.remove();
        }
    }
    public int top() {
        return q1.peek();
    }
    public boolean empty() {
        return q1.isEmpty();
    }
}

Approach 2: One queue
class MyStack {
    Queue<Integer> q;
    public MyStack() {
         q = new LinkedList<>();
    }
    public void push(int x) {
        q.offer(x);
        for (int i = 1; i < q.size(); i++) {
            q.offer(q.poll());
        }
    }
    public void pop() {
        q.poll();
    }
    public int top() {
        return q.peek();
    }
    public boolean empty() {
        return q.isEmpty();
    }
}
