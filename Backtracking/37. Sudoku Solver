Write a program to solve a Sudoku puzzle by filling the empty cells.
Empty cells are indicated by the character '.'.
You may assume that there will be only one unique solution.

Approach 1: Brute Force
generate all possible ways to fill the cells with numbers from 1 to 9, and then check them to keep the solution only. 
That means 9^(81) operations to do.

Approach 2: Backtracking
Time complexity: O(
Space complexity: O(

public class Solution {
    public void solveSudoku(char[][] board) {
        helper(board);
    }
    private boolean helper(char[][] board) {                // helper function, return a boolean.
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') {
                    for (int k = 1; k <= 9; k++) {
                        board[i][j] = (char)('0' + k);
                        if (isValid(board, i, j) && helper(board)) {      // Note.
                            return true;
                        }
                        board[i][j] = '.';            // Note: important.
                    }
                    return false;                     // have tried 1 - 9, but none is valid.
                }
            }
        }
        return true;
    }
    private boolean isValid(char[][] board, int row, int col) {
        for (int i = 0; i < 9; i++) {
            if (row != i && board[i][col] == board[row][col]) {
                return false;
            }
        }
        for (int i = 0; i < 9; i++) {
            if (col != i && board[row][i] == board[row][col]) {
                return false;
            }
        }
        for (int i = row / 3 * 3; i < row / 3 * 3 + 3; i++) {
            for (int j = col / 3 * 3; j < col / 3 * 3 + 3; j++) {
                if (i != row && j != col && board[i][j] == board[row][col]) {
                    return false;
                }
            }
        }
        return true;
    }
}
