Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
For example,
Input: n = 3 
Output: ["((()))", "(()())", "(())()", "()(())", "()()()"]

Approach 1: Brute force
we can generate all 2^(2n) sequence of '(' and ')' characters, then check if each one is valid.
Time complexity: O(n * 2^(2n)), for each sequence, we need to create and validate, which takes O(n) work.
Space complexity: O(n * 2^(2n))

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> rst = new ArrayList<>();
        generateAll(new char[2 * n], 0, rst);
        return rst;
    }
    private void generateAll(char[] cur, int pos, List<String> rst) {
        if (pos == cur.length) {
            if (valid(cur)) {
                rst.add(new String(cur));
            }
        } else {
            cur[pos] = '(';
            generateAll(cur, pos + 1, rst);
            cur[pos] = ')';
            generateAll(cur, pos + 1, rst);
        }
    }
    private boolean valid(char[] cur) {
        int count = 0;
        for (char c : cur) {
            if (c == '(') {
                count++;     
            } else {
                count--;
            }
            if (count < 0) {
                return false;
            }
        }
        return count == 0;
    }
}

Approach 2: Backtracking
only add them when we know it will remain a valid sequence.
Time complexity: O(4^n / sqr(n))
Space complexity: O(4^n / sqr(n))

public class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> rst = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        helper(rst, sb, n, n);
        return rst;
    }
    private void helper(List<String> rst, StringBuilder sb, int left, int right) {
        if (left == 0 && right == 0) {
            rst.add(sb.toString());
            return;
        }
        if (left > right) {
            return;
        }
        if (left > 0) {
            sb.append('(');
            helper(rst, sb, left - 1, right);
            sb.deleteCharAt(sb.length() - 1);
        }
        if (right > 0) {
            sb.append(')');
            helper(rst, sb, left, right - 1);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}

Approach 3: Closure Number (DP)
Time complexity: O(4^n / sqr(n))
Space complexity: O(4^n / sqr(n))

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList<>();
        if (n == 0) {
            ans.add("");
        } else {
            for (int i = 0; i < n; i++) {
                for (String left: generateParenthesis(i)) {
                    for (String right: generateParenthesis(n - 1 - i)) {
                        ans.add("(" + left + ")" + right);
                    }
                }
            }
        }
        return ans;
    }
}
