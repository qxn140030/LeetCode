Given a collection of distinct numbers, return all possible permutations.
You can return the answer in any order.
Example 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:
Input: nums = [1]
Output: [[1]]

Approach 1: Backtracking (DFS)
Time complexity: O(n * n!)
Space complexity: O(n)

public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> rst = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        dfs(nums, rst, path);
        return rst;
    }
    private void dfs(int[] nums, List<List<Integer>> rst, List<Integer> path) {
        if (path.size() == nums.length) {
            rst.add(new ArrayList<>(path));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (path.contains(nums[i])) {
                continue;
            }
            path.add(nums[i]);
            dfs(nums, rst, path);
            path.remove(path.size() - 1);
        }
    }
}

Approach 2: Iteration - Inserting
If there is only 1 number [1], then just returning [[1]].
What about [1,2]? We just need to insert 2 in the gap of 1, which is 2 on the left and right. Result becomes [[2,1], [1,2]].
Time complexity: O(n!)
Space complexity: O(1)

public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> rst = new ArrayList<>();
        rst.add(new ArrayList<>());                         // start from an empty list
        for (int i = 0; i < nums.length; i++) {
            List<List<Integer>> cur = new ArrayList<>();    // Note
            for (List list : rst) {
                for (int j = 0; j <= list.size(); j++) {
                    list.add(j, nums[i]);                   // add the number to different locations
                    cur.add(new ArrayList<>(list));
                    list.remove(j);
                }
            }
            rst = cur;
        }
        return rst;
    }
}
