You are given an array of transactions transactions where transactions[i] = [fromi, toi, amounti] indicates that the person with ID = fromi gave amounti $ to the person with ID = toi.

Return the minimum number of transactions required to settle the debt.

Example 1:
Input: transactions = [[0,1,10],[2,0,5]]
Output: 2
Explanation:
Person #0 gave person #1 $10.
Person #2 gave person #0 $5.
Two transactions are needed. One way to settle the debt is person #1 pays person #0 and #2 $5 each.

Example 2:
Input: transactions = [[0,1,10],[1,0,1],[1,2,5],[2,0,5]]
Output: 1
Explanation:
Person #0 gave person #1 $10.
Person #1 gave person #0 $1.
Person #1 gave person #2 $5.
Person #2 gave person #0 $5.
Therefore, person #1 only need to give person #0 $4, and all debt is settled.

public int minTransfers(int[][] transactions) {
    Map<Integer, Integer> creditMap = new HashMap<>();     // Step 1: Calculate net balance for each person
    for (int[] t : transactions) {
        creditMap.put(t[0], creditMap.getOrDefault(t[0], 0) - t[2]);
        creditMap.put(t[1], creditMap.getOrDefault(t[1], 0) + t[2]);
    }
    creditList = new ArrayList<>();
    for (int amount : creditMap.values()) {
        if (amount != 0) {                             // Step 2: Filter out people with zero balance, only keep those who need to settle
            creditList.add(amount);
        }
    }
    int n = creditList.size();
    return dfs(0, n);
}
List<Integer> creditList;
int dfs(int cur, int n) {                             // DFS function to compute the minimum number of transactions needed to settle debts
    while (cur < n && creditList.get(cur) == 0) {     // Skip people who already have zero balance
        cur++;
    }
    if (cur == n) {                                   // Base case: all debts settled
        return 0;
    }
    int cost = Integer.MAX_VALUE;
    for (int nxt = cur + 1; nxt < n; nxt++) {                                 // Try to settle current person's balance with one of the later people
        if (creditList.get(nxt) * creditList.get(cur) < 0) {                  // Only try to settle with someone who has the opposite balance sign
            creditList.set(nxt, creditList.get(nxt) + creditList.get(cur));   // Simulate settling current balance with person nxt
            cost = Math.min(cost, 1 + dfs(cur + 1, n));                       // Recurse to settle the rest, add 1 transaction
            creditList.set(nxt, creditList.get(nxt) - creditList.get(cur));   // Backtrack
        }
    }
    return cost;
}
