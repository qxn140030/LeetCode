Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.
you may return the answer in any order.
Example 1:
Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]

Example 2:
Input: n = 1, k = 1
Output: [[1]]

Approach 1: Backtracking
Time complexity: O(k * C(k, n)), where C(k, n) = n! / ((n - k)! * k!)
Space complexity: O(k)

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> rst = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        helper(rst, list, n, k, 1);
        return rst;
    }
    private void helper(List<List<Integer>> rst, List<Integer> list, int n, int k, int start) {
        if (list.size() == k) {
            rst.add(new ArrayList<>(list));
            return;
        }
        for (int i = start; i <= n; i++) {
            list.add(i);
            helper(rst, list, n, k, i + 1);
            list.remove(list.size() - 1);
        }
    }
}

Approach 2: Lexicographic (binary sorted) combinations
generate the combinations in a lexicographic sorted order.
Time complexity: O(k * C(k, n)), where C(k, n) = n! / ((n - k)! * k!)
Space complexity: O(1)

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<Integer> nums = new ArrayList<>();
        for (int i = 1; i <= k; i++) {                           // Initialize the first combination.
            nums.add(i);
        }
        nums.add(n + 1);                                         // Add n + 1 as a last element, it will serve as a sentinel. 
        List<List<Integer>> rst = new ArrayList<>();
        int j = 0;                                               // Set the pointer in the beginning of the list.
        while (j < k) {
            rst.add(new ArrayList<>(nums.subList(0, k)));        // Add current combination.
            j = 0;
            while (j < k && (nums.get(j) + 1) == nums.get(j + 1)) {
                nums.set(j, j + 1);
                j++;
            }
            nums.set(j, nums.get(j) + 1);                        // Increase it by one nums[j]++ to move to the next combination.
        }
        return rst;
    }
}
