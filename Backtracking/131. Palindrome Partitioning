Given a string s, partition s such that every substring of the partition is a palindrome.
Return all possible palindrome partitioning of s.
For example, given s = "aab", Return
[
  ["aa","b"],
  ["a","a","b"]
]

Approach 1: Backtracking
Time complexity: O(n * 2^n), where n is the length of string s.
there could be 2^n possible substrings in the worst case. 
For each substring, it takes O(n) time to generate the substring and determine if it is a palindrome or not.
Space complexity: O(n)

public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> rst = new ArrayList<>();
        List<String> path = new ArrayList<>();
        helper(s, rst, path, 0);
        return rst;
    }
    private void helper(String s, List<List<String>> rst, List<String> path, int pos) {
        if (pos == s.length()) {
            rst.add(new ArrayList<>(path));
            return;
        }
        for (int i = pos; i < s.length(); i++) {
            String sub = s.substring(pos, i + 1);
            if (isPalindrome(sub)) {
                path.add(sub);
                helper(s, rst, path, i + 1);
                path.remove(path.size() - 1);
            }
        }
    }
    private boolean isPalindrome(String s) {
        for (int i = 0, j = s.length() - 1; i < j; i++, j--) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
        }
        return true;
    }
}

Approach 2: Backtracking with DP
Time complexity: O(n * 2^n)
Space complexity: O(n^2)

class Solution {
    public List<List<String>> partition(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        List<List<String>> result = new ArrayList<>();
        dfs(result, s, 0, new ArrayList<>(), dp);
        return result;
    }
    private void dfs(List<List<String>> result, String s, int start, List<String> currentList, boolean[][] dp) {
        if (start >= s.length()) {
            result.add(new ArrayList<>(currentList));
        }
        for (int end = start; end < s.length(); end++) {
            if (s.charAt(start) == s.charAt(end) && (end - start <= 2 || dp[start + 1][end - 1])) {
                dp[start][end] = true;
                currentList.add(s.substring(start, end + 1));
                dfs(result, s, end + 1, currentList, dp);
                currentList.remove(currentList.size() - 1);
            }
        }
    }
}
