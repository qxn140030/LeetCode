Given an integer array nums that might contain duplicates, return all possible subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.
Example 1:
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Example 2:
Input: nums = [0]
Output: [[],[0]]

Approach 1: Backtracking
Time complexity: O( 
Space complexity: O(

public class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> rst = new ArrayList<>();
        Arrays.sort(nums);
        List<Integer> path = new ArrayList<>();
        dfs(nums, rst, path, 0);
        return rst;
    }
    private void dfs(int[] nums, List<List<Integer>> rst, List<Integer> path, int pos) {
        rst.add(new ArrayList<>(path));
        for (int i = pos; i < nums.length; i++) {
            if (i > pos && nums[i] == nums[i - 1]) {
                continue;
            }
            path.add(nums[i]);
            dfs(nums, rst, path, i + 1);
            path.remove(path.size() - 1);
        }
    }
}
