Given a 2D board and a word, find if the word exists in the grid.
The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically
neighboring. The same letter cell may not be used more than once.
For example, Given board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED", -> returns true, word = "SEE", -> returns true, word = "ABCB", -> returns false.
Follow up: 
Could you use search pruning to make your solution faster with a larger board?

Approach 1: Backtracking
Time complexity: O(m * n * 4^k), where k is the length of the word. 
Space complexity: O(m * n)

public class Solution {
    public boolean exist(char[][] board, String word) {
        int m = board.length, n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (search(board, word, 0, i, j, visited)) {
                    return true;
                }
            }
        }
        return false;
    }
    boolean search(char[][] board, String word, int index, int row, int col, boolean[][] visited) {
        if (index >= word.length()) { 
            return true;
        }
        if (row < 0 || col < 0 || row >= board.length || col >= board[0].length || visited[row][col] || word.charAt(index) != board[row][col]) {
            return false;
        }
        visited[row][col] = true;
        boolean rst = search(board, word, index + 1, row + 1, col, visited) 
 		   || search(board, word, index + 1, row, col + 1, visited) 
		   || search(board, word, index + 1, row - 1, col, visited) 
		   || search(board, word, index + 1, row, col - 1, visited);
        visited[row][col] = false;
        return rst;
    }
}

Follow up: Could you use search pruning to make your solution faster with a larger board?
Frequency check: If any character in word appears more than it does in the board, return false early.
Only start from matching letters: Donâ€™t even call search() unless the starting cell matches the first character.

// PRUNING 1 helper: Check if the board contains enough characters to form the word.
boolean canFormWord(char[][] board, String word) {
    int[] boardCount = new int[128];                     // Assuming ASCII
    int[] wordCount = new int[128];
    for (char[] row : board) {
        for (char c : row) {
            boardCount[c]++;
        }
    }
    for (char c : word.toCharArray()) {
        wordCount[c]++;
        if (wordCount[c] > boardCount[c]) {
            return false;
        }
    }
    return true;
}

// PRUNING 2: Only start search if first letter matches
if (board[i][j] == word.charAt(0) && search(board, word, 0, i, j, visited)) {
    return true;
}

Space complexity: O(1)
class Solution {
    public boolean exist(char[][] board, String word) {
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (search(board, word, 0, i, j)) {
                    return true;
                }
            }
        }
        return false;
    }
    private boolean search(char[][] board, String word, int index, int row, int col) {
        if (index >= word.length()) {
            return true;
        }
        if (row < 0 || col < 0 || row >= board.length || col >= board[0].length || word.charAt(index) != board[row][col]) {
            return false;
        }
        board[row][col] = '#';                    // mark the path before the next exploration.
        int[] rowOffsets = {0, 1, 0, -1};
        int[] colOffsets = {1, 0, -1, 0};
        for (int i = 0; i < 4; i++) {
            if (search(board, word, index + 1, row + rowOffsets[i], col + colOffsets[i])) {
                return true;                      // return without cleanup.
            }
        }
        board[row][col] = word.charAt(index);     // cleanup.
        return false;
    }
}
