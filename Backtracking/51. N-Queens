The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.
A queen can be attacked if another queen is on the same row, column, diagonal, or anti-diagonal.
Given an integer n, return all distinct solutions to the n-queens puzzle.
Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen
and an empty space respectively.
For example,
There exist two distinct solutions to the 4-queens puzzle:
[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]

Approach 1: Brute Force
generating all possible board states with n queens. There are n^2 possible squares to place the first queen, n^2 - 1 to place the second and so on.
The actual number of solutions is far fewer than the number of possible board states.
Time comeplexity: O(n^(2n))

Approach 2: Backtracking
Time comeplexity: O(n * n!)
For the first queen, we have n options. For the next queen, we won't attempt to place it in the same column as the first queen, 
and there must be at least one square attacked diagonally by the first queen as well. 
Thus, the maximum number of squares we can consider for the second queen is N - 2.
Space complexity: O(n)

public class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> rst = new ArrayList<>();
        List<Integer> cols = new ArrayList<>();
        helper(rst, cols, n);
        return rst;
    }
    private void helper(List<List<String>> rst, List<Integer> cols, int n) {        
        if (cols.size() == n) {
            List<String> path = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                StringBuilder sb = new StringBuilder();
                for (int j = 0; j < n; j++) {
                    if (j == cols.get(i)) {
                        sb.append('Q');
                    } else {
                        sb.append('.');
                    }
                }
                path.add(sb.toString());
            }
            rst.add(path);
            return;
        }
        for (int i = 0; i < n; i++) {
            if (isValid(cols, i)) {
                cols.add(i);
                helper(rst, cols, n);
                cols.remove(cols.size() - 1);
            }
        }
    }
    private boolean isValid(List<Integer> cols, int col) {
        int row = cols.size();
        for (int i = 0; i < row; i++) {
            if (cols.get(i) == col || row - i == Math.abs(col - cols.get(i))) {
                return false;
            }
            
        }
        return true;
    }
}
