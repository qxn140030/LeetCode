Given an integer array nums of unique elements, return all possible subsets (the power set).
Note:
The solution set must not contain duplicate subsets. Return the solution in any order.
Example 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:
Input: nums = [0]
Output: [[],[0]]

Approach 1: Backtracking 
Time complexity: O(n * 2^n)
Space complexity: O(n)

public class Solution {          
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        helper(nums, result, list, 0);
        return result;
    }
    private void helper(int[] nums, List<List<Integer>> result, List<Integer> list, int pos) {
        result.add(new ArrayList<>(list)); 
        for (int i = pos; i < nums.length; i++) {
            list.add(nums[i]);
            helper(nums, result, list, i + 1);
            list.remove(list.size() - 1);
        }
    }
}

Approach 2: Iteration - Cascading
Time complexity: O(n * 2^n) to generate all subsets then copy into output list.
Space complexity: O(1), total solution: 2^n.

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> rst = new ArrayList<>();
        rst.add(new ArrayList<>());     
        for (int num : nums) {
            int size = rst.size();
            for (int j = 0; j < size; j++) {
                List<Integer> item = new ArrayList<>(rst.get(j));    // copy.
                item.add(num);
                rst.add(item);
            }
        }
        return rst;
    }
}
