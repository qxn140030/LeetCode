Given a collection of numbers that might contain duplicates, return all possible unique permutations.
Example 1:
Input: nums = [1,1,2]
Output: [[1,1,2],[1,2,1],[2,1,1]]

Example 2:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Approach 1: Recursive
Time complexity: O(n * n!)
Space complexity: O(n)

public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> rst = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        int[] visited = new int[nums.length];
        dfs(nums, rst, path, visited);
        return rst;
    }
    private void dfs(int[] nums, List<List<Integer>> rst, List<Integer> path, int[] visited) {
        if (path.size() == nums.length) {
            rst.add(new ArrayList<>(path));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] == 1 || (i > 0 && nums[i] == nums[i - 1] && visited[i - 1] == 0)) {
                continue;
            }
            visited[i] = 1;
            path.add(nums[i]);
            dfs(nums, rst, path, visited);
            path.remove(path.size() - 1);
            visited[i] = 0;
        }
    }
}

Approach 2: Iterative
using HashSet to maintain uniqueness. 
Time complexity: O(n * n!)
Space complexity: O(1)

public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> rst = new ArrayList<>();
        rst.add(new ArrayList<>());                            // start from an empty list.
        for (int i = 0; i < nums.length; i++) {
            Set<List<Integer>> cur = new HashSet<>();          // Note.
            for (List list : rst) {
                for (int j = 0; j <= list.size(); j++) {
                    list.add(j, nums[i]);                      // add the number to different locations.
                    cur.add(new ArrayList<>(list));
                    list.remove(j);
                }
            }
            rst = new ArrayList<>(cur);                        // Note.
        }
        return rst;
    }
}
