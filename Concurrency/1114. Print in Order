Suppose we have a class:
public class Foo {
  public void first() { print("first"); }
  public void second() { print("second"); }
  public void third() { print("third"); }
}
The same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and thread C will call third(). 
Design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second().
Note:
We do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. The input format you see is mainly to ensure our tests' comprehensiveness.

Example 1:
Input: nums = [1,2,3]
Output: "firstsecondthird"
Explanation: There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). "firstsecondthird" is the correct output.

Example 2:
Input: nums = [1,3,2]
Output: "firstsecondthird"
Explanation: The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). "firstsecondthird" is the correct output.

By simultaneousness, the processes or threads are not necessarily running independently in different physical CPUs, but more often they interleave in the same physical CPU.
the problems caused by concurrency:
1. race conditions
the program ends with an undesired output, resulting from the sequence of execution among the processes.
2. deadlocks
the concurrent processes wait for some necessary resources from each other.
3. resource starvation
a process is perpetually denied necessary resources to progress its works.

Approach 1: Pair Synchronization
In order to enforce the execution sequence of the jobs, we could create some dependencies between pairs of jobs, i.e. the second job should depend on the completion of the first job and the third job should depend on the completion of the second job.

class Foo {
    private AtomicInteger firstJobDone;
    private AtomicInteger secondJobDone;
    public Foo() {
        firstJobDone = new AtomicInteger(0);
        secondJobDone = new AtomicInteger(0);
    }
    public void first(Runnable printFirst) throws InterruptedException {    
        printFirst.run();
        firstJobDone.incrementAndGet();                                       // mark the first job as done, by increasing its count.
    }
    public void second(Runnable printSecond) throws InterruptedException {
        while (firstJobDone.get() != 1) {}                                    // waiting for the first job to be done.
        printSecond.run();
        secondJobDone.incrementAndGet();
    }

    public void third(Runnable printThird) throws InterruptedException {
        while (secondJobDone.get() != 1) {}
        printThird.run();
    }
}

Approach 2: Synchronized

class Foo {
    private boolean oneDone;
    private boolean twoDone;
    public Foo() {
        oneDone = false;
        twoDone = false;
    }
    public synchronized void first(Runnable printFirst) throws InterruptedException {       // public synchronized void.
        printFirst.run();
        oneDone = true;
        notifyAll();
    }

    public synchronized void second(Runnable printSecond) throws InterruptedException {
        while (!oneDone) {
            wait();
        }
        printSecond.run();
        twoDone = true;
        notifyAll();
    }

    public synchronized void third(Runnable printThird) throws InterruptedException {
        while (!twoDone) {
            wait();
        }
        printThird.run();
    }
}

Approach 3: Synchronized on Object

class Foo {
    private Object lock;
    private boolean oneDone;
    private boolean twoDone;
    public Foo() {
        lock = new Object();
        oneDone = false;
        twoDone = false;
    }
    public void first(Runnable printFirst) throws InterruptedException {
        synchronized (lock) {
            printFirst.run();
            oneDone = true;
            lock.notifyAll();
        }
    }
    public void second(Runnable printSecond) throws InterruptedException {
        synchronized (lock) {
            while (!oneDone) {
                lock.wait();
            }
            printSecond.run();
            twoDone = true;
            lock.notifyAll();
        }
    }
    public void third(Runnable printThird) throws InterruptedException {
        synchronized (lock) {
            while (!twoDone) {
                lock.wait();
            }
            printThird.run();
        }
    }
}
