Question: Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? 
          Find all unique quadruplets in the array which gives the sum of target.
    Note: Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a = b = c = d)
          The solution set must not contain duplicate quadruplets.
          For example, given array S = {1 0 -1 0 -2 2}, and target = 0.
          A solution set is: (-1,  0, 0, 1), (-2, -1, 1, 2), (-2,  0, 0, 2).

Time complexity: O(n^3).
Space complexity: O(1).
public class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> rst = new ArrayList<List<Integer>>();
        if (nums == null || nums.length < 4) {
            return rst;
        }
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 3; i++) {
            if (i == 0 || nums[i] > nums[i - 1]) {
                for (int j = i + 1; j < nums.length - 2; j++) {
                    if (j == i + 1 || nums[j] > nums[j - 1]) {
                        int start = j + 1;
                        int end = nums.length - 1;
                        while (start < end) {
                            int sum = nums[i] + nums[j] + nums[start] + nums[end];
                            if (sum > target) {
                                end--;
                            } else if (sum < target) {
                                start++;
                            } else {
                                List<Integer> each = new ArrayList<Integer>();
                                each.add(nums[i]);
                                each.add(nums[j]);
                                each.add(nums[start]);
                                each.add(nums[end]);
                                rst.add(each);
                                start++;
                                end--;
                                while (start < end && nums[end + 1] == nums[end]) {
                                    end--;
                                }
                                while (start < end && nums[start] == nums[start - 1]) {
                                    start++;
                                }
                            } 
                        }
                    }
                }
            }
        }
        return rst;
    }
}
