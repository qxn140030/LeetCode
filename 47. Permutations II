Given a collection of numbers that might contain duplicates, return all possible unique permutations.
For example, [1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]

Solution 1: recursive. Time complexity: exponential. Space complexity: O(n!).
public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> rst = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0) {
            return rst;
        }
        Arrays.sort(nums);
        List<Integer> path = new ArrayList<Integer>();
        int[] visited = new int[nums.length];
        dfs(nums,  rst, path, visited);
        return rst;
    }
    private void dfs(int[] nums, List<List<Integer>> rst, List<Integer> path, int[] visited) {
        if (path.size() == nums.length) {
            rst.add(new ArrayList<Integer>(path));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] == 1 || (i > 0 && nums[i] == nums[i - 1] && visited[i - 1] == 0)) {
                continue;
            }
            visited[i] = 1;
            path.add(nums[i]);
            dfs(nums, rst, path, visited);
            path.remove(path.size() - 1);
            visited[i] = 0;
        }
    }
}

Solution 2: iterative. using HashSet to maintain uniqueness. Time complexity: exponential. Space complexity: O(n!).
public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> rst = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0) {
            return rst;
        }
        rst.add(new ArrayList<Integer>());        // start from an empty list
        for (int i = 0; i < nums.length; i++) {
            Set<List<Integer>> cur = new HashSet<List<Integer>>();      // Note
            for (List list : rst) {
                for (int j = 0; j <= list.size(); j++) {
                    list.add(j, nums[i]);                 // add the number to different locations
                    cur.add(new ArrayList<Integer>(list));
                    list.remove(j);
                }
            }
            rst = new ArrayList<List<Integer>>(cur);       // Note
        }
        return rst;
    }
}
