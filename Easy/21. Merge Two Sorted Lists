Question: Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of
the first two lists.

Approach 1: recursion
Time complexity: O(m + n). traversing all the nodes of the lists, each recursive call increments the pointer to l1 or l2 by one.
Space complexity: O(m + n). 

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if (list1 == null) {
            return list2;
        }
        if (list2 == null) {
            return list1;
        }
        if (list1.val < list2.val) {
            list1.next = mergeTwoLists(list1.next, list2);
            return list1;
        } else {
            list2.next = mergeTwoLists(list1, list2.next);
            return list2;
        }
    }
}

Approach 2: iteration
using dummy head. 
Time complexity: O(m + n). traversing all the nodes of the lists, exactly one of l1 or l2 is incremented on each loop iteration.
Space complexity: O(1). only allocates a few pointers.

/**
 * Definition for singly-linked list. 
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode last = dummy;
        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                last.next = l1;
                l1 = l1.next;
            } else {
                last.next = l2;
                l2 = l2.next;
            }
            last = last.next;
        }
        last.next = l1 != null ? l1 : l2;
        return dummy.next;
    }
}
