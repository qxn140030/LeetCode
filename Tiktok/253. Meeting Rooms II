Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.
Example 1:
Input: intervals = [[0,30],[5,10],[15,20]]
Output: 2

Example 2:
Input: intervals = [[7,10],[2,4]]
Output: 1

Approach 1: Priority Queues
Time Complexity: O(nlog⁡n)
Space Complexity: O(n)

class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if (intervals.length == 0) {
            return 0;
        }
        PriorityQueue<Integer> q = new PriorityQueue<>(); 
        Arrays.sort(intervals, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return a[0] - b[0];                  // Sort the intervals by start time.
            }
        });
        q.add(intervals[0][1]);
        for (int i = 1; i < intervals.length; i++) {      
            if (intervals[i][0] >= q.peek()) {
                q.poll();
            }
            q.add(intervals[i][1]);
        }
        return q.size();
    }
}

Approach 2: Chronological Ordering
Time Complexity: O(nlog⁡n)
Space Complexity: O(n)

class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if (intervals.length == 0) {
            return 0;
        }
        Integer[] start = new Integer[intervals.length];
        Integer[] end = new Integer[intervals.length];
        for (int i = 0; i < intervals.length; i++) {
            start[i] = intervals[i][0];
            end[i] = intervals[i][1];
        }
        // Sort the intervals by end time
        Arrays.sort(
            end,
            new Comparator<Integer>() {
                public int compare(Integer a, Integer b) {
                    return a - b;
                }
            });
        // Sort the intervals by start time
        Arrays.sort(
            start,
            new Comparator<Integer>() {
                public int compare(Integer a, Integer b) {
                    return a - b;
                }
            });
        // The two pointers in the algorithm: e_ptr and s_ptr.
        int startPointer = 0, endPointer = 0;
        // Variables to keep track of maximum number of rooms used.
        int usedRooms = 0;
        // Iterate over intervals.
        while (startPointer < intervals.length) {
          // If there is a meeting that has ended by the time the meeting at `start_pointer` starts
          if (start[startPointer] >= end[endPointer]) {
              usedRooms -= 1;
              endPointer += 1;
          }
          // We do this irrespective of whether a room frees up or not.
          // If a room got free, then this used_rooms += 1 wouldn't have any effect. used_rooms would
          // remain the same in that case. If no room was free, then this would increase used_rooms
            usedRooms += 1;
            startPointer += 1;
        }
        return usedRooms;
    }
}
