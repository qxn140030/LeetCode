Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.
Example 1:
Input: s = "aaabb", k = 3
Output: 3
Explanation: The longest substring is "aaa", as 'a' is repeated 3 times.

Example 2:
Input: s = "ababbc", k = 2
Output: 5
Explanation: The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.

Approach 1: Brute Force
Time Complexity: O(n^2)
Space Complexity: O(1)

class Solution {
    public int longestSubstring(String s, int k) {
        if (s == null || s.isEmpty() || k > s.length()) {
            return 0;
        }
        int[] count = new int[26];
        int n = s.length(), rst = 0;
        for (int i = 0; i < n; i++) {
            Arrays.fill(count, 0);         // reset the count map.
            for (int j = i; j < n; j++) {
                count[s.charAt(j) - 'a']++;
                if (isValid(s, i, j, k, count)) {
                    rst = Math.max(rst, j - i + 1);
                }
            }
        }
        return rst;
    }
    private boolean isValid(String s, int i, int j, int k, int[] count) {
        int unique = 0, countAtLeastK = 0;
        for (int freq : count) {
            if (freq > 0) {
                unique++;
            }
            if (freq >= k) {
                countAtLeastK++;
            }
        }
        return unique == countAtLeastK;
    }
}

Approach 2: Divide And Conquer
Time Complexity: O(n^2)
Space Complexity: O(n)

class Solution {
    public int longestSubstring(String s, int k) {
        return helper(s, 0, s.length(), k);
    }
    private int helper(String s, int start, int end, int k) {
        if (end < k) {
            return 0;
        }
        int[] count = new int[26];
        for (int i = start; i < end; i++) {       // update count array with the count of each character.
            count[s.charAt(i) - 'a']++;
        }
        for (int mid = start; mid < end; mid++) {
            if (count[s.charAt(mid) - 'a'] >= k) {
                continue;
            }
            int midNext = mid + 1;
            while (midNext < end && count[s.charAt(midNext) - 'a'] < k) {
                midNext++;
            }
            return Math.max(helper(s, start, mid, k), helper(s, midNext, end, k));
        }
        return end - start;
    }
}

Approach 3: Sliding Window
Time Complexity: O(n * maxUnique)
Space Complexity: O(1)

class Solution {
    public int longestSubstring(String s, int k) {
        char[] str = s.toCharArray();
        int[] countMap = new int[26];
        int maxUnique = getMaxUniqueLetters(s);
        int result = 0;
        for (int currUnique = 1; currUnique <= maxUnique; currUnique++) {
            Arrays.fill(countMap, 0);                                     // reset countMap.
            int windowStart = 0, windowEnd = 0, idx = 0, unique = 0, countAtLeastK = 0;
            while (windowEnd < str.length) {
                if (unique <= currUnique) {       // expand the sliding window.
                    idx = str[windowEnd] - 'a';
                    if (countMap[idx] == 0) {
                        unique++;
                    }
                    countMap[idx]++;
                    if (countMap[idx] == k) {
                        countAtLeastK++;
                    }
                    windowEnd++;
                } else {                          // shrink the sliding window.
                    idx = str[windowStart] - 'a';
                    if (countMap[idx] == k) {
                        countAtLeastK--;
                    }
                    countMap[idx]--;
                    if (countMap[idx] == 0) {
                        unique--;
                    }
                    windowStart++;
                }
                if (unique == currUnique && unique == countAtLeastK) {
                    result = Math.max(windowEnd - windowStart, result);
                }
            }
        }
        return result;
    }
    private int getMaxUniqueLetters(String s) {    // get the maximum number of unique letters in the string s.
        boolean map[] = new boolean[26];
        int maxUnique = 0;
        for (int i = 0; i < s.length(); i++) {
            if (!map[s.charAt(i) - 'a']) {
                maxUnique++;
                map[s.charAt(i) - 'a'] = true;
            }
        }
        return maxUnique;
    }
}
