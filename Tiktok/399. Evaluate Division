Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating
point number). Given some queries, return the answers. If the answer does not exist, return -1.0.
Example:
Given a / b = 2.0, b / c = 3.0. 
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? . 
return [6.0, 0.5, -1.0, 1.0, -1.0 ].
The input is: vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries , where
equations.size() == values.size(), and the values are positive. This represents the equations. Return vector<double>.
According to the example above:
equations = [ ["a", "b"], ["b", "c"] ],
values = [2.0, 3.0],
queries = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"] ]. 
The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.

public class Solution {
    public double[] calcEquation(String[][] equations, double[] values, String[][] queries) {
        if (equations.length != values.length) {
            return null;
        }
        double[] rst = new double[queries.length];
        Map<String, Map<String, Double>> graph = new HashMap<>();
        for (int i = 0; i < equations.length; i++) {
            buildGraph(graph, equations[i][0], equations[i][1], values[i]);
            buildGraph(graph, equations[i][1], equations[i][0], 1.0 / values[i]);
        }
        for (int i = 0; i < queries.length; i++) {
            rst[i] = calculate(graph, queries[i][0], queries[i][1]);
        }
        return rst;
    }
    private double calculate(Map<String, Map<String, Double>> graph, String first, String second) {
        if (!graph.containsKey(first) || !graph.containsKey(second)) {
            return -1.0;
        }
        Queue<String> q = new LinkedList<>();
        Map<String, Double> val = new HashMap<>();
        Set<String> hs = new HashSet<>();
        q.offer(first);
        val.put(first, 1.0);
        hs.add(first);
        while (!q.isEmpty()) {
            String cur = q.poll();
            for (Map.Entry<String, Double> entry : graph.get(cur).entrySet()) {
                String next = entry.getKey();
                val.put(next, val.get(cur) * entry.getValue());
                if (next.equals(second)) {
                    return val.get(next);
                } else if (!hs.contains(next)) {
                    q.offer(next);
                    hs.add(next);
                }
            }
        }
        return -1.0;
    }
    private void buildGraph(Map<String, Map<String, Double>> graph, String first, String second, double val) {
        Map<String, Double> edges;
        if (graph.containsKey(first)) {
            edges = graph.get(first);
        } else {
            edges = new HashMap<>();
        }
        edges.put(second, val);
        graph.put(first, edges);
    }
}
