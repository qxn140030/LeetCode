Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. 
The overall run time complexity should be O(log(m+n)).
Example 1:
Input: nums1 = [1, 3], nums2 = [2]
Output: 2.00000

Example 2:
Input: nums1 = [1, 2], nums2 = [3, 4]
Output: 2.50000, (2 + 3) / 2 = 2.5

Approach 1: Divide and Conquer (Recursion)
Time complexity: O(log(m + n))
Space complexity: O(log(m + n))

public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len = nums1.length + nums2.length;
        if (len % 2 == 1) {
            return findKth(nums1, 0, nums2, 0, len / 2 + 1);
        } 
        return (findKth(nums1, 0, nums2, 0, len / 2) + findKth(nums1, 0, nums2, 0, len / 2 + 1)) / 2.0;
    }
    private int findKth(int[] nums1, int start1, int[] nums2, int start2, int k) {
        if (start1 >= nums1.length) {
            return nums2[start2 + k - 1];
        }
        if (start2 >= nums2.length) {
            return nums1[start1 + k - 1];
        }
        if (k == 1) {
            return Math.min(nums1[start1], nums2[start2]);
        }
        int key1 = start1 + k / 2 - 1 < nums1.length ? nums1[start1 + k / 2 - 1] : Integer.MAX_VALUE;
        int key2 = start2 + k / 2 - 1 < nums2.length ? nums2[start2 + k / 2 - 1] : Integer.MAX_VALUE;
        if (key1 < key2) {
            return findKth(nums1, start1 + k / 2, nums2, start2, k - k / 2);
        } 
        return findKth(nums1, start1, nums2, start2 + k / 2, k - k / 2);
    }
}

Approach 2: Binary Search (Iteration)
Time complexity: O(logm), we binary serch the shorter array only
Space complexity: O(1)

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length, n2 = nums2.length;
        if (n1 > n2) {
            return findMedianSortedArrays(nums2, nums1);
        }
        int k = (n1 + n2 + 1) / 2;   
        int left = 0, right = n1;
        while (left < right) {
            int m1 = left + (right - left) / 2;
            int m2 = k - m1;
            if (nums1[m1] < nums2[m2 - 1]) {
                left = m1 + 1;
            } else {
                right = m1;
            }
        }
        // the first m1 element in nums1 is in the left half of merged array
        // the first m2 element in nums2 will be in the left half of merged array
        int m1 = left, m2 = k - left;
        int median1 = Math.max(m1 <= 0 ? Integer.MIN_VALUE : nums1[m1 - 1], m2 <= 0 ? Integer.MIN_VALUE : nums2[m2 - 1]);
        if ((n1 + n2) % 2 == 1) {
            return median1;
        }
        int median2 = Math.min(m1 >= n1 ? Integer.MAX_VALUE : nums1[m1], m2 >= n2 ? Integer.MAX_VALUE : nums2[m2]);
        return (median1 + median2) / 2.0;
    }
}
