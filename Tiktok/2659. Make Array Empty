You are given an integer array nums containing distinct numbers, and you can perform the following operations until the array is empty:
* If the first element has the smallest value, remove it
* Otherwise, put the first element at the end of the array.
Return an integer denoting the number of operations it takes to make nums empty.
Example 1:
Input: nums = [3,4,-1]
Output: 5
Operation	Array
1	[4, -1, 3]
2	[-1, 3, 4]
3	[3, 4]
4	[4]
5	[]

Example 2:
Input: nums = [1,2,4,3]
Output: 5
Operation	Array
1	[2, 4, 3]
2	[4, 3]
3	[3, 4]
4	[4]
5	[]

Example 3:
Input: nums = [1,2,3]
Output: 3
Operation	Array
1	[2, 3]
2	[3]
3	[]

Approach 1: Priority Queue (Time-Limit Exceeded)
Time complexity: O(nlogn)
Space complexity: O(n)

class Solution {
    public long countOperationsToEmptyArray(int[] nums) {
        PriorityQueue<Integer> pq = new PriorityQueue<>(nums.length);
        Queue<Integer> q = new LinkedList<>();
        for (int num : nums) {
            pq.offer(num);
            q.offer(num);
        }
        long rst = 0;
        while (!q.isEmpty()) {
            if (q.peek() > pq.peek()) {
                q.offer(q.poll());
            } else {
                q.poll();
                pq.poll();
            }
            rst++;
        }
        return rst;
    }
}

Approach 2: HashMap
Array has n elements, so it will take at least n operations to remove them.
Time complexity: O(nlogn)
Space complexity: O(n)

class Solution {
    public long countOperationsToEmptyArray(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        long n = nums.length, res = n;
        for (int i = 0; i < n; i++) {
            map.put(nums[i], i);
        }
        Arrays.sort(nums);                                    // Since the array has been sorted, ex: [1,2,3,4,5,6,7,8]
        for (int i = 1; i < n; i++) {
            if (map.get(nums[i]) < map.get(nums[i - 1])) {    // if we encounter a number with smaller index than previous number, we can split out a pass.
                res += n - i;                                 // + remaining size of the array.
            }
        }
        return res;
    }
}

class Solution {
    public long countOperationsToEmptyArray(int[] nums) {
        int n = nums.length;
        Integer[] pos = new Integer[n];
        for (int i = 0; i < n; i++) {
            pos[i] = i;
        }
        Arrays.sort(pos, (i, j) -> nums[i] - nums[j]);    // Do not sort the input array.
        long res = n;
        for (int i = 1; i < n; i++) {
            if (pos[i] < pos[i - 1]) {
                res += n - i;
            }
        }    
        return res;
    }
}
