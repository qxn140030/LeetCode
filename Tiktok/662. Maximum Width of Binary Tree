Given the root of a binary tree, return the maximum width of the given tree.
The maximum width of a tree is the maximum width among all levels.
The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that 
would be present in a complete binary tree extending down to that level are also counted into the length calculation.
It is guaranteed that the answer will in the range of a 32-bit signed integer.
Example 1:
            1
           / \
          3   2
         / \   \
        5   3   9
Input: root = [1,3,2,5,3,null,9]
Output: 4
Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).

Example 2:
            1
           / \
          3   2
         /     \
        5       9
       /       /
      6       7
Input: root = [1,3,2,5,null,null,9,6,null,7]
Output: 7
Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).

Example 3:
            1
           / \
          3   2
         /
        5
Input: root = [1,3,2,5]
Output: 2
Explanation: The maximum width exists in the second level with length 2 (3,2).

Approach 1: BFS
Time Complexity: O(n)
Space Complexity: O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if (root == null) {
            return 0;
        }
        LinkedList<Pair<TreeNode, Integer>> queue = new LinkedList<>();
        int maxWidth = 0;
        queue.addLast(new Pair<>(root, 0));     // hold elements of tuple as (node, col_index), where col_index is the corresponding index of the level.
        while (!queue.isEmpty()) {   
            Pair<TreeNode, Integer> leftMost = queue.getFirst();
            int currLevelSize = queue.size();
            Pair<TreeNode, Integer> elem = null;
            for (int i = 0; i < currLevelSize; ++i) {
                elem = queue.removeFirst();
                TreeNode node = elem.getKey();
                if (node.left != null) {
                    queue.addLast(new Pair<>(node.left, 2 * elem.getValue()));
                }     
                if (node.right != null) {
                    queue.addLast(new Pair<>(node.right, 2 * elem.getValue() + 1));
                }
            }
            maxWidth = Math.max(maxWidth, elem.getValue() - leftMost.getValue() + 1);
        }
        return maxWidth;
    }
}

Approach 2: DFS
Time Complexity: O(n)
Space Complexity: O(n)

class Solution {
    private int maxWidth = 0;
    private HashMap<Integer, Integer> firstColIndexTable;
    public int widthOfBinaryTree(TreeNode root) {
        // table contains the first col_index for each level
        this.firstColIndexTable = new HashMap<Integer, Integer>();
        dfs(root, 0, 0);
        return maxWidth;
    }
    private void dfs(TreeNode node, Integer depth, Integer colIndex) {
        if (node == null) {
            return;
        }
        // initialize the value, for the first seen colIndex per level
        if (!firstColIndexTable.containsKey(depth)) {
            firstColIndexTable.put(depth, colIndex);
        }
        int firstColIndex = firstColIndexTable.get(depth);
        maxWidth = Math.max(maxWidth, colIndex - firstColIndex + 1);
        // Preorder DFS. Note: it is important to put the priority on the left child
        dfs(node.left, depth + 1, 2 * colIndex);
        dfs(node.right, depth + 1, 2 * colIndex + 1);
    }
}
