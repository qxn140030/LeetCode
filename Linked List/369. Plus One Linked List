Given a non-negative number represented as a singly linked list of digits, plus one to the number.
The digits are stored such that the most significant digit is at the head of the list.
Example:
Input:  1 -> 2 -> 3
Output: 1 -> 2 -> 4

Approach 1: Reverse + addition + reverse back
Time complexity: O(n)
Space complexity: O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode plusOne(ListNode head) {
        head = reverse(head);      
        int carry = 1;
        ListNode node = head, pre = null;    
        while (node != null) {
            int sum = node.val + carry;
            node.val = sum % 10;
            carry = sum / 10;
            if (carry == 0) {
                break;
            }
            pre = node;
            node = node.next;
        }
        if (carry > 0) {
            pre.next = new ListNode(carry);    
        }
        return reverse(head);      
    }
    private ListNode reverse(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode pre = null;
        while (head != null) {
            ListNode sec = head.next;
            head.next = pre;
            pre = head;
            head = sec;
        }
        return pre;
    }
}

Approach 2: Sentinel head + Textbook addition
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public ListNode plusOne(ListNode head) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode notNine = dummy;
        while (head != null) {
            if (head.val != 9) {      // find the rightmost not-nine digit
                notNine = head;
            }
            head = head.next;
        }
        notNine.val++;                // increase the digit by 1
        notNine = notNine.next;
        while (notNine != null) {
            notNine.val = 0;          // set all the following nines to 0
            notNine = notNine.next;
        }
        return dummy.val > 0 ? dummy : dummy.next; 
    }
}
