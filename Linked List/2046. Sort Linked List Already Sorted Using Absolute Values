Given the head of a singly linked list that is sorted in non-decreasing order using the absolute values of its nodes, 
return the list sorted in non-decreasing order using the actual values of its nodes.
Follow up:
Can you think of a solution with O(n) time complexity?
Example 1:
Input: head = [0,2,-5,5,10,-10]
Output: [-10,-5,0,2,5,10]

Example 2:
Input: head = [0,1,2]
Output: [0,1,2]

Approach 1: Intuitive
Time complexity: O(n)
Space complexity: O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortLinkedList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode pre = head, cur = head.next;
        while (cur != null) {
            if (cur.val < 0) {
                pre.next = cur.next;
                cur.next = head;
                head = cur;
                cur = pre.next;
            } else {
                pre = pre.next;
                cur = cur.next;
            }
        }
        return head;
    }
}
