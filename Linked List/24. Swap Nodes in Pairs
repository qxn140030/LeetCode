Given a linked list, swap every two adjacent nodes and return its head.
Example 1: 
Input: 1 -> 2 -> 3 -> 4
Output: 2 -> 1 -> 4 -> 3
Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

Approach 1: Recursion
Time complexity: O(n)
Space complexity: O(n)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode second = head.next;
        head.next = swapPairs(second.next);
        second.next = head;
        return second;
    }
}

Approach 2: Iterative 
Use two variables to track the previous and next node of each pair.
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode tail = dummy;
        while (head != null && head.next != null) {
            ListNode cur = head.next;
            tail.next = cur;
            head.next = cur.next;
            cur.next = head;
            tail = head;
            head = head.next;
        }
        return dummy.next;
    }
}
