You are given the head of a linked list, and an integer k.
Return the head of the linked list after swapping the values of the kth node from the beginning and the kth node from the end (the list is 1-indexed).
Example 1:
Input: head = [1 -> 2 -> 3 -> 4 -> 5], k = 2
Output: [1 -> 4 -> 3 -> 2 -> 5]

Example 2:
Input: head = [7 -> 9 -> 6 -> 6 -> 7 -> 8 -> 3 -> 0 -> 9 -> 5], k = 5
Output: [7 -> 9 -> 6 -> 6 -> 8 -> 7 -> 3 -> 0 -> 9 -> 5]

Approach 1: Three Pass
Time complexity: O(n)
Space complexity: O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapNodes(ListNode head, int k) {
        int len = 0;
        ListNode cur = head;
        while (cur != null) {
            len++;
            cur = cur.next;
        }
        ListNode frontNode = head, endNode = head;
        for (int i = 1; i < k; i++) {
            frontNode = frontNode.next;
        }
        for (int i = 0; i < len - k; i++) {
            endNode = endNode.next;
        }
        int temp = frontNode.val;
        frontNode.val = endNode.val;
        endNode.val = temp;
        return head;
    }
}

Approach 2: Two Pass
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public ListNode swapNodes(ListNode head, int k) {
        int len = 0;
        ListNode cur = head, frontNode = null;
        while (cur != null) {
            len++;
            if (len == k) {
                frontNode = cur;
            }
            cur = cur.next;
        }
        ListNode endNode = head;
        for (int i = 0; i < len - k; i++) {
            endNode = endNode.next;
        }
        int temp = frontNode.val;
        frontNode.val = endNode.val;
        endNode.val = temp;
        return head;
    }
}

Approach 3: One Pass
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public ListNode swapNodes(ListNode head, int k) {
        int len = 0;
        // front and end pointers will be used to track the kth node from the start and end of the linked list, respectively.
        ListNode cur = head, frontNode = null, endNode = null;
        while (cur != null) {
            len++;
            if (endNode != null) {          // means the kth node from the beginning has been found,
                endNode = endNode.next;     // we can start moving the end pointer to find the kth node from the end.
            }
            if (len == k) {                 // if the count has become equal to k,
                frontNode = cur;            // it means the curr is pointing the kth node at the begining of the linked list.
                endNode = head;
            }
            cur = cur.next;
        }
        int temp = frontNode.val;           // swap the values of two nodes.
        frontNode.val = endNode.val;
        endNode.val = temp;
        return head;
    }
}
