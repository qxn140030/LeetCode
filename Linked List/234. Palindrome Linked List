Question: Given the head of a singly linked list, return true if it is a palindrome.
Follow up:
Could you do it in O(n) time and O(1) space?

Approach 1: Copy into array list and then use two pointer technique
Time complexity: O(n)
Spacecomplexity: O(n)

class Solution {
    public boolean isPalindrome(ListNode head) {
        List<Integer> vals = new ArrayList<>();
        // Convert LinkedList into ArrayList.
        ListNode currentNode = head;
        while (currentNode != null) {
            vals.add(currentNode.val);
            currentNode = currentNode.next;
        }
        // Use two-pointer technique to check for palindrome.
        ...
    }
}

Approach 2: Recursive
Time complexity: O(n), the recursive function is run once for each of the n nodes, and the body of the recursive function is O(1).
Spacecomplexity: O(n), the space usage is on the runtime stack.

class Solution {
    private ListNode frontPointer;
    public boolean isPalindrome(ListNode head) {
        frontPointer = head;
        return recursivelyCheck(head);
    }
    private boolean recursivelyCheck(ListNode current) {
        if (current != null) {
            if (!recursivelyCheck(current.next)) {
                return false;
            }
            if (current.val != frontPointer.val) {
                return false;
            }
            frontPointer = frontPointer.next;
        }
        return true;
    }
}

Approach 3: Reverse second half in-place
The only way we can avoid using extra space is by modifying the input in-place.
The downside of this approach is that in a concurrent environment, access to the Linked List by other threads or processes would hve to be locked.
Time complexity: O(n)
Spacecomplexity: O(1)

class Solution {
    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null) {
            return true;
        }
        // Find the end of first half and reverse second half.
        ListNode firstHalfEnd = endOfFirstHalf(head);
        ListNode secondHalfStart = reverseList(firstHalfEnd.next);
        
        // Check whether or not there is a palindrome.
        ListNode p1 = head;
        ListNode p2 = secondHalfStart;
        boolean result = true;
        while (result && p2 != null) {
            if (p1.val != p2.val) {
                result = false;
            }
            p1 = p1.next;
            p2 = p2.next;
        }        
        // Restore the list and return the result.
        firstHalfEnd.next = reverseList(secondHalfStart);
        return result;
    }
    private ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        while (curr != null) {
            ListNode nextTemp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextTemp;
        }
        return prev;
    }
    private ListNode endOfFirstHalf(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while (fast.next != null && fast.next.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
}
