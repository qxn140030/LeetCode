Given head, the head of a linked list, determine if the linked list has a cycle in it.
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.
Return true if there is a cycle in the linked list. Otherwise, return false.
Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

Example 2:
Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.

Example 3:
Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.

Follow up: 
Can you solve it using O(1) (i.e. constant) memory?

Approach 1: Hash Table
check whether a node had been visited before. record each node's reference (or memory address) in a hash table.
Time complexity: O(n). visit each of the n elements in the list at most once. Adding a node to the hash table costs O(1) time.
Space complexity: O(n)

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        Set<ListNode> visited = new HashSet<>();
        while (head != null) {
            if (visited.contains(head)) {
                return true;
            } 
            visited.add(head);
            head = head.next;
        }
        return false;
    }
}

Approach 2: Floyd's cycle finding algorithm
slow pointer moves one step at a time while the fast pointer moves two steps at a time. when both pointers are in the cycle, 
it takes (distance between the 2 runners) / (difference of speed) loops for the fast runner to catch up with the slow runner. 
time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (fast == slow) {
                return true;
            }
        }
        return false;
    }
}
