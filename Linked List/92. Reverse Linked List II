Question: Given the head of a singly linked list and two integers left and right where left <= right,
reverse the node of the list from position left to right, and return the reversed list. 
For example: 
Given 1->2->3->4->5->NULL, left = 2 and right = 4, return 1->4->3->2->5->NULL.
Follow up:
Do it in-place and in one-pass.

Time complexity: O(n). Space complexity: O(1).
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        head = dummy;
        for (int i = 1; i < m; i++) {
            head = head.next;              
        }
        ListNode mNode = head.next;
        ListNode nNode = mNode;
        ListNode postN = nNode.next;
        for (int i = m; i < n; i++) {
            ListNode tmp = postN.next;
            postN.next = nNode;
            nNode = postN;
            postN = tmp;
        }
        head.next = nNode;
        mNode.next = postN;
        return dummy.next;
    }
}
