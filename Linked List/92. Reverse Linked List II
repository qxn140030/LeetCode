Given the head of a singly linked list and two integers left and right where left <= right,
reverse the node of the list from position left to right, and return the reversed list. 
Example: 
Input: 1 -> 2 -> 3 -> 4 -> 5, left = 2 and right = 4
Output: 1 -> 4 -> 3 -> 2 -> 5
Follow up:
Can you do it in one pass?

Approach 1: Recursion
two pointers at the left-th and right-th node from the beginning. Once we have such pointers in place, we can recursively reverse nodes between them.
we don't have any backward pointers, so we rely on recursion to simulate the backward pointer.
Time complexity: O(n), process all the nodes at most twice.
Space complexity: O(n), in the worst case we have to reverse the entire list. space occupied by the recursion stack.

class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode leftPre = dummy;
        for (int i = 1; i < left; i++) {
            leftPre = leftPre.next;
        }
        ListNode leftNode = leftPre.next, rightNode = leftNode;
        int diff = right - left;
        for (int i = 0; i < diff; i++) {
            rightNode = rightNode.next;
        }
        ListNode rightAfter = rightNode.next;
        ListNode node = reverse(leftNode);
        ListNode reversedTail = leftPre.next;
        leftPre.next = node;
        reversedTail.next = rightAfter;
        return dummy.next;
    }
    private ListNode reverse(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode node = reverse(head.next);
        head.next.next = head;
        head.next = null;
        return node;
    }
}

Approach 2: Iterative Link Reversal
Time complexity: O(n)
Space complexity: O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode tail = dummy;
        for (int i = 1; i < left; i++) {
            tail = tail.next;
        }
        ListNode pre = tail.next, cur = pre.next, after = null;
        int diff = right - left;
        for (int i = 0; i < diff; i++) {
            after = cur.next;
            cur.next = pre;
            pre = cur;
            cur = after; 
        }
        tail.next.next = cur;
        tail.next = pre;
        return dummy.next;
    }
}
