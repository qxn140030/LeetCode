Question: Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.

Approach: Fast and slow pointer
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}
