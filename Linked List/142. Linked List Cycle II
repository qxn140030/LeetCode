Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
Note: Do not modify the linked list.
Follow up: Can you solve it without using extra space?

Approach 1: Hash Table
Time complexity: O(n)
Space complexity: O(n)

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        Set<ListNode> hs = new HashSet<>();
        while (head != null) {
            if (hs.contains(head)) {
                return head;
            }
            hs.add(head);
            head = head.next;
        }
        return null;
    }
}

Approach 2: Floyd's Tortoise and Hare
phase 1 determines whether a cycle is present in the list, hare and tortoise will eventually both point to the same node - the intersection.
phase 2 proceeds to find the node that is the entrance to the cycle. 
initialize two pointers p1 points to the head, p2 points to the intersection, advance them by 1 until they meet - the entrance to the cycle.
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) {
                slow = head;
                while (slow != slow) {
                    slow = slow.next;
                    fast = fast.next;
                }
                return slow;
            }
        }
        return null;
    }
}
