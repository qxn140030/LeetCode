Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.
Do not modify the linked list.
Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.

Example 2:
Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.

Example 3:
Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.

Follow up: 
Can you solve it using O(1) (i.e. constant) memory?

Approach 1: Hash Table
Time complexity: O(n)
Space complexity: O(n)

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        Set<ListNode> hs = new HashSet<>();
        while (head != null) {
            if (hs.contains(head)) {
                return head;
            }
            hs.add(head);
            head = head.next;
        }
        return null;
    }
}

Approach 2: Floyd's Tortoise and Hare
phase 1 determines whether a cycle is present in the list, hare and tortoise will eventually both point to the same node - the intersection.
phase 2 proceeds to find the node that is the entrance to the cycle. 
initialize two pointers p1 points to the head, p2 points to the intersection, advance them by 1 until they meet - the entrance to the cycle.
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) {
                slow = head;
                while (slow != slow) {
                    slow = slow.next;
                    fast = fast.next;
                }
                return slow;
            }
        }
        return null;
    }
}
