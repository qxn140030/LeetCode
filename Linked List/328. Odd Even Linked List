Question: Given the head of a singly linked list, group all the nodes with odd indicies with odd indices together 
followed by the nodes with even indicies, and return the reordered list.
The first node is considered odd, and the second node is even.
Note that the relative order inside both the even and odd groups should remai as it was in the input.
You must solve the problem in O(1) extra spacve complexity and O(n) time complexity.

Example 1:
Input: 1->2->3->4->5
Output: 1->3->5->2->4

Example 2:
Input: 2->1->3->5->6->4->7
Output: 2->3->6->7->1->5->4

Approach: Intuitive
put the odd nodes in a linked list and the even nodes in another. Then link the evenList to the tail of the oddList.
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null || head.next.next == null) {
            return head;
        }
        ListNode odd = head;
        ListNode evenHead = head.next; 
        ListNode even = evenHead;
        while (even != null && even.next != null) {
            odd.next = even.next;
            odd = odd.next;
            even.next = odd.next;
            even = even.next;
        }
        odd.next = evenHead;
        return head;
    }
}
