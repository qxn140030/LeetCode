Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.
You may not alter the values in the nodes, only nodes itself may be changed.
Only constant memory is allowed.
For example,
Given this linked list: 1 -> 2 -> 3 -> 4 -> 5
For k = 2, you should return: 2 -> 1 -> 4 -> 3 -> 5
For k = 3, you should return: 3 -> 2 -> 1 -> 4 -> 5

Follow up:
Can you solve the problem in O(1) extra memory space?

Approach 1: Recursion
A Linked list is a recursive structure. A sub-list in itself is a linked list.
Time complexity: O(n), since we process each node exactly twice. 
Once when we are counting the number of nodes in each recursive call, and then once when we are actually reversing the sub-list. 
Space complexity: O(n/k), used up by the recursion stack. In every recursive call, we process k nodes and then make a recursive call to process the rest.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        int count = 0;
        ListNode cur = head;
        while (count < k && cur != null) {
            cur = cur.next;
            count++;
        }
        if (count < k) {
            return head;
        }
        ListNode reversedHead = reverse(head, k); 
        head.next = reverseKGroup(cur, k);
        return reversedHead;
    }
    private ListNode reverse(ListNode head, int k) {
        ListNode cur = head, newHead = null;
        while (k-- > 0) {    
            ListNode next = cur.next;
            cur.next = newHead;
            newHead = cur;
            cur = next;
        }     
        return newHead;
    }
}

Approach 2: Iterative 
Time complexity: O(n) 
Space complexity: O(1)

public class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || head.next == null || k < 2) {
            return head;
        }
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        head = dummy;
        while (head.next != null) {
            head = reverse(head, k);
        }
        return dummy.next;
    }
    private ListNode reverse(ListNode head, int k) {
        ListNode node = head;
        for (int i = 0; i < k; i++) {
            if (node.next == null) {
                return node;
            }
            node = node.next;
        }
        ListNode pre = head, cur = head.next, n1 = head.next;
        for (int i = 0; i < k; i++) {
            ListNode tmp = cur.next;
            cur.next = pre;
            pre = cur;
            cur = tmp;
        }
        n1.next = cur;
        head.next = pre;
        return n1;
    }
}
