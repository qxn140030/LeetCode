Given the head of a linked list, remove the nth node from the end of list and return its head.
1 -> 2 -> 3 -> 4 -> 5, n = 2
1 -> 2 -> 3 ------> 5
Follow up:
Could you do this in one pass?

Approach 1: Two passes
Calculate the length first, and then remove the (len - n + 1)th from the beginning.
Time complexity: O(n)
Space complexity: O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode cur = head;
        int len = 0;
        while (cur != null) {
            len++;
            cur = cur.next;
        }
        len -= n;
        cur = dummy;
        while (len-- > 0) {
            cur = cur.next;
        }
        cur.next = cur.next.next;
        return dummy.next;
    }
}

Approach 2: One pass
two pointers, the fast pointer is n steps ahead of the slow pointer. 
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode fast = dummy, slow = dummy;
        for (int i = 0; i < n; i++) {
            fast = fast.next;
        }
        while (fast.next != null) {
            slow = slow.next;
            fast = fast.next;
        }
        slow.next = slow.next.next;
        return dummy.next;
    }
}
