You are given the head of a linked list, which contains a series of integers separated by 0's. 
The beginning and end of the linked list will have Node.val == 0.
For every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. 
The modified list should not contain any 0's.
Return the head of the modified linked list.
Example 1:
Input: head = [0 -> 3 -> 1 -> 0 -> 4 -> 5 -> 2 -> 0], Output: [4 -> 11]

Approach 1: Recursive
Time complexity: O(n)
Space complexity: O(n)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeNodes(ListNode head) {
        if (head == null) {
            return null;
        } 
        if (head.next.val == 0) {
            ListNode node = new ListNode(head.val);
            node.next = mergeNodes(head.next.next);
            return node;
        }
        ListNode next = mergeNodes(head.next);
        next.val += head.val;
        return next;
    }
}

Approach 2: Iterative
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public ListNode mergeNodes(ListNode head) {
        ListNode cur = head.next;
        while (cur != null) {
            ListNode node = cur;
            int sum = 0;
            while (node.val != 0) {
                sum += node.val;
                node = node.next;
            }
            cur.val = sum;
            cur.next = node.next;
            cur = node.next;
        }
        return head.next;
    }
}
