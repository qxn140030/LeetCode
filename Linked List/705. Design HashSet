Design a HashSet without using any built-in hash table libraries.
Implement MyHashSet class:
* void add(key) Inserts the value key into the HashSet.
* bool contains(key) Returns whether the value key exists in the HashSet or not.
* void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.
Example 1:
Input
["MyHashSet", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"]
[[], [1], [2], [1], [3], [2], [2], [2], [2]]
Output
[null, null, null, true, false, null, true, null, false]

Explanation
MyHashSet myHashSet = new MyHashSet();
myHashSet.add(1);      // set = [1]
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(1); // return True
myHashSet.contains(3); // return False, (not found)
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(2); // return True
myHashSet.remove(2);   // set = [1]
myHashSet.contains(2); // return False, (already removed)

Approach 1: ArrayList

class MyHashSet {
    List<Integer> list;
    public MyHashSet() {
        list = new ArrayList<>();
    }
    public void add(int key) {
        if (!contains(key)) {
            list.add(key);
        }
    }
    public void remove(int key) {
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i) == key) {
                list.remove(i);
                return;
            }
        }
    }
    public boolean contains(int key) {
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i) == key) {
                return true;
            }
        }
        return false;
    }
}

Approach 2: Linked List

class ListNode {
    int val;
    ListNode next;
    public ListNode(int val) {
        this.val = val;
    }
}
class MyHashSet {
    ListNode head;
    int size;
    public MyHashSet() {
        head = new ListNode(0);
        size = 0;
    }
    public void add(int key) {
        if (contains(key)) {
            return;
        }
        ListNode node = new ListNode(key);
        if (size == 0) {
            head.next = node;
        } else {
            node.next = head.next;
            head.next = node;
        }
        size++;
    } 
    public void remove(int key) {
        ListNode cur = head;
        while (cur.next != null) {
            if (cur.next.val == key) {
                cur.next = cur.next.next;
                size--;
                break;
            } 
            cur = cur.next;
        }
    } 
    public boolean contains(int key) {
        ListNode cur = head;
        while (cur.next != null) {
            if (cur.next.val == key) {
                return true;
            } 
            cur = cur.next;
        }
        return false;
    }
}
/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.add(key);
 * obj.remove(key);
 * boolean param_3 = obj.contains(key);
 */
