Given a Circular Linked List node, which is sorted in non-descending order, write a function to insert a value insertVal into the list 
such that it remains a sorted circular list. 
The given node can be a reference to any single node in the list and may not necessarily be the smallest value in the circular list.
If there are multiple suitable places for insertion, you may choose any place to insert the new value. 
After the insertion, the circular list should remain sorted.
If the list is empty (i.e., the given node is null), you should create a new single circular list and return the reference to that single node. 
Otherwise, you should return the originally given node.
Example 1:
Input: head = [3,4,1], insertVal = 2
Output: [3,4,1,2]

Example 2:
Input: head = [], insertVal = 1
Output: [1]
Explanation: The list is empty (given head is null). We create a new single circular list and return the reference to that single node.

Example 3:
Input: head = [1], insertVal = 0
Output: [1,0]

Approach 1: One Pass Traverse
Time complexity: O(n)
Space complexity: O(n)

/*
// Definition for a Node.
class Node {
    public int val;
    public Node next;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _next) {
        val = _val;
        next = _next;
    }
};
*/
class Solution {
    public Node insert(Node head, int insertVal) {
        Node node = new Node(insertVal);
        if (head == null) {
            node.next = node;
            return node;
        }
        Node cur = head;
        while (true) {
            if (cur.val < cur.next.val) {                                  // case 1: has a tipping point, still climbing
                if (cur.val <= insertVal && insertVal <= cur.next.val) {   // insert value is between cur and next
                    break;
                }
            } else if (cur.val > cur.next.val) {                           // case 2: has a tipping point, about to return back to min node
                if (cur.val <= insertVal || insertVal <= cur.next.val) {   // cur is the tipping point, insert value is max or min val
                    break;
                }
            }
            if (cur.next == head) {                                        // case 3: NO tipping point, all flat, e.g. 3,3,3...
                break;                                                     // insert to the tail
            } 
            cur = cur.next;
        }
        node.next = cur.next;
        cur.next = node;
        return head;
    }
}
