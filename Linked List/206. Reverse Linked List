Given the head of a singly linked list, reverse and return the list.
Follow up: 
A linked list can be reversed either iteratively or recursively. Could you implement both?

Approach 1: Iterative 
Time complexity: O(n)
Space complexity: O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public ListNode reverseList(ListNode head) {
    ListNode last = null;
    while (head != null) {
        ListNode tmp = head.next;
        head.next = last;
        last = head;
        head = tmp;
    }
    return last;
}

Approach 2: Recursive
Time complexity: O(n). Assume that n is the list's length.
Space complexity: O(n). The extra space comes from implicit stack space due to recursion. The recursion could go up to n levels deep.

class Solution {
    public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode last = reverseList(head.next);
        head.next.next = head;
        head.next = null;
        return last;
    }
}
