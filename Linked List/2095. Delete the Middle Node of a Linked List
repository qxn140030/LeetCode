You are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.
The middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing, 
where ⌊x⌋ denotes the largest integer less than or equal to x.
Example 1:
Input: head = [1 -> 3 -> 4 -> 7 -> 1 -> 2 -> 6]
Output: [1 -> 3 -> 4 -> 1 -> 2 -> 6]

Example 2:
Input: head = [1 -> 2 -> 3 -> 4]
Output: [1 -> 2 -> 4]

Approach 1: Two Pass
Time complexity: O(n)
Space complexity: O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteMiddle(ListNode head) {
        if (head.next == null) {
            return null;
        }
        int len = 0;
        ListNode cur = head;
        while (cur != null) {
            len++;
            cur = cur.next;
        }
        cur = head;
        int idx = len / 2 - 1;
        while (idx-- > 0) {
            cur = cur.next;
        }
        cur.next = cur.next.next;
        return head;
    }
}

Approach 2: One Pass
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public ListNode deleteMiddle(ListNode head) {
        if (head.next == null) {
            return null;
        }
        ListNode slow = head, fast = head.next.next;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        slow.next = slow.next.next;
        return head;
    }
}
