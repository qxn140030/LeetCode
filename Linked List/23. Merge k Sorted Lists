You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.
Merge all the linked-lists into one sorted linked-list and return it.
Example 1:
Input: lists = [[1 -> 4 -> 5],[1 -> 3 -> 4],[2 -> 6]]
Output: [1 -> 1 -> 2 -> 3 -> 4 -> 4 -> 5 -> 6]

Example 2:
Input: lists = []
Output: []

Example 3:
Input: lists = [[]]
Output: []

Approach 1: Brute Force
Traverse all the linked lists and collect the values of the nodes into an array.
Sort and iterate over this array to get the proper value of nodes.
Create a new sorted linked list and extend it with the new nodes.
Time complexity: O(nlogn), where n is the total number of nodes.
Space complexity: O(n)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ArrayList<Integer> arr = new ArrayList<>();
        for (ListNode list : lists) {
            while (list != null) {
                arr.add(list.val);
                list = list.next;
            }
        }
        Collections.sort(arr);
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        for (int i : arr) {
            tail.next = new ListNode(i);
            tail = tail.next;
        }
        return dummy.next;
    }
}

Approach 2: Compare one by one
Time complexity: O(k * n), where n is the total number of nodes.
Space complexity: O(1)

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        while (true) {
            boolean flag = true;
            int min = Integer.MAX_VALUE, minIdx = 0;
            for (int i = 0; i < lists.length; i++) {
                if (lists[i] != null) {
                    if (lists[i].val < min) {
                        min = lists[i].val;
                        minIdx = i;
                    }
                    flag = false;
                }  
            }
            if (flag) {
                break;
            }
            tail.next = lists[minIdx];
            tail = tail.next;
            lists[minIdx] = lists[minIdx].next;
        } 
        return dummy.next;
    }
}

Approach 3: Using Priority Queue
Time complexity: O(nlogk), where n is the total number of nodes.
Space complexity: O(k)

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<ListNode> queue = new PriorityQueue<>((a, b) -> (a.val - b.val)); 
        // Queue<ListNode> queue = new PriorityQueue<ListNode>(new Comparator<ListNode>() {
        //    @Override
        //    public int compare(ListNode l1, ListNode l2) {
        //        return l1.val - l2.val;
        //    }
        // });
        ListNode dummy = new ListNode(0), tail = dummy;
        for (ListNode node : lists) {
            if (node != null) {
                queue.add(node);
            }
        }
        while (!queue.isEmpty()) {
            tail.next = queue.poll();
            tail = tail.next;
            if (tail.next != null) {
                queue.add(tail.next);
            }
        } 
        return dummy.next;
    }
}

Approach 4: Merge lists one by one
Time complexity: O(k * n), where n is the total number of nodes.
Space complexity: O(logk) -> O(1)

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode head = null;
        for (int i = 0; i < lists.length; i++) {
            head = merge(head, lists[i]);
        }
        return head;
    }
    private ListNode merge(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        if (l2 == null) {
            return l1;
        }
        if (l1.val < l2.val) {
            l1.next = merge(l1.next, l2);
            return l1;
        }
        l2.next = merge(l1, l2.next);
        return l2;
    }
}

Approach 5: Merge with Divide and Conquer (Recursion)
Time complexity: O(nlogk), where n is the total number of nodes.
Space complexity: O(logk)

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        return mergeK(lists, 0, lists.length - 1);
    }
    private ListNode mergeK(ListNode[] lists, int i, int j) {
        if (i > j) {
            return null;
        }
        if (i == j) {
            return lists[i];
        }
        int mid = i + (j - i) / 2;
        ListNode left = mergeK(lists, i, mid);
        ListNode right = mergeK(lists, mid + 1, j);
        return mergeTwo(left, right);
    }
    private ListNode mergeTwo(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        if (l2 == null) {
            return l1;
        }
        if (l1.val < l2.val) {
            l1.next = mergeTwo(l1.next, l2);
            return l1;
        }
        l2.next = mergeTwo(l1, l2.next);
        return l2;
    }
}

Approach 6: Merge with Divide and Conquer (Iteration)
Time complexity: O(nlogk), where n is the total number of nodes.
Space complexity: O(logk) -> O(1)

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) {
            return null;
        }
        int interval = 1;
        while (interval < lists.length) {
            for (int i = 0; i + interval < lists.length; i += interval * 2) {
                lists[i] = mergeTwo(lists[i], lists[i + interval]);
            }
            interval *= 2;
        }
        return lists[0];
    }
    private ListNode mergeTwo(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        if (l2 == null) {
            return l1;
        }
        if (l1.val < l2.val) {
            l1.next = mergeTwo(l1.next, l2);
            return l1;
        }
        l2.next = mergeTwo(l1, l2.next);
        return l2;
    }
}
