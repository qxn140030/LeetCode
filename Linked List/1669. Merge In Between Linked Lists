You are given two linked lists: list1 and list2 of sizes n and m respectively.
Remove list1's nodes from the ath node to the bth node, and put list2 in their place.
Example:
Input: list1 = [0 -> 1 -> 2 -> 3 -> 4 -> 5 -> 6], a = 2, b = 5, list2 = [1000000 -> 1000001 -> 1000002 -> 1000003 -> 1000004]
Output: [0 -> 1 -> 1000000 -> 1000001 -> 1000002 -> 1000003 -> 1000004 -> 6]

Approach: One Pass Iteration
Time complexity: O(n)
Space complexity: O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeInBetween(ListNode list1, int a, int b, ListNode list2) {
        ListNode first = list1;
        for (int i = 1; i < a; i++) {
            first = first.next;
        }
        ListNode second = first.next;
        for (int i = a; i <= b; i++) {
            second = second.next;
        }
        first.next = list2;
        ListNode tail = first;
        while (tail.next != null) {
            tail = tail.next;
        }
        tail.next = second;
        return list1;
    }
}
