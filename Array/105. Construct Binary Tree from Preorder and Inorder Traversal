Given preorder and inorder traversal of a tree, construct the binary tree.
Note: You may assume that duplicates do not exist in the tree.

Approach 1: Recursion
Time complexity: O(n)
Space complexity: O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return helper(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1);
    }
    private TreeNode helper(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd) {
        if (preStart > preEnd) {
            return null;
        }
        TreeNode root = new TreeNode(preorder[preStart]);
        int index = find(inorder, inStart, inEnd, root.val);
        root.left = helper(preorder, preStart + 1, index - inStart + preStart, inorder, inStart, index - 1);
        root.right = helper(preorder, index - inStart + preStart + 1, preEnd, inorder, index + 1, inEnd);
        return root;
    }
    private int find(int[] nums, int start, int end, int target) {
        for (int i = start; i <= end; i++) {
            if (target == nums[i]) {
                return i;
            }
        }
        return -1;
    }
}


int index = 0;                                                  // preorder index.
Map<Integer, Integer> map = new HashMap<>();                    // inorder index map.
public TreeNode buildTree(int[] preorder, int[] inorder) {
    for (int i = 0; i < inorder.length; i++) {
        map.put(inorder[i], i);
    }
    return arrayToTree(preorder, 0, preorder.length - 1);
}
TreeNode arrayToTree(int[] preorder, int left, int right) {
    if (left > right) {
        return null;
    }
    int rootValue = preorder[index++];
    TreeNode root = new TreeNode(rootValue);
    root.left = arrayToTree(preorder, left, map.get(rootValue) - 1);
    root.right = arrayToTree(preorder, map.get(rootValue) + 1, right);
    return root;
}
