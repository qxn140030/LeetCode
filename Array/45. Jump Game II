You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].
Each element nums[i] represents the maximum length of a forward jump from index i. 
In other words, if you are at nums[i], you can jump to any nums[i + j] where:
0 <= j <= nums[i] and i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].
Example 1:
Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:
Input: nums = [2,3,0,1,4]
Output: 2

Approach 1: DP
Time complexity: O(n^2)
Space complexity: O(n)

public class Solution {
    public int jump(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];
        for (int i = 1; i < n; i++) {
            dp[i] = Integer.MAX_VALUE;
            for (int j = 0; j < i; j++) {
                if (dp[j] < Integer.MAX_VALUE && nums[j] + j >= i) {
                    dp[i] = Math.min(dp[i], dp[j] + 1);
                }
            }
        }
        return dp[n - 1];
    }
}

Approach 2: Greedy
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public int jump(int[] nums) {
        if (nums == null || nums.length < 2) {
            return 0;
        }
        int steps = 1, start = 0, furthest = nums[0], end = furthest;
        while (furthest < nums.length - 1) {
            steps++;
            for (int i = start; i <= end; i++) {
                if (nums[i] + i > furthest) {
                    furthest = nums[i] + i;
                }
            }
            start = end + 1;
            end = furthest;
        }
        return steps;
    }
}
