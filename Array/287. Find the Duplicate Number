Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

Follow up:
- How can we prove that at least one duplicate number must exist in nums?
- Can you solve the problem in linear runtime complexity?

Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Example 2:
Input: nums = [3,1,3,4,2]
Output: 3

Approach 1: Sorting
Time complexity: O(nlogn)
Space complexity: O(logn) or O(n)
In Java, Arrays.sort() for primitives is implemented using a variant of the Quick Sort algorithm, which has a space complexity of O(log‚Å°n)

class Solution {
    public int findDuplicate(int[] nums) {
        Arrays.sort(nums);
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                return nums[i];
            }
        }
        return -1;
    }
}

Approach 2: Hash Table
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int findDuplicate(int[] nums) {
        Set<Integer> seen = new HashSet<>();
        for (int num : nums) {
            if (seen.contains(num)) {
                return num;
            }
            seen.add(num);
        }
        return -1;
    }
}

Approach 3: Negative Marking
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int findDuplicate(int[] nums) {
        int duplicate = -1;
        for (int i = 0; i < nums.length; i++) {
            int cur = Math.abs(nums[i]);
            if (nums[cur] < 0) {
                duplicate = cur;
                break;
            }
            nums[cur] *= -1;
        }
        // Restore numbers
        for (int i = 0; i < nums.length; i++) {
            nums[i] = Math.abs(nums[i]);
        }
        return duplicate;
    }
}

Approach 4.1: Array as HashMap (Recursion)
Use the Array as a HashMap -- map each number to its equivalent index in the array.
Since there are n + 1 positions/indexes in the input array, and the numbers range from 1 to n, 
at least one index will have more than one number (due to the pigeonhole principle).
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int findDuplicate(int[] nums) {
        return store(nums, 0);
    }
    private int store(int[] nums, int cur) {
        if (cur == nums[cur]) {
            return cur;
        }     
        int next = nums[cur];
        nums[cur] = cur;
        return store(nums, next);        
    }
}

Approach 4.2: Array as HashMap (Iterative)
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int findDuplicate(int[] nums) {
        while (nums[0] != nums[nums[0]]) {
            int next = nums[nums[0]];
            nums[nums[0]] = nums[0];
            nums[0] = next;
        }
        return nums[0];      
    }
}

Approach 5: Binary Search
we need to find the smallest number such that the count of numbers less than or equal to it is greater than the number itself.
Time complexity: O(nlogn)
Space complexity: O(1)

class Solution {
    public int findDuplicate(int[] nums) {
        int low = 1, high = nums.length - 1;     // 'low' and 'high' represent the range of values of the target  
        int duplicate = -1;
        while (low <= high) {
            int cur = (low + high) / 2;
            int count = 0;
            for (int num : nums) {
                if (num <= cur) {
                    count++;
                }
            } 
            if (count > cur) {
                duplicate = cur;
                high = cur - 1;
            } else {
                low = cur + 1;
            }
        }
        return duplicate;     
    }
}

Approach 6: Sum of Set Bits
Time complexity: O(nlogn)
Space complexity: O(1)

class Solution {
    public int findDuplicate(int[] nums) {
        int duplicate = 0, n = nums.length - 1;
        int max_num = findMaxNum(nums);
        int max_bit = calcMaxBit(max_num); 
        // Iterate over each bit        
        for (int bit = 0; bit < max_bit; bit++) {
            int mask = (1 << bit);
            int base_count = 0, nums_count = 0;
            for (int i = 0; i <= n; i++) {
                // If bit is set in number (i) then add 1 to base_count                
                if ((i & mask) > 0) {
                    base_count++;
                }
                // If bit is set in nums[i] then add 1 to nums_count
                if ((nums[i] & mask) > 0) {
                    nums_count++;
                }
            }
            // If the current bit is more frequently set in nums than it is in 
            // the range [1, 2, ..., n] then it must also be set in the duplicate number
            if (nums_count > base_count) {
                duplicate |= mask;
            }
        }
        return duplicate;  
    }
    // Find the position of the Most Significant Bit in num    
    private int calcMaxBit(int num) {
        int bits = 0;
        while (num > 0) {
            num /= 2;
            bits++;
        }
        return bits;
    }
    // Find the largest number in nums
    private int findMaxNum(int[] nums) {
        int max_num = 0;
        for (int i = 0; i < nums.length; i++) {
            max_num = Math.max(max_num, nums[i]);
        }
        return max_num;
    }
}

Approach 7: Floyd's Tortoise and Hare (Cycle Detection)
The idea is to reduce the problem to linked list cycle. Each new element in the sequence is an element in nums at the index of the previous element.
The cycle appears because nums contains duplicates. The duplicate node is a cycle entrance.
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int findDuplicate(int[] nums) {
        int fast = nums[0], slow = nums[0];
        while (true) {
            slow = nums[slow];
            fast = nums[nums[fast]];
            if (slow == fast) {
                break;
            }
        }
        slow = nums[0];
        while (slow != fast) {
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;  
    }
}
