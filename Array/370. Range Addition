Assume you have an array of length n initialized with all 0's and are given k update operations.
Each operation is represented as a triplet: [startIndex, endIndex, inc] which increments each element of subarray
A[startIndex ... endIndex] (startIndex and endIndex inclusive) with inc.
Return the modified array after all k operations were executed.
Example:
Given:
    length = 5,
    updates = [
        [1,  3,  2],
        [2,  4,  3],
        [0,  2, -2]
    ]
Output: [-2, 0, 3, 5, 3]
Explanation:
Initial state:
[ 0, 0, 0, 0, 0 ]
After applying operation [1, 3, 2]:
[ 0, 2, 2, 2, 0 ]
After applying operation [2, 4, 3]:
[ 0, 2, 5, 5, 3 ]
After applying operation [0, 2, -2]:
[-2, 0, 3, 5, 3 ]
Hint:
Thinking of using advanced data structures? You are thinking it too complicated.
For each update operation, do you really need to update all elements between i and j?
Update only the first and end element is sufficient.
The optimal time complexity is O(k + n) and uses O(1) extra space.

Approach 1: Brute Force
Time complexity: O(n * k), where k is the number of update queries, n is the length of the array.
Space complexity: O(1)

class Solution {
    public int[] getModifiedArray(int length, int[][] updates) {
        int[] rst = new int[length];
        for (int i = 0; i < updates.length; i++) {
            for (int j = updates[i][0]; j < length && j <= updates[i][1]; j++) {
                rst[j] += updates[i][2];
            }
        }
        return rst;
    }
}

Approach 2: Range Caching
Two steps:
1. for each update query on the array, we need to do two operations:
1.1. update start boundary of the range: arr[start] += val
1.2. update just beyond the end boundary of the range: arr[end] -= val
2. final transformation: the cumulative sum of the arr is arr[i] += arr[i - 1]
Time complexity: O(n + k)
Space complexity: O(1)

public class Solution {
    public int[] getModifiedArray(int length, int[][] updates) {
        int[] rst = new int[length];
        for (int i = 0; i < updates.length; i++) {
            int start = updates[i][0];
            int end = updates[i][1];
            int num = updates[i][2];
            rst[start] += num;
            if (end + 1 < length) {
                rst[end + 1] -= num;
            }
        }
        for (int i = 1; i < length; i++) {
            rst[i] += rst[i - 1];
        }
        return rst;
    }
}
