Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.
There may be duplicates in the original array.
Note: An array A rotated by x positions results in an array B of the same length such that A[i] == B[(i+x) % A.length], where % is the modulo operation.
Example 1:
Input: nums = [3,4,5,1,2]
Output: true
Explanation: [1,2,3,4,5] is the original sorted array.
You can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].

Example 2:
Input: nums = [2,1,3,4]
Output: false
Explanation: There is no sorted array once rotated that can make nums.

Example 3:
Input: nums = [1,2,3]
Output: true
Explanation: [1,2,3] is the original sorted array.
You can rotate the array by x = 0 positions (i.e. no rotation) to make nums.

Approach 1: Naive
Time complexity: O(n^2)
Space complexity: O(n)

class Solution {
    public boolean check(int[] nums) {
        int n = nums.length;
        int[] tmp = new int[n];
        for (int i = 0; i < n; i++) {
            tmp[i] = nums[i];
        }
        Arrays.sort(tmp);
        for (int i = 0; i < n; i++) {
            int j = 0;
            for (; j < n; j++) {
                if (tmp[j] != nums[(j + i) % n]) {
                    break;
                }
            }
            if (j == n) {
                return true;
            }
        }
        return false;
    }
}

Approach 2: 
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public boolean check(int[] nums) {
        int n = nums.length;
        boolean rotated = false;
        for (int i = 0; i < n; i++) {
            if (nums[i] == nums[(i + 1) % n]) {
                continue;
            } else if (nums[i] > nums[(i + 1) % n]) {
                if (rotated) {
                    return false;
                }
                rotated = true;
            } 
        }
        return true;
    }
}
