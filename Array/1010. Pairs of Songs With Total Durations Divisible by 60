You are given a list of songs where the ith song has a duration of time[i] seconds.
Return the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.
Example 1:
Input: time = [30,20,150,100,40]
Output: 3
Explanation: Three pairs have a total duration divisible by 60:
(time[0] = 30, time[2] = 150): total duration 180
(time[1] = 20, time[3] = 100): total duration 120
(time[1] = 20, time[4] = 40): total duration 60

Example 2:
Input: time = [60,60,60]
Output: 3
Explanation: All three pairs have a total duration of 120, which is divisible by 60.

Approach 1: Brute Force (TLE)
Time complexity: O(n^2)
Space complexity: O(1)

class Solution {
    public int numPairsDivisibleBy60(int[] time) {
        int n = time.length, cnt = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((time[i] + time[j]) % 60 == 0) {
                    cnt++;
                }
            }
        }
        return cnt;
    }
}

Approach 2: Use an Array to Store Frequencies
for each element a, we want to know the number of elements b such that:
1. b % 60 = 0, if a % 60 = 0
2. b % 60 = 60 − a % 60, if a % 60 ≠ 0
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int numPairsDivisibleBy60(int[] time) {
        int remainders[] = new int[60];
        int count = 0;
        for (int t: time) {
            if (t % 60 == 0) {                         // Case 1: check if a % 60 == 0 && b % 60 == 0.
                count += remainders[0];
            } else {                                   // Case 2: check if a % 60 + b % 60 == 60.
                count += remainders[60 - t % 60];
            }
            remainders[t % 60]++;                      // update the remainders.
        }
        return count;
    }
}
