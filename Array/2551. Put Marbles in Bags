You have k bags. You are given a 0-indexed integer array weights where weights[i] is the weight of the ith marble. You are also given the integer k.

Divide the marbles into the k bags according to the following rules:

No bag is empty.
If the ith marble and jth marble are in a bag, then all marbles with an index between the ith and jth indices should also be in that same bag.
If a bag consists of all the marbles with an index from i to j inclusively, then the cost of the bag is weights[i] + weights[j].
The score after distributing the marbles is the sum of the costs of all the k bags.

Return the difference between the maximum and minimum scores among marble distributions.

Example 1:
Input: weights = [1,3,5,1], k = 2
Output: 4
Explanation: 
The distribution [1],[3,5,1] results in the minimal score of (1+1) + (3+1) = 6. 
The distribution [1,3],[5,1], results in the maximal score of (1+3) + (5+1) = 10. 
Thus, we return their difference 10 - 6 = 4.

Example 2:
Input: weights = [1, 3], k = 2
Output: 0
Explanation: The only distribution possible is [1],[3]. 
Since both the maximal and minimal score are the same, we return 0.

Approach 1: Sorting and Greedy
Time complexity: O(nlogn)
Space complexity: O(n)

public long putMarbles(int[] weights, int k) {
    int n = weights.length;
    List<Integer> pairSums = new ArrayList<>();
    // Compute the cost of each cut (between i and i+1)
    for (int i = 0; i < n - 1; i++) {
        pairSums.add(weights[i] + weights[i + 1]);
    }
    // Sort the cut costs
    Collections.sort(pairSums);
    long minScore = 0, maxScore = 0;
    // Sum the smallest k-1 cuts for minScore
    for (int i = 0; i < k - 1; i++) {
        minScore += pairSums.get(i);
    }
    // Sum the largest k-1 cuts for maxScore
    for (int i = pairSums.size() - (k - 1); i < pairSums.size(); i++) {
        maxScore += pairSums.get(i);
    }
    return maxScore - minScore;
}
