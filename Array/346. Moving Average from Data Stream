Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.
For example,
MovingAverage m = new MovingAverage(3);
m.next(1) = 1
m.next(10) = (1 + 10) / 2
m.next(3) = (1 + 10 + 3) / 3
m.next(5) = (10 + 3 + 5) / 3

Approach 1:
Time complexity: O()
Space complexity: O()

public class MovingAverage {
    int size;
    Queue<Integer> q;
    double avg;
    /** Initialize your data structure here. */
    public MovingAverage(int size) {
        this.size = size;
        q = new LinkedList<>();
    }    
    public double next(int val) {
        if (q.size() < size) {
            q.offer(val);
            int sum = 0;
            for (int i : q) {
                sum += i;
            }
            avg = sum * 1.0 / q.size();
        } else {
            double minus = q.poll() * 1.0 / size;
            q.offer(val);
            double add = val * 1.0 / size;
            avg = avg - minus + add;
        }
        return avg;
    }
}
/**
 * Your MovingAverage object will be instantiated and called as such:
 * MovingAverage obj = new MovingAverage(size);
 * double param_1 = obj.next(val);
 */
