If the depth of a tree is smaller than 5, then this tree can be represented by an array of three-digit integers. For each integer in this array:
- The hundreds digit represents the depth d of this node where 1 <= d <= 4.
- The tens digit represents the position p of this node in the level it belongs to where 1 <= p <= 8. The position is the same as that in a full binary tree.
- The units digit represents the value v of this node where 0 <= v <= 9.
Given an array of ascending three-digit integers nums representing a binary tree with a depth smaller than 5, return the sum of all paths from the root towards the leaves.
It is guaranteed that the given array represents a valid connected binary tree.

Example 1:
           3
          / \
         5   1
Input: nums = [113,215,221]
Output: 12
Explanation: The tree that the list represents is shown.
The path sum is (3 + 5) + (3 + 1) = 12.

Example 2:
           3
            \
             1
Input: nums = [113,221]
Output: 4
Explanation: The tree that the list represents is shown. 
The path sum is (3 + 1) = 4.

Approach 1: Convert to Tree
Time Complexity: O(n), where n is the length of nums.
Space Complexity: O(n)

class Node {
    Node left, right;
    int val;
    public Node(int v) {
        val = v;
    }
}
class Solution {
    int ans = 0;
    public int pathSum(int[] nums) {
        Node root = new Node(nums[0] % 10);
        for (int i = 1; i < nums.length; i++) {
            int num = nums[i];
            int depth = num / 100, pos = num / 10 % 10, val = num % 10;
            pos--;
            Node cur = root;
            for (int d = depth - 2; d >= 0; d--) {
                if (pos < 1 << d) {
                    if (cur.left == null) {
                        cur.left = new Node(val);
                    }
                    cur = cur.left;
                } else {
                    if (cur.right == null) {
                        cur.right = new Node(val);
                    }
                    cur = cur.right;
                }
                pos %= 1 << d;
            }
        }
        dfs(root, 0);
        return ans;
    }
    private void dfs(Node node, int sum) {
        if (node == null) {
            return;
        }
        sum += node.val;
        if (node.left == null && node.right == null) {
            ans += sum;
        } else {
            dfs(node.left, sum);
            dfs(node.right, sum);
        }
    }
}

Approach 2: Direct Traversal
Time Complexity: O(n)
Space Complexity: O(n)

class Solution {
    int ans = 0;
    Map<Integer, Integer> values = new HashMap<>();
    public int pathSum(int[] nums) {
        for (int num: nums) {
            values.put(num / 10, num % 10);
        }
        dfs(nums[0] / 10, 0);
        return ans;
    }
    private void dfs(int node, int sum) {
        if (!values.containsKey(node)) {
            return;
        }
        sum += values.get(node);
        int depth = node / 10, pos = node % 10;
        int right = (depth + 1) * 10 + 2 * pos;
        int left = right - 1;
        if (!values.containsKey(left) && !values.containsKey(right)) {
            ans += sum;
        } else {
            dfs(left, sum);
            dfs(right, sum);
        }
    }
}
