Find the contiguous subarray within an array (containing at least one number) which has the largest product.
Example 1:
Input: nums = [2,3,-2,4]
Output: 6, [2,3] has the largest product 6.

Example 2:
Input: nums = [-2,0,-1]
Output: 0. The result cannot be 2, because [-2,-1] is not a subarray.

Approach 1: Brute Force
Time complexity: O(n^2)
Space complexity: O(1)

class Solution {
    public int maxProduct(int[] nums) {
        int rst = nums[0], n = nums.length;
        for (int i = 0; i < n; i++) {
            int accu = 1;
            for (int j = i; j < n; j++) {
                accu *= nums[j];
                rst = Math.max(rst, accu);
            }
        }
        return rst;
    }
}

Approach 2: DP
each element has two possibilities: positive or negative. 
We need to track a minimum value, so that when a negative number is given, it can also find the maximum value. 
We define two local variables, one tracks the maximum and the other tracks the minimum.
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public int maxProduct(int[] nums) {
        int localMin = nums[0], localMax = nums[0], global = nums[0];
        for (int i = 1; i < nums.length; i++) {
            int tmpMax = localMax;                                                            // Note.
            localMax = Math.max(Math.max(nums[i], nums[i] * localMax), nums[i] * localMin);
            localMin = Math.min(Math.min(nums[i], nums[i] * tmpMax), nums[i] * localMin);
            global = Math.max(global, localMax);
        }
        return global;
    }
}
