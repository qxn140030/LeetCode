Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.
Return any array that satisfies this condition.

Example 1:
Input: nums = [3,1,2,4]
Output: [2,4,3,1]
Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.

Example 2:
Input: nums = [0]
Output: [0]

Approach 1: Single Pass
Time complexity: O(n)
Space complexity: O(1)

public int[] sortArrayByParity(int[] nums) {
    int n = nums.length;
    int[] rst = new int[n];
    int left = 0, right = n - 1;
    for (int i = 0; i < n; i++) {
        if (nums[i] % 2 == 0) {
            rst[left++] = nums[i];
        } else {
            rst[right--] = nums[i];
        }
    }
    return rst;
}

Approach 2: In-Place
Time complexity: O(n)
Space complexity: O(1)

public int[] sortArrayByParity(int[] nums) {
    int i = 0, j = nums.length - 1;
    while (i < j) {
        if (nums[i] % 2 > nums[j] % 2) {
            int tmp = nums[i];
            nums[i] = nums[j];
            nums[j] = tmp;
        }
        if (nums[i] % 2 == 0) {
            i++;
        }
        if (nums[j] % 2 == 1) {
            j--;
        }
    }
    return nums;
}
