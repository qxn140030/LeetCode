Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, 
and the last position is connected back to the first position to make a circle. It is also called "Ring Buffer".
One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, 
we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.
Implement the MyCircularQueue class:
- MyCircularQueue(k) Initializes the object with the size of the queue to be k.
- int Front() Gets the front item from the queue. If the queue is empty, return -1.
- int Rear() Gets the last item from the queue. If the queue is empty, return -1.
- boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.
- boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.
- boolean isEmpty() Checks whether the circular queue is empty or not.
- boolean isFull() Checks whether the circular queue is full or not.
You must solve the problem without using the built-in queue data structure in your programming language. 

Example 1:
Input
["MyCircularQueue", "enQueue", "enQueue", "enQueue", "enQueue", "Rear", "isFull", "deQueue", "enQueue", "Rear"]
[[3], [1], [2], [3], [4], [], [], [], [4], []]
Output
[null, true, true, true, false, 3, true, true, true, 4]

Explanation
MyCircularQueue myCircularQueue = new MyCircularQueue(3);
myCircularQueue.enQueue(1); // return True
myCircularQueue.enQueue(2); // return True
myCircularQueue.enQueue(3); // return True
myCircularQueue.enQueue(4); // return False
myCircularQueue.Rear();     // return 3
myCircularQueue.isFull();   // return True
myCircularQueue.deQueue();  // return True
myCircularQueue.enQueue(4); // return True
myCircularQueue.Rear();     // return 4

Approach 1: Array
Time complexity: O(1)
Space Complexity: O(n)

class MyCircularQueue {
    private int[] queue;
    private int headIndex, count, capacity;
    public MyCircularQueue(int k) {
        this.capacity = k;
        this.queue = new int[k];
        this.headIndex = 0;
        this.count = 0;
    }
    public boolean enQueue(int value) {
        if (count == capacity) {
            return false;
        }
        queue[(headIndex + count) % capacity] = value;
        count += 1;
        return true;
    } 
    public boolean deQueue() {
        if (count == 0) {
            return false;
        }
        headIndex = (headIndex + 1) % capacity;
        count -= 1;
        return true;
    }
    public int Front() {
        if (count == 0) {
            return -1;
        }
        return queue[headIndex];
    }  
    public int Rear() {
        if (count == 0) {
            return -1;
        }
        int tailIndex = (headIndex + count - 1) % capacity;
        return queue[tailIndex];
    }    
    public boolean isEmpty() {
        return count == 0;
    }   
    public boolean isFull() {
        return count == capacity;
    }
}
/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */

Approach 2: Singly-Linked List
Time complexity: O(1)
Space Complexity: O(n)

class Node {
    public int value;
    public Node nextNode;
    public Node(int value) {
        this.value = value;
    }
}
class MyCircularQueue {
    private Node head, tail;
    private int count, capacity;
    public MyCircularQueue(int k) {
        capacity = k;
    }
    public boolean enQueue(int value) {
        if (count == capacity) {
            return false;
        }
        Node newNode = new Node(value);
        if (count == 0) {
            head = tail = newNode;
        } else {
            tail.nextNode = newNode;
            tail = newNode;
        }
        count++;
        return true;
    }
    public boolean deQueue() {
        if (count == 0) {
            return false;
        }
        head = head.nextNode;
        count--;
        return true;
    }
    public int Front() {
        return count == 0 ? -1 : head.value;
    }
    public int Rear() {
        return count == 0 ? -1 : tail.value;
    }
    public boolean isEmpty() {
        return count == 0;
    }
    public boolean isFull() {
        return count == capacity;
    }
}
