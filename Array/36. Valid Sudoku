Determine if a Sudoku is valid.
The Sudoku board could be partially filled, where empty cells are filled with the character '.'
Note: A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.

Approach 1: HashSet
Time complexity: O(3 * n ^ 2) = O(n^2). n = 9, is the board length.
Space complexity: O(n)

public class Solution {
    public boolean isValidSudoku(char[][] board) {
        Set<Character> hs = new HashSet<>();        
        for (int i = 0; i < 9; i++) {                 // check rows.
            for (int j = 0; j < 9; j++) {
                if (board[i][j] != '.') {
                    if (hs.contains(board[i][j])) {
                        return false;
                    }
                    hs.add(board[i][j]);
                }
            }
            hs.clear();         // Note.
        }        
        for (int i = 0; i < 9; i++) {               // check columns.
            for (int j = 0; j < 9; j++) {
                if (board[j][i] != '.') {
                    if (hs.contains(board[j][i])) {
                        return false;
                    } 
                    hs.add(board[j][i]);
                }
            }
            hs.clear();
        }        
        for (int i = 0; i < 9; i++) {                         // check cells.
            for (int j = i / 3 * 3; j < i / 3 * 3 + 3; j++) {
                for (int k = i % 3 * 3; k < i % 3 * 3 + 3; k++) {
                    if (board[j][k] != '.') {
                        if (hs.contains(board[j][k])) {
                            return false;
                        } 
                        hs.add(board[j][k]);
                    }
                }
            }
            hs.clear();
        }
        return true;
    }
}

Approach 2: Array of Fixed Length
Time complexity: O(n^2)
Space complexity: O(n^2)

class Solution {
    public boolean isValidSudoku(char[][] board) {
        int[][] rows = new int[9][9];
        int[][] cols = new int[9][9];
        int[][] boxes = new int[9][9];
        for (int r = 0; r < 9; r++) {
            for (int c = 0; c < 9; c++) {
                if (board[r][c] == '.') {
                    continue;
                }
                int pos = board[r][c] - '1';
                // Check the row
                if (rows[r][pos] == 1) {
                    return false;
                }
                rows[r][pos] = 1;
                // Check the column
                if (cols[c][pos] == 1) {
                    return false;
                }
                cols[c][pos] = 1;
                // Check the box
                int idx = (r / 3) * 3 + c / 3;
                if (boxes[idx][pos] == 1) {
                    return false;
                }
                boxes[idx][pos] = 1;
            }
        }
        return true;
    }
}

Approach 3: Bitmasking
we can improve on the space complexity of approach 2.
use a binary number with 9 digits to represent numbers 1 through 9 have been visited or not.
check if the ith bit of a binary number is set to 1: x & (1 << i).
set the ith bit of a binary number x to 1: x = x | (1 << i).
Time complexity: O(n^2)
Space complexity: O(n), we need 3n binary numbers to store all seen numbers in all rows, columns, and boxes.

class Solution {
    public boolean isValidSudoku(char[][] board) {
        int[] rows = new int[9];
        int[] cols = new int[9];
        int[] boxes = new int[9];
        for (int r = 0; r < 9; r++) {
            for (int c = 0; c < 9; c++) {
                // Check if the position is filled with number
                if (board[r][c] == '.') {
                    continue;
                }
                int val = board[r][c] - '0';
                int pos = 1 << (val - 1);
                // Check the row
                if ((rows[r] & pos) > 0) {
                    return false;
                }
                rows[r] |= pos;
                // Check the column
                if ((cols[c] & pos) > 0) {
                    return false;
                }
                cols[c] |= pos;
                // Check the box
                int idx = (r / 3) * 3 + c / 3;
                if ((boxes[idx] & pos) > 0) {
                    return false;
                }
                boxes[idx] |= pos;
            }
        }
        return true;
    }
}
