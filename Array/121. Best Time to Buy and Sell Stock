You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transacrtion.
Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5.

Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

Approach 1: Brute force
Time complexity: O(n^2)
Space complexity: O(1)

public class Solution {
    public int maxProfit(int prices[]) {
        int maxprofit = 0;
        for (int i = 0; i < prices.length - 1; i++) {
            for (int j = i + 1; j < prices.length; j++) {
                int profit = prices[j] - prices[i];
                if (profit > maxprofit) {
                    maxprofit = profit;
                }
            }
        }
        return maxprofit;
    }
}

Approach 2: One pass
Time complexity: O(n)
Space complexity: O(1)

public int maxProfit(int[] prices) {
    int profit = 0, lowest = prices[0];
    for (int i = 1; i < prices.length; i++) {
        if (prices[i] > lowest) {
            profit = Math.max(profit, prices[i] - lowest);
        } else {
            lowest = prices[i];
        }
    }
    return profit;
}
