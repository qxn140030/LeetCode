Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates 
where the candidate numbers sums to target.
Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.
Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: [[1,7], [1,2,5], [2,6], [1,1,6]]

Example 1:
Input: candidates = [2,5,2,1,2], target = 5
Output: [[5], [1,2,2]] 

Approach 1: Backtracking with counters
Rather than treating each number as a candidate, we treat groups of unique numbers as candidates.
Time complexity: O(2^n)
the number of combination for an array of size n would be 2^n, i.e. each number is either included or excluded in a combination.
Space complexity: O(n). n is the size of the input array.
build a counter table - O(n) + use the variable path to keep track of the current combination we build - O(n) space + recursion stack - O(n).

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> rst = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        Map<Integer, Integer> counter = new HashMap<>();
        for (int candidate : candidates) {
            counter.put(candidate, counter.getOrDefault(candidate, 0) + 1);
        }
        // convert the counter table to a list of (num, count) tuples
        List<int[]> counterList = new ArrayList<>();
        counter.forEach((key, value) -> {
            counterList.add(new int[]{key, value});
        });
        dfs(path, target, 0, counterList, rst);
        return rst;
    }
    private void dfs(List<Integer> path, int remain, int idx, List<int[]> counter, List<List<Integer>> rst) {
        if (remain <= 0) {
            if (remain == 0) {
                // make a deep copy of the current combination.
                rst.add(new ArrayList<>(path));
            }
            return;
        }
        for (int i = idx; i < counter.size(); i++) {
            int[] entry = counter.get(i);
            Integer candidate = entry[0], freq = entry[1];
            if (freq <= 0) {
                continue;
            }
            // add a new element to the current combination
            path.add(candidate);
            counter.set(i, new int[]{candidate, freq - 1});
            // continue the exploration with the updated combination
            dfs(path, remain - candidate, i, counter, rst);
            // backtrack the changes, so that we can try another candidate
            counter.set(i, new int[]{candidate, freq});
            path.remove(path.size() - 1);
        }
    }
}

Approach 2: Backtracking with Index
sort the input, which could also group all the same numbers together.
Time complexity: O(2^n)
Space complexity: O(n)
use the variable path to keep track of the current combination we build - O(n) + recursion stack - O(n).

public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> rst = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        dfs(candidates, target, 0, path, rst);
        return rst;
    }
    private void dfs(int[] candidates, int target, int index, List<Integer> path, List<List<Integer>> rst) {
        if (target == 0) {
            rst.add(new ArrayList<>(path));
            return;
        }
        for (int i = index; i < candidates.length; i++) {
            if (candidates[i] > target) {
                return;
            }
            if (i > index && candidates[i] == candidates[i - 1]) {
                continue;
            }
            path.add(candidates[i]);
            dfs(candidates, target - candidates[i], i + 1, path, rst);
            path.remove(path.size() - 1);
        }
    }
}
