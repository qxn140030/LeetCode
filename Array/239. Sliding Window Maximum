Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right.
You can only see the k numbers in the window. Each time the sliding window moves right by one position.
For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Therefore, return the max sliding window as [3,3,5,5,6,7].
Note: 
You may assume k is always valid, ie: 1 ≤ k ≤ input array's size for non-empty array.
Follow up:
Could you solve it in linear time?
Hint:
How about using a data structure such as deque (double-ended queue)?
The queue size need not be the same as the window’s size.
Remove redundant elements and the queue should store only elements that need to be considered.

Approach 1: use PriorityQueue.
Time complexity: O(nlogk)
Space complexity: O(k)

public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums == null || nums.length == 0) {
            return new int[0];
        }
        PriorityQueue<Integer> q = new PriorityQueue<>(Collections.reverseOrder());      // max heap.
        int[] rst = new int[nums.length - k + 1];                                        // result size = n - k + 1.
        for (int i = 0; i < nums.length; i++) {
            q.offer(nums[i]);
            if (q.size() >= k) {
                rst[i - k + 1] = q.peek();          // result index = i - k + 1.
                q.remove(nums[i - k + 1]);
            }
        }
        return rst;
    }
}

Approach 2: use Monotonic Deque
Time complexity: O(n)
Space complexity: O(k)

public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums == null || nums.length == 0) {
            return new int[0];
        }
        int[] rst = new int[nums.length - k + 1];   
        Deque<Integer> q = new LinkedList<>();
        for (int i = 0; i < nums.length; i++) {
            if (!q.isEmpty() && q.peek() == (i - k)) {      
                q.poll();
            }
            while (!q.isEmpty() && nums[q.peekLast()] < nums[i]) {         // in descending order.
                q.pollLast();
            }
            q.offer(i);
            if (i - k + 1 >= 0) {
                rst[i - k + 1] = nums[q.peek()];         // the head of deque is the largest number.
            }
        }
        return rst;        
    }
}
