Question: Write a function to find the longest common prefix string amongst an array of strings.

Solution 1: preprocess the array, find the minimum length, then compare every char with the one in strs[0].
Time complexity: O(m * n), m is the length of shortest string, n is array length. Space complexity: O(1).
public class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) {
            return "";
        }
        int len = strs.length;
        int minLen = strs[0].length();
        for (String s : strs) {
            if (s.length() < minLen) {
                minLen = s.length();
            }
        }
        for (int i = 0; i < minLen; i++) {
            for (int j = 1; j < len; j++) {
                if (strs[j].charAt(i) != strs[0].charAt(i)) {
                    return strs[0].substring(0, i);
                }
            }
        }
        return strs[0].substring(0, minLen);
    }
}

Solution 2: compare every string with strs[0].
Time complexity: O(m * n), m is the length of shortest string, n is array length. Space complexity: O(1).
public class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) {
            return "";
        }
        for (int i = 0; i < strs[0].length(); i++) {
            for (int j = 1; j < strs.length; j++) {
                if (strs[j].length() <= i || strs[j].charAt(i) != strs[0].charAt(i)) {
                    return strs[0].substring(0, i);
                }
            }
        }
        return strs[0];
    }
}
