Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.
For example, If n = 4 and k = 2, a solution is:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

branching factor = n, depth = k. Time complexity: exponential. Space complexity: O(nk).
public class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> rst = new ArrayList<List<Integer>>();
        if (n <= 0 || k > n) {
            return rst;
        }
        List<Integer> each = new ArrayList<Integer>();
        helper(n, 1, k, rst, each);
        return rst;
    }
    private void helper(int n, int start, int k, List<List<Integer>> rst, List<Integer> each) {
        if (k == 0) {
            rst.add(new ArrayList<Integer>(each));
            return;
        }
        for (int i = start; i <= n; i++) {
            each.add(i);
            helper(n, i + 1, k - 1, rst, each);
            each.remove(each.size() - 1);
        }
    }
}
