Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:
[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 60]
]
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false

Approach 1: Binary Search
Time complexity: O(log(m * n))
Space complexity: O(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rows = matrix.length, cols = matrix[0].length;
        int top = 0, bottom = rows - 1, row;
        while (top + 1 < bottom) {
            int mid = top + (bottom - top) / 2;
            if (matrix[mid][0] <= target) {
                top = mid;
            } else {
                bottom = mid;
            }
        }
        if (matrix[bottom][0] <= target) {
            row = bottom;
        } else {
            row = top;
        } 
        int start = 0, end = cols - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (matrix[row][mid] <= target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        return matrix[row][start] == target || matrix[row][end] == target ? true : false;
    }
}

public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int row = matrix.length, column = matrix[0].length;
        int start = 0, end = row * column - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (matrix[mid / column][mid % column] >= target) {
                end = mid;
            } else {
                start = mid;
            }
        }
        if (matrix[start / column][start % column] == target || matrix[end / column][end % column] == target) {
            return true;
        } 
        return false;
    }
}
