Given a digit string, return all possible letter combinations that the number could represent.
A mapping of digit to letters (just like on the telephone buttons).
2(abc),3(def),4(ghi),5(jkl),6(mno),7(pqrs),8(tuv),9(wxyz).
Input:Digit string "23", Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note: Although the above answer is in lexicographical order, your answer could be in any order you want.

DFS, recursion.
Time complexity: O(m^n), m is the average number of letters on every number, n is the length of digits.
Space complexity: O(m*n).
public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> rst = new ArrayList<String>();
        if (digits == null || digits.length() == 0) {
            return rst;
        }
        Map<Character, char[]> map = new HashMap<>();
        map.put('0', new char[] {});
        map.put('1', new char[] {});
        map.put('2', new char[] {'a', 'b', 'c'});
        map.put('3', new char[] {'d', 'e', 'f'});
        map.put('4', new char[] {'g', 'h', 'i'});
        map.put('5', new char[] {'j', 'k', 'l'});
        map.put('6', new char[] {'m', 'n', 'o'});
        map.put('7', new char[] {'p', 'q', 'r', 's'});
        map.put('8', new char[] {'t', 'u', 'v'});
        map.put('9', new char[] {'w', 'x', 'y', 'z'});
        StringBuilder sb = new StringBuilder();
        helper(digits, map, sb, rst);
        return rst;
    }
    private void helper(String digits, HashMap<Character, char[]> map, StringBuilder sb, List<String> rst) {
        if (sb.length() == digits.length()) {
            rst.add(sb.toString());
            return;
        }
        for (char c : map.get(digits.charAt(sb.length()))) {
            sb.append(c);
            helper(digits, map, sb, rst);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}

public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> rst = new ArrayList<String>();
        if (digits == null || digits.length() == 0) {
            return rst;
        }
        String[] keyboard = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        StringBuilder sb = new StringBuilder();
        helper(digits, keyboard, sb, rst);
        return rst;
    }
    private void helper(String digits, String[] keyboard, StringBuilder sb, List<String> rst) {
        if (sb.length() == digits.length()) {
            rst.add(sb.toString());
            return;
        }
        for (int i = 0; i < keyboard[digits.charAt(sb.length()) - '0'].length(); i++) {
            sb.append(keyboard[digits.charAt(sb.length()) - '0'].charAt(i));
            helper(digits, keyboard, sb, rst);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
