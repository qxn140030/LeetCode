Given a binary tree, find the maximum path sum.
For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the
parent-child connections. The path does not need to go through the root.
For example: Given the below binary tree,
       1
      / \
     2   3     Return 6.

Time complexity: O(n). Space complexity: O(logn).
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int maxPathSum(TreeNode root) {
        int[] rst = new int[1];
        rst[0] = Integer.MIN_VALUE;
        helper(root, rst);
        return rst[0];
    }
    private int helper(TreeNode root, int[] rst) {
        if (root == null) {
            return 0;
        }
        int left = helper(root.left, rst);
        int right = helper(root.right, rst);
        int cur = Math.max(root.val, Math.max(left + root.val, right + root.val));
        rst[0] = Math.max(rst[0], Math.max(cur, root.val + left + right));
        return cur;                                                                // Note: return cur.
    }
}
