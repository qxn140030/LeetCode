Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.
For example:
Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.
Follow up:
Could you do it without any loop/recursion in O(1) runtime?
Hint:
1. A naive implementation of the above process is trivial. Could you come up with other methods?
2. What are all the possible results?  the range is [1, 9].
3. How do they occur, periodically or randomly? periodically.

Approach 1: Naive
Time complexity: O(logn)
Space complexity: O(1)

public int addDigits(int num) {
    while (num >= 10) {
        int rst = 0;
        while (num > 0) {
            rst += num % 10;
            num /= 10;
        }
        num = rst;
    }
    return num;
}

Approach 2: Mathematical: Digital Root
Time complexity: O(1)
Space complexity: O(1)

public int addDigits(int num) {
    return (num - 1) % 9 + 1;         // In base 10, the sum of digits of a number is congruent to the number modulo 9.
}
