Question: Given an integer x, return true if x is a palindrome.

Example 1:
Input: x = 121
Output: true

Example 2:
Input: x = -121
Output: false
Explanation: From right to left, it becomes 121-.

Example 3:
Input: x = 10
Output: false

Follow up:
Could you solve it without converting the integer to a string?
          
Approach 1: Convert number into string
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public boolean isPalindrome(int x) {
        String str = Integer.toString(x);
        int left = 0;
        int right = str.length() - 1;
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}

Approach 2: Revert the number
if the reversed number is larger than int.MAX, we will hit integer overflow problem.
Time complexity: O(log10(n)). We divided the input by 10 for every iteration.
Space complexity: O(1)

public class Solution {
    public boolean isPalindrome(int x) {
        if (x < 0) {
            return false;
        }
        long revert = 0;
        int tmp = x;
        while (tmp > 0) {
            revert = revert * 10 + tmp % 10;
            tmp /= 10;
        }
        return (int)revert == x;
    }
}

Approach 3: revert half of the number
to avoid the overflow issue of the reverted number. how do we know that we've reached the half of the number?
when the original number is less than the reversed number, it means we've processed half of the number digits.
Time complexity: O(log10(n)). We divided the input by 10 for every iteration.
Space complexity: O(1).

class Solution {
    public boolean isPalindrome(int x) {
        if (x < 0 || (x % 10 == 0 && x != 0)) {
            return false;
        }
        int reverse = 0;
        int tmp = x;
        while (tmp > reverse) {
            reverse = reverse * 10 + tmp % 10;
            tmp /= 10;
        }
        return tmp == reverse || tmp == reverse / 10;
    }
}
