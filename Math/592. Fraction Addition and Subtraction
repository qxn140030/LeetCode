Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.
The final result should be an irreducible fraction. If your final result is an integer, change it to the format of a fraction that has a denominator 1. So in this case, 2 should be converted to 2/1.
Example 1:
Input: expression = "-1/2+1/2"
Output: "0/1"

Example 2:
Input: expression = "-1/2+1/2+1/3"
Output: "1/3"

Example 3:
Input: expression = "1/3-1/2"
Output: "-1/6"

Approach 1: Using LCM
Time complexity : O(nlog⁡x). Here n refers to the number of fractions in the input string and x is the maximum possible value of denominator.
Euclidean GCD algorithm takes O(log⁡(ab)) time for finding gcd of two numbers a and b.
Space complexity : O(n). Size of sign list grows upto n.

class Solution {
    public String fractionAddition(String expression) {
        List<Character> sign = new ArrayList<>();
        for (int i = 1; i < expression.length(); i++) {
            char c = expression.charAt(i);
            if (c == '+' || c == '-') {
                sign.add(c);
            }
        }
        List<Integer> num = new ArrayList<>(), den = new ArrayList<>();
        for (String sub : expression.split("\\+")) {
            for (String subsub : sub.split("-")) {
                if (subsub.length() > 0) {
                    String[] fraction = subsub.split("/");
                    num.add(Integer.parseInt(fraction[0]));
                    den.add(Integer.parseInt(fraction[1]));
                }
            }
        }
        if (expression.charAt(0) == '-') {
            num.set(0, -num.get(0));
        }
        int lcm = 1;
        for (int x : den) {
            lcm = lcm(lcm, x);
        }
        int res = lcm / den.get(0) * num.get(0);
        for (int i = 1; i < num.size(); i++) {
            if (sign.get(i - 1) == '+') {
                res += lcm / den.get(i) * num.get(i);
            } else {
                res -= lcm / den.get(i) * num.get(i);
            }
        }
        int g = gcd(Math.abs(res), Math.abs(lcm));
        return res / g + "/" + lcm / g;
    }
    private int gcd(int a, int b) {
        while (b != 0) {
            int tmp = b;
            b = a % b;
            a = tmp;
        }
        return a;
    }
    private int lcm(int a, int b) {
        return a * b / gcd(a, b);
    }
}
