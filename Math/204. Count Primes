Given an integer n, return the number of prime numbers that are strictly less than n.
Example 1:
Input: n = 10
Output: 4. There are 4 prime numbers less than 10, they are 2, 3, 5, 7.

Example 2:
Input: n = 0
Output: 0

Example 3:
Input: n = 1
Output: 0

Approach 1: Brute Force (Time Limit Exceeded)
Time complexity: O(n * sqrt(n))
Space complexity: O(1)

class Solution {
    public int countPrimes(int n) {
        int cnt = 0;
        for (int i = 2; i < n; i++) {
            if (isPrime(i)) {
                cnt++;
            }
        }
        return cnt;
    }
    private boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}

Approach 2: Sieve of Eratosthenes
Time complexity: O(sqrt(n)log(logn) + n)
sqrt(n) comes from the outer loop. Each time we hit a prime, we "cross out" the multiples of that prime because we know they aren't prime.
time complexity of "crossing out" is O(n/2 + n/3 + n/5 + n/7 + ...), this is bounded by O(log⁡log⁡n)
Space complexity: O(n)

public int countPrimes(int n) {
    boolean[] isPrime = new boolean[n];
    Arrays.fill(isPrime, true);
    for (int i = 2; i * i < n; i++) {
        if (isPrime[i]) {
            for (int j = i * i; j < n; j += i) {
                isPrime[j] = false;
            }
        }
    }
    int count = 0;
    for (int i = 2; i < n; i++) {
        if (isPrime[i]) {
            count++;
        }
    }
    return count;
}
