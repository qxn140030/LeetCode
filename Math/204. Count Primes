Given an integer n, return the number of prime numbers that are strictly less than n.
Example 1:
Input: n = 10
Output: 4. There are 4 prime numbers less than 10, they are 2, 3, 5, 7.

Example 2:
Input: n = 0
Output: 0

Example 3:
Input: n = 1
Output: 0

Approach 1: Sieve of Eratosthenes
Time complexity: O(sqrt(n)log(logn) + n)
sqrt(n) comes from the outer loop. Each time we hit a prime, we "cross out" the multiples of that prime because we know they aren't prime.
time complexity of "crossing out" is O(n/2 + n/3 + n/5 + n/7 + ...), this is bounded by O(log⁡log⁡n)
Space complexity: O(n)

public class Solution {
    public int countPrimes(int n) {
        boolean[] notPrime = new boolean[n];
        for (int i = 2; i * i <= n; i++) {
            if (!notPrime[i]) {
                for (int j = i + i; j < n; j += i) {
                    notPrime[j] = true;
                }
            }
        }
        int count = 0;
        for (int i = 2; i < n; i++) {
            if (!notPrime[i]) {
                count++;
            }
        }
        return count;
    }
}
