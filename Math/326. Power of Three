Given an integer, write a function to determine if it is a power of three.
Follow up:
Could you do it without using any loop / recursion?

Approach 1: Loop iteration
Time complexity: O(logn)
Space complexity: O(1)

public class Solution {
    public boolean isPowerOfThree(int n) {
        if (n < 1) {
            return false;
        }
        while (n % 3 == 0) {
            n /= 3;
        }
        return n == 1;
    }
}

Approach 2: Base conversion
regular expression.
convert the number to base 3 and check if it is written as a leading 1 followed by all 0.
A couple of built-in Java functions will help us along the way.
String baseChange = Integer.toString(number, base);
Time complexity: O(log3(n))
Space complexity: O(log3(n))

public class Solution {
    public boolean isPowerOfThree(int n) {
        return Integer.toString(n, 3).matches("^10*$");
    }
}

Approach 3: Mathmatics
n = 3 ^ i. i = log3(n). i = logb(n) / logb(3).
n is a power of three if and only if i is an integer. 
In Java, we check if a number is an integer by taking the decimal part (using % 1) and checking if it is 0.
never use == when comparing double. 
because the result of Math.log10(n) / Math.log10(3) could be 5.0000001 or 4.9999999. 
Time complexity: Unknown. 
The expensive operation is Math.log, which upper bounds the time time complexity of our algorithm.
The implementation is dependent on the language we are using and compiler.
Space complexity: O(1)

public class Solution {
    public boolean isPowerOfThree(int n) {
        return Math.log10(n) / Math.log10(3) % 1 == 0;
    }
}

Approach 4: Integer limitations
In Java, type int is 4 byte, the maximum value of this data type is 2147483647.
Knowing the limitation of n, we can deduce that the maximum value of n that is also a power of three is 1162261467 = 3^19.
n is a divisor of 3^19 and therefore a power of three.
Time complexity: O(1)
Space complexity: O(1)

public class Solution {
    public boolean isPowerOfThree(int n) {
        return n > 0 && 1162261467 % n == 0;
    }
}
