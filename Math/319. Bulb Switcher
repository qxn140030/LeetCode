There are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.
On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). 
For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.
Return the number of bulbs that are on after n rounds.

Example 1:
Input: n = 3
Output: 1
Explanation: At first, the three bulbs are [off, off, off].
After the first round, the three bulbs are [on, on, on].
After the second round, the three bulbs are [on, off, on].
After the third round, the three bulbs are [on, off, off]. 
So you should return 1 because there is only one bulb is on.

Example 2:
Input: n = 0
Output: 0

Example 3:
Input: n = 1
Output: 1

For determining the number of bulbs that are on after N rounds, we need to consider the pattern of toggling each bulb. 
The idea is that a bulb will be in on state only if it has been toggled odd number of times. 
so we need to find only those bulbs which have odd number of divisors. 
a number has an odd number of divisors if and only if it is a perfect square. 
This is because divisors generally come in pairs(Eg: 1 * 12, 2 * 6, 3 * 4, 4 * 3, 6 * 2, 12 * 1 for 12). 
For perfect squares, one of the divisors is repeated (Eg: 1 * 9, 3 * 3, 9 * 1). 
Thus, the bulbs that remain on are those in positions that are perfect squares (1, 4, 9, 16, ...).
The number of perfect squares less than or equal to n is the largest integer k such that k^2 <= n. 

public int bulbSwitch(int n) {
    return (int)Math.sqrt(n);
}
