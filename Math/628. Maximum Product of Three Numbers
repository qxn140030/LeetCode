Given an integer array nums, find three numbers whose product is maximum and return the maximum product.
Example 1:
Input: nums = [1,2,3]
Output: 6

Example 2:
Input: nums = [1,2,3,4]
Output: 24

Example 3:
Input: nums = [-1,-2,-3]
Output: -6

Approach 1: Sorting
this product will be maximum only if all the numbers in numsnumsnums array are positive. it could also be possible that two negative numbers lying at the left extreme end 
could also contribute to lead to a larger product if the third number in the triplet being considered is the largest positive number in the numsnumsnums array.
Time complexity: O(nlog⁡n)
Space complexity: O(log⁡n)

class Solution {
    public int maximumProduct(int[] nums) {
        Arrays.sort(nums);
        return Math.max(nums[0] * nums[1] * nums[nums.length - 1], 
                        nums[nums.length - 1] * nums[nums.length - 2] * nums[nums.length - 3]);
    }
}

Approach 3: Single Scan
only find the required 2 smallest values(min1 and min2) and the three largest values(max1, max2, max3) in the numsnumsnums array.
Time complexity: O(n)
Space complexity: O(1)

public int maximumProduct(int[] nums) {
    int min1 = Integer.MAX_VALUE, min2 = Integer.MAX_VALUE;
    int max1 = Integer.MIN_VALUE, max2 = Integer.MIN_VALUE, max3 = Integer.MIN_VALUE;
    for (int n : nums) {
        if (n <= min1) {
            min2 = min1;
            min1 = n;
        } else if (n <= min2) {     // n lies between min1 and min2
            min2 = n;
        }
        if (n >= max1) {            // n is greater than max1, max2 and max3
            max3 = max2;
            max2 = max1;
            max1 = n;
        } else if (n >= max2) {     // n lies between max1 and max2
            max3 = max2;
            max2 = n;
        } else if (n >= max3) {     // n lies between max2 and max3
            max3 = n;
        }
    }
    return Math.max(min1 * min2 * max1, max1 * max2 * max3);
}
