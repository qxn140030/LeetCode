Question: You are given a large integer represented as an array digits, where each digits[i] is the ith digit of the integer.
The digits are ordered from most significant digit to least significant in left-to-right order.
The large integer does not contain any leading 0's.
Increment the large integer by one and return the resulting array of digits.

Example 1:
Input: digits = [1,2,3]
Output: [1,2,4]

Example 2:
Input: digits = [4,3,2,1]
Output: [4,3,2,2]

Example 3:
Input: digits = [9]
Output: [1,0]

Approach 1: Schollbook addition with carry
Time complexity: O(n). 
Space complexity: O(n) in worst case, O(1) in most time.

public class Solution {
    public int[] plusOne(int[] digits) {
        if (digits == null) {
            return new int[]{1};
        }
        int carry = 1;
        for (int i = digits.length - 1; i >= 0; i--) {
            int sum = digits[i] + carry;
            digits[i] = sum % 10;
            carry = sum / 10;
            if (carry == 0) {
                return digits;
            }
        }
        int[] rst = new int[digits.length + 1];
        rst[0] = carry;
        return rst;
    }
}
