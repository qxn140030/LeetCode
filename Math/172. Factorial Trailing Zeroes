Given an integer n, return the number of trailing zeroes in n!.
Follow up: 
Could you write a solution that works in logarithmic time complexity?
Example 1:
Input: n = 3
Output: 0. 3! = 6, no trailing zero.

Example 2:
Input: n = 5
Output: 1. 5! = 120, one trailing zero.

Example 3:
Input: n = 0
Output: 0

Approach 1: Compute the Factorial
Time complexity: Worse than O(n^2).
multiply two large numbers has a cost of O(log⁡x * log⁡y). we couldn't treat division as O(1), because we went well outside the 32-bit integer range.
The second part, counting the zeroes at the end, is insignificant compared to the first part.
Space complexity: O(log n!) = O(nlogn). In order to store n!, we need O(log⁡ n!) bits.

import java.math.BigInteger;              // we need to use BigInteger, because n! won't fit into a long for even moderately small values of n.
class Solution {
    public int trailingZeroes(int n) {
        BigInteger nFactorial = BigInteger.ONE;
        for (int i = 2; i <= n; i++) {
            nFactorial = nFactorial.multiply(BigInteger.valueOf(i));
        }            
        int zeroCount = 0;
        while (nFactorial.mod(BigInteger.TEN).equals(BigInteger.ZERO)) {
            nFactorial = nFactorial.divide(BigInteger.TEN);
            zeroCount++;
        }
        return zeroCount;
    }
}

Approach 2: Counting Factors of 5
each 0 on the end of the factorial represents a multiplication by 10. we should look at how many complete pairs of 2 and 5 are among the factors.
Time complexity: O(n)
At each step, while it might look like we do a, O(log⁡n) operation to count the number of fives, it actually amortizes to O(1), 
because the vast majority of numbers checked only contain a single factor of 5.
Space complexity: O(1)

class Solution {
    public int trailingZeroes(int n) {
        int zeroCount = 0;
        for (int i = 5; i <= n; i += 5) {
            int currentFactor = i;
            while (currentFactor % 5 == 0) {
                zeroCount++;
                currentFactor /= 5;
            }
        }
        return zeroCount;
    }
}

class Solution {
    public int trailingZeroes(int n) {
        int zeroCount = 0;
        for (int i = 5; i <= n; i += 5) {
            int powerOf5 = 5;
            while (i % powerOf5 == 0) {
                zeroCount++;
                powerOf5 *= 5;
            }
        }
        return zeroCount;
    }
}

Approach 3: Counting Factors of 5 Efficiently
Time complexity: O(logn)
Space complexity: O(1)

class Solution {
    public int trailingZeroes(int n) {
        int zeroCount = 0;
        long currentMultiple = 5;                // use long because currentMultiple can potentially become larger than an int.
        while (n >= currentMultiple) {
            zeroCount += (n / currentMultiple);
            currentMultiple *= 5;
        }
        return zeroCount;
    }
}

class Solution {
    public int trailingZeroes(int n) {
        int zeroCount = 0;
        while (n > 0) {
            n /= 5;
            zeroCount += n;
        }
        return zeroCount;
    }
}

public class Solution {
    public int trailingZeroes(int n) {
        int rst = 0;
        for (long i = 5; n / i > 0; i *= 5) {         // Note: long i.
            rst += n / i;
        }
        return rst;
    }
}
