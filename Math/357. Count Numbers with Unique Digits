Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10^n.
Example 1:
Input: n = 2
Output: 91
Explanation: The answer should be the total numbers in the range of 0 â‰¤ x < 100, excluding 11,22,33,44,55,66,77,88,99

Example 2:
Input: n = 0
Output: 1

Approach 1: Pattern
1. n = 0 => 1
2. n = 1 => 10. Since 10 unique numbers 0-9.
3. n = 2 => 9 * 9 + 10 => 91. Since first num can be 1-9, second num can be 0-9, but except one. And plus previuos unique nums.
4. n = 3 => 9 * 9 * 8 + 91 = 648 + 91 = 739 and so on.
Time complexity: O(n^2)
SPace complexity: O(n)

class Solution {
    public int countNumbersWithUniqueDigits(int n) {
        if (n == 0) {
            return 1;
        }
        if (n == 1) {
            return 10;
        }
        int[] res = new int[n + 1];
        res[0] = 1;
        res[1] = 10;
        for (int i = 2; i <= n; i++) {
            int mult = 9;
            for (int j = 9; j > 9 - i + 1; j--) {
                mult *= j;
            }
            res[i] = mult + res[i - 1];
        }
        return res[n];   
    }
}
