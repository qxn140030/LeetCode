Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.

Approach 1: Left-to-right pass
each symbol adds its own value, except for when a smaller valued symbol is before a larger valued symbol.
Time complexity: O(1), as there is a finite set of roman numerals.
If roman numerals had an arbitrary number of symbols, then the time complexity would be proportional to the length of the input, i.e. O(n).
Space complexity: O(1)

class Solution {
    public int romanToInt(String s) {
        Map<Character, Integer> map = new HashMap<>();
        map.put('I', 1);
        map.put('V', 5);
        map.put('X', 10);
        map.put('L', 50);
        map.put('C', 100);
        map.put('D', 500);
        map.put('M', 1000);
        
        int rst = 0;
        for (int i = 0; i < s.length(); i++) {
            int curValue = map.get(s.charAt(i));
            int rightValue = 0;
            if (i + 1 < s.length()) {
                rightValue = map.get(s.charAt(i + 1));
            }
            if (curValue < rightValue) {
                rst += rightValue - curValue;
                i++;
            } else {
                rst += curValue;
            }
        }
        return rst;
    }
}

Approach 2: Left-to-right pass
When we take substring from original string, new String object will be created in constant pool or in heap.
Time complexity: O(1)
Space complexity: O(1)

class Solution {
    public int romanToInt(String s) {
        Map<String, Integer> map = new HashMap<>();
        map.put("I", 1);
        map.put("V", 5);
        map.put("X", 10);
        map.put("L", 50);
        map.put("C", 100);
        map.put("D", 500);
        map.put("M", 1000);
        map.put("IV", 4);
        map.put("IX", 9);
        map.put("XL", 40);
        map.put("XC", 90);
        map.put("CD", 400);
        map.put("CM", 900);
        
        int rst = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i < s.length() - 1) {
                String doubleSymbol = s.substring(i, i + 2);
                if (map.containsKey(doubleSymbol)) {           // Check if this is the length - 2 symbol case.
                    rst += map.get(doubleSymbol);
                    i++;
                    continue;
                }
            } 
            // Otherwise, it must be the length - 1 symbol case.
            String singleSymbol = s.substring(i, i + 1);
            rst += map.get(singleSymbol);   
        }
        return rst;
    }
}

Approach 3: Right-to-left pass (more elegant)
maintain a map/dictionary with Roman symbols and their corresponding integer equivalent.
scan the string from right to left. when the character at left of current character is less than current, we will subtract the left value.
Time complexity: O(1)
Space complexity: O(1)

public class Solution {
    public int romanToInt(String s) {
        Map<Character, Integer> map = new HashMap<>();
        map.put('I', 1);
        map.put('V', 5);
        map.put('X', 10);
        map.put('L', 50);
        map.put('C', 100);
        map.put('D', 500);
        map.put('M', 1000);
        
        int rst = map.get(s.charAt(s.length() - 1));
        for (int i = s.length() - 2; i >= 0; i--) {
            if (map.get(s.charAt(i)) < map.get(s.charAt(i + 1))) {
                rst -= map.get(s.charAt(i));
            } else {
                rst += map.get(s.charAt(i));
            }
        }
        return rst;
    }
}
