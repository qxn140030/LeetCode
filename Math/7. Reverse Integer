Given a signed 32-bit integer x, return x with its digits reversed. 
If reversing x causes the value to go outside the signed 32-bit integer range, then return 0.
Assume the envioronment does not allow you to store 64-bit integers (signed or unsigned).
Example 1:
Input: x = 123
Output: 321

Example 2:
Input: x = -123
Output: -321

Example 3:
Input: x = 120
Output: 21

Approach 1: Pop and Push Digits & Chenck before overflow
build up the reverse integer one digit at a time, while doing so, check beforehand whether or not appending another digit would cause overflow.
It is not necessary to check whether it is positive or negative. because in java, -11 / 10 = -1, -11 % 10 = -1.
Time complexity: O(logx), there are roughly logx digits in x. 
Space complexity: O(1)

public class Solution {
    public int reverse(int x) {
        int rst = 0;
        while (x != 0) {
            int tmp = rst * 10 + x % 10;
            if (tmp / 10 != rst) {          // overflow
                return 0;
            }
            rst = tmp;
            x /= 10;
        }
        return rst;
    }
}
