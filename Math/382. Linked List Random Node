Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.
Follow up:
- What if the linked list is extremely large and its length is unknown to you? 
- Could you solve this efficiently without using extra space?
Example:
// Init a singly linked list [1,2,3].
ListNode head = new ListNode(1);
head.next = new ListNode(2);
head.next.next = new ListNode(3);
Solution solution = new Solution(head);
// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.
solution.getRandom();

Approach 1: Fixed-Range Sampling
Time complexity: O(n) for initialization, O(1) for get random
Space complexity: O(n), since we make a copy of elements from the input list.

class Solution {
    private List<Integer> range = new ArrayList<>();
    public Solution(ListNode head) {
        while (head != null) {
            range.add(head.val);
            head = head.next;
        }
    }
    public int getRandom() {
        int idx = (int)(Math.random() * range.size());
        return range.get(idx);
    }
}

Approach 2: Reservoir Sampling
Time complexity: O(n)
Space complexity: O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    ListNode head;
    public Solution(ListNode head) {
        this.head = head;
    }
    public int getRandom() {
        ListNode current = head;  
        int result = current.val, count = 1;
        while (current != null) {
            if (Math.random() * count < 1.0) {
                result = current.val; 
            }
            count++; 
            current = current.next; 
        }
        return result;
    }
}
/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(head);
 * int param_1 = obj.getRandom();
 */
