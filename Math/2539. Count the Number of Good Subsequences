A subsequence of a string is good if it is not empty and the frequency of each one of its characters is the same.
Given a string s, return the number of good subsequences of s. Since the answer may be too large, return it modulo 10^9 + 7.
A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
Example 1:
Input: s = "aabb"
Output: 11
Explanation: The total number of subsequences is 24. There are five subsequences which are not good: "(aab)b", "a(abb)", "a(a)bb", "aa(b)b", and the empty subsequence. Hence, the number of good subsequences is 2^4-5 = 11.

Example 2:
Input: s = "leet"
Output: 12
Explanation: There are four subsequences which are not good: "(l)eet", "l(eet)", "(leet)", and the empty subsequence. Hence, the number of good subsequences is 2^4-4 = 12.

Example 3:
Input: s = "abcd"
Output: 15
Explanation: All of the non-empty subsequences are good subsequences. Hence, the number of good subsequences is 2^4-1 = 15.

Approach 1: via Binomial Coefficient (n choose k)
Given we have x0 occurrence of a and x1 occurrence of b, the number of good subsequence with k frequency is (1 + (x0 choose k)) * (1 + (x1 choose k)) - 1.
The +1 in multiplication is to account for the case where the given character doesn't appear in the answer and the -1 is to remove the case of empty string.
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int countGoodSubsequences(String s) {
        int mod = 1_000_000_007; 
        int[] freq = new int[26]; 
        for (char c : s.toCharArray()) {
            freq[c - 'a']++; 
        }
        long[] coef = new long[26], inv = new long[s.length() + 1]; 
        Arrays.fill(coef, 1); 
        inv[0] = inv[1] = 1; 
        long ans = 0; 
        for (int i = 1; i <= s.length(); i++) {
            long val = 1; 
            if (i >= 2) {
                inv[i] = mod - mod / i * inv[mod % i] % mod; 
            }
            for (int j = 0; j < 26; j++) {
                coef[j] = coef[j] * (freq[j] - i + 1) % mod; 
                coef[j] = coef[j] * inv[i] % mod; 
                val = val * (1 + coef[j]) % mod; 
            }
            ans = (ans + val - 1) % mod; 
        }
        return (int) ans; 
    }
}
