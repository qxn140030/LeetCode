Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]

Approach 1: Brute Force
nested for loops. examine every possible pair of numbers in this integer array. 
Time complexity: O(n^2)
For each element, we try to find its complement by looping through the rest of array which takes O(n) time.
Space complexity: O(1). The space required does not depend on the size of the input array.

public class Solution {
    public int[] twoSum(int[] nums, int target) {   
        for (int i = 0; i < nums.length - 1; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] + nums[j] == target) {
		    return new int[] {i, j};
                }
            }
        }
        return null;
    }
}

Approach 2: Two-pass Hash Table
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], i);
        }
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement) && map.get(complement) != i) {
                return new int[] {i, map.get(complement)};
            }
        }
        return null;
    }
}

Approach 3: One-pass Hash Table
Time complexity: O(n), it depends on the put and get operations of HashMap which is normally O(1). 
traverse the list containing n elements only once. Each look up in the table costs only O(1) time.
Space complexity: O(n)
extra space required depends on the number of items stored in the hash table, which stores at most n elements.
HashMap is generally preferred over HashTable if thread synchronization is not needed.
HashMap allows one null key and multiple null values whereas HashTable doesn't allow any nul keys or value.

public class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(target - nums[i])) {
                return new int[] {i, map.get(target - nums[i])};
            } 
            map.put(nums[i], i);
        }
        return null;
    }
}
