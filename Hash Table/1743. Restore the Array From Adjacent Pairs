There is an integer array nums that consists of n unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in nums.
You are given a 2D integer array adjacentPairs of size n - 1 where each adjacentPairs[i] = [ui, vi] indicates that the elements ui and vi are adjacent in nums.
It is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentPairs, either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]]. The pairs can appear in any order.
Return the original array nums. If there are multiple solutions, return any of them.

Example 1:
Input: adjacentPairs = [[2,1],[3,4],[3,2]]
Output: [1,2,3,4]
Explanation: This array has all its adjacent pairs in adjacentPairs.
Notice that adjacentPairs[i] may not be in left-to-right order.

Example 2:
Input: adjacentPairs = [[4,-2],[1,4],[-3,1]]
Output: [-2,4,1,-3]
Explanation: There can be negative numbers.
Another solution is [-3,1,4,-2], which would also be accepted.

Example 3:
Input: adjacentPairs = [[100000,-100000]]
Output: [100000,-100000]

Approach 1: Hash Table
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int[] restoreArray(int[][] adjacentPairs) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int[] adj : adjacentPairs) {
            map.putIfAbsent(adj[0], new ArrayList<>());
            map.putIfAbsent(adj[1], new ArrayList<>());
            map.get(adj[0]).add(adj[1]);
            map.get(adj[1]).add(adj[0]);
        }
        int n = adjacentPairs.length, idx = 0, cur = 0, prev = Integer.MIN_VALUE;
        int[] rst = new int[n + 1];
        for (int key : map.keySet()) {
            if (map.get(key).size() == 1) {
                cur = key;
                rst[idx++] = cur; 
                break;
            }
        }
        while (idx < n + 1) {
            List<Integer> ansSet = map.get(cur);
            if (ansSet.get(0) != prev) {
                rst[idx] = ansSet.get(0);
            } else {
                rst[idx] = ansSet.get(1);
            }
            prev = cur;
            cur = rst[idx++];
        }
        return rst;
    }
}
