Given an array of strings, group anagrams together.
For example, given: ["eat", "tea", "tan", "ate", "nat", "bat"], 
Return: [
          ["ate", "eat","tea"],
          ["nat","tan"],
          ["bat"]
        ]

Approach 1: Categorize by Sorted String
Time complexity: O(n * k * logk), n is the size of array, k is the length of the longest string. 
Space complexity: O(n * k)

public List<List<String>> groupAnagrams(String[] strs) {
    Map<String, List<String>> map = new HashMap<>();
    for (String s : strs) {
        char[] charArr = s.toCharArray();
        Arrays.sort(charArr);
        String key = String.valueOf(charArr);
        map.computeIfAbsent(key, k -> new ArrayList<>()).add(s);
    }
    return new ArrayList<>(map.values());       // HashMap.values(): return a collection view containing all the values of the map.
}

Approach 2: Categorize by Count
Time complexity: O(n * k)
Space complexity: O(n * k)

public List<List<String>> groupAnagrams(String[] strs) {
    Map<String, List<String>> map = new HashMap<>();
    int[] count = new int[26];
    for (String s : strs) {
        Arrays.fill(count, 0);
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 26; i++) {
            sb.append('#').append(count[i]);
        }
        String key = sb.toString();
        map.computeIfAbsent(key, k -> new ArrayList<>()).add(s);
    }
    return new ArrayList<>(map.values());
}
