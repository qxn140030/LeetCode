Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.
Example 1:
Input: points = [[1,1],[2,2],[3,3]]
Output: 3

Example 2:
Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4

Approach 1:
Time complexity: O(n^2)
Space complexity: O(n)

/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */
public int maxPoints(int[][] points) {
    int maxPoints = 0;
    for (int i = 0; i < points.length; i++) {
        int same = 1, vertical = 0;
        Map<Double, Integer> map = new HashMap<>();
        for (int j = i + 1; j < points.length; j++) {
            if (points[i][0] == points[j][0]) {
                if (points[i][1] == points[j][1]) {
                    same++;
                } else {
                    vertical++;
                }
            } else {
                double slope = points[i][1] == points[j][1] ? 0 : 
                               1.0 * (points[i][1] - points[j][1]) / (points[i][0] - points[j][0]);
                map.put(slope, map.getOrDefault(slope, 0) + 1);
            }
        }
        int localMax = vertical;           // Start by assuming the vertical line (same x) has the most points for this base point.
        for (int count : map.values()) {
            localMax = Math.max(localMax, count); 
        }                        // Add the number of duplicate points (same coordinates) to the best line through this base point.
        maxPoints = Math.max(maxPoints, localMax + same); 
    }
    return maxPoints;
}
