Given an unsorted array of integers, find the length of the longest consecutive elements sequence.
Your algorithm should run in O(n) complexity.
Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

Example 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9

Approach 1: Brute Force
Time complexity: O(n^3)
Space complexity: O(1)

class Solution {
    public int longestConsecutive(int[] nums) {
        int longestStreak = 0;
        for (int num : nums) {
            int currentNum = num, currentStreak = 1;
            while (arrayContains(nums, currentNum + 1)) {
                currentNum++;
                currentStreak++;
            }
            longestStreak = Math.max(longestStreak, currentStreak);
        }
        return longestStreak;
    }
    private boolean arrayContains(int[] arr, int target) {
        for (int num : arr) {
            if (target == num) {
                return true;
            }
        }
        return false;
    }
}

Approach 2: Sorting
Time complexity: O(nlogn)
Space complexity: O(1) or O(n)
For the implementations provided here, the space complexity is constant because we sort the input array in place. 
If we are not allowed to modify the input array, we must spend linear space to store a sorted copy.

class Solution {
    public int longestConsecutive(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        Arrays.sort(nums);
        int longestStreak = 1, currentStreak = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[i - 1]) {
                if (nums[i] == nums[i - 1] + 1) {
                    currentStreak++;
                } else {
                    longestStreak = Math.max(longestStreak, currentStreak);
                    currentStreak = 1;
                }
            }
        }
        return Math.max(longestStreak, currentStreak);
    }
}

Approach 3: HashSet and Intelligent Sequence Building
Using HashSet, given a number, find up and down, if exist, remove from HashSet.
We only attempt to build sequences from numbers that are not already part of a longer sequence. 
This is accomplished by first ensuring that the number that would immediately precede the current number in a sequence is not present, 
as that number would necessarily be part of a longer sequence.
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(num);
        }
        int longestStreak = 0;
        for (int num : set) {
            if (!set.contains(num - 1)) {
                int currentNum = num, currentStreak = 1;
                while (set.contains(currentNum + 1)) {
                    currentNum++;
                    currentStreak++;
                }
                longestStreak = Math.max(longestStreak, currentStreak);
            }
        }
        return longestStreak;
    }
}

public class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> hs = new HashSet<>();
        for (int num : nums) {
            hs.add(num);
        }
        int rst = 0;
        for (int i = 0; i < nums.length; i++) {
            int down = nums[i] - 1;
            while (hs.contains(down)) {
                hs.remove(down--);                 // Note: remember to remove!
            }
            int up = nums[i] + 1;
            while (hs.contains(up)) {
                hs.remove(up++);
            }
            rst = Math.max(rst, up - down - 1);
        }
        return rst;
    }
}
