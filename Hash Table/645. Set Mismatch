Question: You have a set of integers s, which orriginally contains all the numbers from 1 to n. Unfortunately, due to some error, 
one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.
Find the number that occurs twice and the number that is missing and return them in the form of an array.

Example 1:
Input: nums = [1,2,2,4]
Output: [2,3]

Example 2:
Input: nums = [1,1]
Output: [1,2]

Approach 1: Brute force
Time complexity: O(n^2)
Space complexity: O(1)

public class Solution {
    public int[] findErrorNums(int[] nums) {
        int dup = -1, missing = -1;
        for (int i = 1; i <= nums.length; i++) {
            int count = 0;
            for (int j = 0; j < nums.length; j++) {
                if (nums[j] == i) {
                    count++;
                }
            }
            if (count == 2) {
                dup = i;
            } else if (count == 0) {
                missing = i;
            }
            if (dup > 0 && missing > 0) {
                break;
            }
        }
        return new int[] {dup, missing};
    }
}

Approach 2: Sorting
Time complexity: O(nlogn)
Space complexity: O(logn)

public class Solution {
    public int[] findErrorNums(int[] nums) {
        Arrays.sort(nums);
        int dup = -1, missing = -1;
        int n = nums.length;
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i - 1]) {
                dup = nums[i];
            } else if (nums[i] > nums[i - 1] + 1) {
                missing = nums[i - 1] + 1;
            }
        }
        return new int[] {dup, nums[n - 1] != n ? n : missing};
    }
}

Approach 3: Hash Map
Time complexity: O(n)
Space complexity: O(n)

public class Solution {
    public int[] findErrorNums(int[] nums) {
        Map<Integer, Integer> map = new HashMap();
        int dup = -1, missing = -1;
        for (int n: nums) {
            map.put(n, map.getOrDefault(n, 0) + 1);
        }
        for (int i = 1; i <= nums.length; i++) {
            if (map.containsKey(i)) {
                if (map.get(i) == 2) {
                    dup = i;
                }
            } else {
                missing = i;
            }
        }
        return new int[]{dup, missing};
    }
}

Approach 4: Extra array
Time complexity: O(n)
Space complexity: O(n)

public class Solution {
    public int[] findErrorNums(int[] nums) {
        int[] arr = new int[nums.length + 1];
        int dup = -1, missing = -1;
        for (int i = 0; i < nums.length; i++) {
            arr[nums[i]]++;
        }
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] == 0) {
                missing = i;
            } else if (arr[i] == 2) {
                dup = i;
            }
        }
        return new int[]{dup, missing};
    }
}

Approach 5: Constant space
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public int[] findErrorNums(int[] nums) {
        int dup = -1, missing = -1;
        for (int n: nums) {
            if (nums[Math.abs(n) - 1] < 0) {
                dup = Math.abs(n);
            } else {
                nums[Math.abs(n) - 1] *= -1;
            }
        }
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > 0)
                missing = i + 1;
        }
        return new int[]{dup, missing};
    }
}

Approach 6: XOR
By taking the XOR of all the emelemts of the given nums array with all the numbers from 1 to n, we will get a result, as x XOR y
x and y refer to the repeated and the missing term in the given nums array.
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public int[] findErrorNums(int[] nums) {
        int xor = 0, xor0 = 0, xor1 = 0;
        for (int n: nums) {
            xor ^= n;
        }
        for (int i = 1; i <= nums.length; i++) {
            xor ^= i;
        }
        int rightmostbit = xor & ~(xor - 1);
        for (int n: nums) {
            if ((n & rightmostbit) != 0) {
                xor1 ^= n;
            } else {
                xor0 ^= n;
            }
        }
        for (int i = 1; i <= nums.length; i++) {
            if ((i & rightmostbit) != 0) {
                xor1 ^= i;
            } else {
                xor0 ^= i;
            }
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == xor0) {
                return new int[]{xor0, xor1};
            }
        }
        return new int[]{xor1, xor0};
    }
}
