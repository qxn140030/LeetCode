Question: Given two strings s and t, write a function to determine if t is an anagram of s.
An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

Example 1:
Input: s = "anagram", t = "nagaram"
Output: true

Example 2:
Input: s = "rat", t = "car"
Output: false

Follow up:
What if the inputs contain unicode characters? How would you adapt your solution to such case?

Approach 1: Sorting
Time complexity: O(nlogn)
Space complexity: O(1) auxiliary space if heapsort is used. 
in Java, toCharArray() makes a copy of the string so it costs O(n) extraspace, 
but we ignore this for complexity analysis because: It is a language dependent detail.

public class Solution {
    public boolean isAnagram(String s, String t) {
        if (s == null || t == null || s.length() != t.length()) {
            return false;
        }
        char[] c1 = s.toCharArray();
        char[] c2 = t.toCharArray();
        Arrays.sort(c1);
        Arrays.sort(c2);
        return Arrays.equals(c1, c2);
    }
}

Solution 2: Frequency counter
string contains only lower case letters.
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public boolean isAnagram(String s, String t) {
        if (s == null || t == null || s.length() != t.length()) {
            return false;
        }
        int[] ch = new int[26];
        for (int i = 0; i < s.length(); i++) {
            ch[s.charAt(i) - 'a']++;
            ch[t.charAt(i) - 'a']--;
        }
        for (int count : ch) {
            if (count != 0) {
                return false;
            }
        }
        return true;
    }
}

Solution 3: Hash Table (Follow up)
Use a hash table instead of a fixed size counter to fit the entire range of unicode characters. more generic.
Time complexity: O(n)
Space complexity: O(n)

public class Solution {
    public boolean isAnagram(String s, String t) {
        if (s == null || t == null || s.length() != t.length()) {
            return false;
        }
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            if (!map.containsKey(s.charAt(i))) {
                map.put(s.charAt(i), 1);
            } else {
                map.put(s.charAt(i), map.get(s.charAt(i)) + 1);
            }
        }
        for (int i = 0; i < t.length(); i++) {
            if (!map.containsKey(t.charAt(i)) || map.get(t.charAt(i)) == 0) {
                return false;
            }
            map.put(t.charAt(i), map.get(t.charAt(i)) - 1);
        }
        return true;
    }
}
