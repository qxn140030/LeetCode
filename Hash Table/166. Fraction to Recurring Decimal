Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.
If the fractional part is repeating, enclose the repeating part in parentheses.
For example,
Given numerator = 1, denominator = 2, return "0.5".
Given numerator = 2, denominator = 1, return "2".
Given numerator = 2, denominator = 3, return "0.(6)".
Hint:
No scary math, just apply elementary math knowledge. Still remember how to perform a long division?
Try a long division on 4/9, the repeating part is obvious. Now try 4/333. Do you see a pattern?
Be wary of edge cases! List out as many test cases as you can think of and test your code thoroughly.

Approach 1: Long Division
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public String fractionToDecimal(int numerator, int denominator) {
        if (denominator == 0) {
            return "";
        }
        if (numerator == 0) {
            return "0";
        }
        StringBuilder fraction = new StringBuilder();
        if (numerator < 0 ^ denominator < 0) {
            fraction.append("-");
        }
        long dividend = Math.abs(Long.valueOf(numerator));
        long divisor = Math.abs(Long.valueOf(denominator));
        fraction.append(String.valueOf(dividend / divisor));
        long remainder = dividend % divisor;
        if (remainder == 0) {
            return fraction.toString();
        }
        fraction.append(".");
        Map<Long, Integer> map = new HashMap<>();
        while (remainder != 0) {
            if (map.containsKey(remainder)) {
                fraction.insert(map.get(remainder), "(");
                fraction.append(")");
                break;
            }
            map.put(remainder, fraction.length());
            remainder *= 10;
            fraction.append(String.valueOf(remainder / divisor));
            remainder %= divisor;
        }
        return fraction.toString();
    }
}

public class Solution {
    public String fractionToDecimal(int numerator, int denominator) {
        if (denominator == 0) {
            return "";
        }
        if (numerator == 0) {
            return "0";
        }
        String rst = "";
        if (numerator < 0 ^ denominator < 0) {                           // use of ^
            rst += "-";
        }
        long a = Math.abs((long)numerator);                              // Convert to Long or else abs(-2147483648) overflows
        long b = Math.abs((long)denominator);
        rst += String.valueOf(a / b);
        long remainder = (a % b) * 10;                                   // long remainder. 
        if (remainder == 0) {
            return rst;
        }
        rst += '.';
        Map<Long, Integer> map = new HashMap<>();                        // key - remainder, value - position.
        while (remainder != 0) {
            if (map.containsKey(remainder)) {
                String part1 = rst.substring(0, map.get(remainder));
                String part2 = rst.substring(map.get(remainder));
                return part1 + '(' + part2 + ')';
            }
            map.put(remainder, rst.length());
            rst += String.valueOf(remainder / b);
            remainder = (remainder % b) * 10;
        }
        return rst;
    }
}
