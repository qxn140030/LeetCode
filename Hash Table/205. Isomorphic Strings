Question: Given two strings s and t, determine if they are isomorphic.
Two strings are isomorphic if the characters in s can be replaced to get t.
All occurrences of a character must be replaced with another character while preserving the order of characters. No two
characters may map to the same character but a character may map to itself.

Example 1:
Input: s = "egg", t = "add"
Output: true

Example 2:
Input: s = "foo", t = "bar"
Output: false

Example 3:
Input: s = "paper", t = "title"
Output: true

Approach 1: Character mapping with Dictionary
Time complexity: O(n)
Space comeplexity: O(1), size of the ASCII character set is fixed.

class Solution {
    public boolean isIsomorphic(String s, String t) {
        int[] mappingDictStoT = new int[256];
        int[] mappingDictTtoS = new int[256];
        for (int i = 0; i < s.length(); i++) {
            char c1 = s.charAt(i);
            char c2 = t.charAt(i);
            // Case 1: No mapping exists in either of the dictionaries
            if (mappingDictStoT[c1] == 0 && mappingDictTtoS[c2] == 0) {
                mappingDictStoT[c1] = c2;
                mappingDictTtoS[c2] = c1;
            }
            // Case 2: Either mapping doesn't exist in one of the dictionaries or 
            // Mapping exists and it doesn't match in either of the dictionaries or both 
            else if (mappingDictStoT[c1] != c2 || mappingDictTtoS[c2] != c1) {
                return false;
            }
        }
        return true;
    }
}

public class Solution {
    public boolean isIsomorphic(String s, String t) {
        Map<Character, Character> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            if (map.containsKey(s.charAt(i))) {
                if (map.get(s.charAt(i)) != t.charAt(i)) {
                    return false;
                }
            } else if (map.containsValue(t.charAt(i))) {
                return false;
            } else {
                map.put(s.charAt(i), t.charAt(i));
            }
        }
        return true;
    }
}

Approach 2: First occurence transformation
For each character in the given string, we replace it with the index of that character's first occurence in the string.
For "paper", the transformed string will be 01034.
For "title", the transformed string would be 01034. same
Time complexity: O(n)
Space comeplexity: O(n), form two new strings returned by our transformation function. 

class Solution {
    public boolean isIsomorphic(String s, String t) {
        return transformString(s).equals(transformString(t));
    }
    private String transformString(String s) {
        Map<Character, Integer> indexMapping = new HashMap<>();
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c1 = s.charAt(i);
            if (!indexMapping.containsKey(c1)) {
                indexMapping.put(c1, i);
            }
            builder.append(Integer.toString(indexMapping.get(c1)));
            builder.append(" ");
        }
        return builder.toString();
    }
}
