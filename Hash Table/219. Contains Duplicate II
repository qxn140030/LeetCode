Given an integer array nums and an integer k, return true if ther are two distinct indices i and j in the array such that
nums[i] = nums[j] and abs(i - j) <= k.
Example 1:
Input: nums = [1,2,3,1], k = 3
Output: true

Example 2:
Input: nums = [1,0,1,1], k = 1
Output: true

Example 3:
Input: nums = [1,2,3,1,2,3], k = 2
Output: false

Approach 1: Naive linear search
Time complexity: O(n * min(k, n))
Space complexity: O(1)

public boolean containsNearbyDuplicate(int[] nums, int k) {
    for (int i = 0; i < nums.length - 1; i++) {
        for (int j = i + 1; j <= k + i && j < nums.length; j++) {
            if (nums[i] == nums[j]) {
                return true;
            }
        }
    }
    return false;
}

Approach 2: Binary search tree
keep a sliding window of k elements using self-balancing BST.
Time complexity: O(nlog(min(k, n)))
Space complexity: O(min(k, n))

public boolean containsNearbyDuplicate(int[] nums, int k) {
    Set<Integer> set = new TreeSet<>();
    for (int i = 0; i < nums.length; i++) {
        if (set.contains(nums[i])) {
            return true;
        }
        set.add(nums[i]);
        if (set.size() > k) {
            set.remove(nums[i - k]);
        }
    }
    return false;
}

Approach 3: Hash Table
Time complexity: O(n)
Space complexity: O(min(k, n))

public boolean containsNearbyDuplicate(int[] nums, int k) {
    Set<Integer> set = new HashSet<>();
    for (int i = 0; i < nums.length; ++i) {
        if (set.contains(nums[i])) {
            return true;
        }
        set.add(nums[i]);
        if (set.size() > k) {
            set.remove(nums[i - k]);
        }
    }
    return false;
}

public class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(nums[i]) && (Math.abs(map.get(nums[i]) - i) <= k)) {
                return true;
            }
            map.put(nums[i], i);
        }
        return false;
    }
}
