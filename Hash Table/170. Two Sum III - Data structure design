Question: Design a data structure that accepts a stream of integers and check if it has a pair of integers that sum up to a particular value.
implement a TwoSum class:
TwoSum() initializes the TwoSum object, eith an empty array initially.
add - Add the number to the data structure.
find - Return true if there exists any pair of numbers which sum is equal to the value.

Example 1:
Input
["TwoSum", "add", "add", "add", "find", "find"]
[[], [1], [3], [5], [4], [7]]
Output
[null, null, null, null, true, false]

Explanation
TwoSum twoSum = new TwoSum();
twoSum.add(1);   // [] --> [1]
twoSum.add(3);   // [1] --> [1,3]
twoSum.add(5);   // [1,3] --> [1,3,5]
twoSum.find(4);  // 1 + 3 = 4, return true
twoSum.find(7);  // No two integers sum up to 7, return false

Approach 1: Sorted List
Time complecity: 
add(number): O(1), append the element into the list.
find(value): O(nlogn), sorting.
Space complexity: O(n)

import java.util.Collections;

class TwoSum {
  private ArrayList<Integer> nums;
  private boolean is_sorted;
  public TwoSum() {
    this.nums = new ArrayList<Integer>();
    this.is_sorted = false;
  }
  public void add(int number) {
    this.nums.add(number);
    this.is_sorted = false;
  }
  public boolean find(int value) {
    if (!this.is_sorted) {
      Collections.sort(this.nums);
      this.is_sorted = true;
    }
    int low = 0;
    int high = this.nums.size() - 1;
    while (low < high) {
      int twosum = this.nums.get(low) + this.nums.get(high);
      if (twosum < value) {
        low++;
      } else if (twosum > value) {
        high--;
      } else {
        return true;
      }
    }
    return false;
  }
}

Approach 2: HashTable
Since the desired class need add and get operations, HashMap is a good option for this purpose.
build a frequency hashtable with the number as key and the frequency of number as the value.
Time complecity: 
add(number): O(1)
find(value): O(n), where n is the number of unique numbers.
Space complexity: O(n)

import java.util.HashMap;

class TwoSum {
  private HashMap<Integer, Integer> num_counts;
  public TwoSum() {
    this.num_counts = new HashMap<Integer, Integer>();
  }
  public void add(int number) {
    if (this.num_counts.containsKey(number)) {
      this.num_counts.replace(number, this.num_counts.get(number) + 1);
    } else {
      this.num_counts.put(number, 1);
    }
  }
  public boolean find(int value) {
    for (Map.Entry<Integer, Integer> entry : this.num_counts.entrySet()) {
      int complement = value - entry.getKey();
      if (complement != entry.getKey()) {
        if (this.num_counts.containsKey(complement)) {
          return true;
        }
      } else {
        if (entry.getValue() > 1) {
          return true;
        }
      }
    }
    return false;
  }
}
