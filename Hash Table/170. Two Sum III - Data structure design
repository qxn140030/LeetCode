Question: Design a data structure that accepts a stream of integers and check if it has a pair of integers that sum up to a particular value.
implement a TwoSum class:
TwoSum() initializes the TwoSum object, eith an empty array initially.
add - Add the number to the data structure.
find - Return true if there exists any pair of numbers which sum is equal to the value.

Example 1:
Input
["TwoSum", "add", "add", "add", "find", "find"]
[[], [1], [3], [5], [4], [7]]
Output
[null, null, null, null, true, false]

Explanation
TwoSum twoSum = new TwoSum();
twoSum.add(1);   // [] --> [1]
twoSum.add(3);   // [1] --> [1,3]
twoSum.add(5);   // [1,3] --> [1,3,5]
twoSum.find(4);  // 1 + 3 = 4, return true
twoSum.find(7);  // No two integers sum up to 7, return false

Approach 1: Sorted List
Time complecity: 
add(number): O(1), append the element into the list.
find(value): O(nlogn), sorting.
Space complexity: O(n)

import java.util.Collections;
class TwoSum {
    private ArrayList<Integer> nums;
    private boolean isSorted;
    public TwoSum() {
        nums = new ArrayList<>();
        isSorted = false;
    }  
    public void add(int number) {
        nums.add(number);
        isSorted = false;
    }   
    public boolean find(int value) {
        if (!isSorted) {
            Collections.sort(nums);
            isSorted = true;
        }
        int low = 0;
        int high = nums.size() - 1;
        while (low < high) {
            int twosum = nums.get(low) + nums.get(high);
            if (twosum < value) {
                low++;
            } else if (twosum > value) {
                high--;
            } else {
                return true;
            }
        }
        return false;
    }
}
/**
 * Your TwoSum object will be instantiated and called as such:
 * TwoSum obj = new TwoSum();
 * obj.add(number);
 * boolean param_2 = obj.find(value);
 */

Approach 2: Hash Table
Since the desired class need add and get operations, HashMap is a good option for this purpose.
build a frequency hashtable with the number as key and the frequency of number as the value.
Time complecity: 
add(number): O(1)
find(value): O(n), where n is the total number of unique numbers.
Space complexity: O(n)

import java.util.HashMap;
class TwoSum {
    Map<Integer, Integer> map;
    public TwoSum() {
        map = new HashMap<>();
    }
    public void add(int number) {
        map.put(number, map.getOrDefault(number, 0) + 1);
    }
    public boolean find(int value) {
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int complement = value - entry.getKey();
            if (complement != entry.getKey()) {
                if (map.containsKey(complement)) {
                    return true;
                }
            } else {
                if (entry.getValue() > 1) {
                    return true;
                }
            }
        }
        return false;
    }
}
