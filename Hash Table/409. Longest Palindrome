Question: Given a string s which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with
those letters.
Letters are case sensitive, for example "Aa" is not considered a palindrome here.

Example 1:
Input: "abccccdd"
Output: 7
Explanation:
One longest palindrome that can be built is "dccaccd", whose length is 7.

Example 2:
Input: "a"
Output: 1

Aproach 1: Brute force 
Time complexity: O(n!)

Approach 2: Greedy
128 is a value range of some kinds of character because the old ASCII character set from the 1960s had 128 characters.
This character set is all you need to represent upper and lower-case English letters, numbers, and punctuation marks, 
plus a bunch of control codes to operate printer terminals.
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int longestPalindrome(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        } 
        int[] count = new int[128];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i)]++; 
        }
        int len = 0;
        boolean odd = false;
        for (int i : count) {
            len += i / 2 * 2;
            if (odd != true && i % 2 == 1) {
                odd = true;
            }
        }
        return odd == true ? len + 1 : len;
    }
}

Approach 3: HashMap
Time complexity: O(n)
Space complexity: O(1), at most 128.

public class Solution {
    public int longestPalindrome(String s) {
        Map<Character, Integer> map = new HashMap<>();
        for (char c : s.toCharArray()) {
            if (!map.containsKey(c)) {
                map.put(c, 1);
            } else {
                map.put(c, map.get(c) + 1);
            }
        }
        int len = 0;
        for (int i : map.values()) {
            if (i % 2 == 0) {
                len += i;
            } else {
                len += i - 1;
            }
        }
        return len < s.length() ? len + 1 : len;
    }
}

Approach 4: HashSet
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public int longestPalindrome(String s) {
        int len = 0;
        Set<Character> hs = new HashSet<>();
        for (char c : s.toCharArray()) {
            if (hs.contains(c)) {
                hs.remove(c);
                len += 2;
            } else {
                hs.add(c);
            }
        }
        return hs.isEmpty() ? len : len + 1;
    }
}
