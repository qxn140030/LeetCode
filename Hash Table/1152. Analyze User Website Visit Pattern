You are given two string arrays username and website and an integer array timestamp. All the given arrays are of the same length and the tuple [username[i], website[i], timestamp[i]] indicates that the user username[i] visited the website website[i] at time timestamp[i].

A pattern is a list of three websites (not necessarily distinct).

For example, ["home", "away", "love"], ["leetcode", "love", "leetcode"], and ["luffy", "luffy", "luffy"] are all patterns.
The score of a pattern is the number of users that visited all the websites in the pattern in the same order they appeared in the pattern.

For example, if the pattern is ["home", "away", "love"], the score is the number of users x such that x visited "home" then visited "away" and visited "love" after that.
Similarly, if the pattern is ["leetcode", "love", "leetcode"], the score is the number of users x such that x visited "leetcode" then visited "love" and visited "leetcode" one more time after that.
Also, if the pattern is ["luffy", "luffy", "luffy"], the score is the number of users x such that x visited "luffy" three different times at different timestamps.
Return the pattern with the largest score. If there is more than one pattern with the same largest score, return the lexicographically smallest such pattern.

Note that the websites in a pattern do not need to be visited contiguously, they only need to be visited in the order they appeared in the pattern.

 

Example 1:

Input: username = ["joe","joe","joe","james","james","james","james","mary","mary","mary"], timestamp = [1,2,3,4,5,6,7,8,9,10], website = ["home","about","career","home","cart","maps","home","home","about","career"]
Output: ["home","about","career"]
Explanation: The tuples in this example are:
["joe","home",1],["joe","about",2],["joe","career",3],["james","home",4],["james","cart",5],["james","maps",6],["james","home",7],["mary","home",8],["mary","about",9], and ["mary","career",10].
The pattern ("home", "about", "career") has score 2 (joe and mary).
The pattern ("home", "cart", "maps") has score 1 (james).
The pattern ("home", "cart", "home") has score 1 (james).
The pattern ("home", "maps", "home") has score 1 (james).
The pattern ("cart", "maps", "home") has score 1 (james).
The pattern ("home", "home", "home") has score 0 (no user visited home 3 times).
Example 2:

Input: username = ["ua","ua","ua","ub","ub","ub"], timestamp = [1,2,3,4,5,6], website = ["a","b","a","a","b","c"]
Output: ["a","b","a"]

public List<String> mostVisitedPattern(String[] username, int[] timestamp, String[] website) {
    int n = username.length;
    // Step 1: Combine and sort by timestamp
    List<Record> records = new ArrayList<>();
    for (int i = 0; i < n; i++) {
        records.add(new Record(username[i], timestamp[i], website[i]));
    }
    records.sort(Comparator.comparingInt(r -> r.time));
    // Step 2: Group websites visited by each user
    Map<String, List<String>> userVisits = new HashMap<>();
    for (Record r : records) {
        userVisits.computeIfAbsent(r.user, k -> new ArrayList<>()).add(r.site);
    }
    // Step 3: For each user, generate all 3-sequences and count them
    Map<String, Set<String>> seenByUser = new HashMap<>();
    for (String user : userVisits.keySet()) {
        List<String> sites = userVisits.get(user);
        Set<String> sequences = generate3Seq(sites);
        for (String seq : sequences) {
            seenByUser.computeIfAbsent(seq, k -> new HashSet<>()).add(user);
        }
    }
    Map<String, Integer> sequenceCount = new HashMap<>();
    for (String seq : seenByUser.keySet()) {
        sequenceCount.put(seq, seenByUser.get(seq).size());
    }
    // Step 4: Find the sequence with max count (and lex smallest if tie)
    String rst = "";
    int max = 0;
    for (String seq : sequenceCount.keySet()) {
        int count = sequenceCount.get(seq);
        if (count > max || (count == max && seq.compareTo(rst) < 0)) {
            max = count;
            rst = seq;
        }
    }
    // Convert back to List<String>
    return Arrays.asList(rst.split("#"));
}
// Generate all unique 3-sequences from the user's site visits
Set<String> generate3Seq(List<String> sites) {
    Set<String> rst = new HashSet<>();
    int n = sites.size();
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            for (int k = j + 1; k < n; k++) {
                rst.add(sites.get(i) + "#" + sites.get(j) + "#" + sites.get(k));
            }
        }
    }
    return rst;
}
// Helper class to store a visit record
class Record {
    String user, site;
    int time;
    Record(String u, int t, String s) {
        user = u;
        time = t;
        site = s;
    }
}
