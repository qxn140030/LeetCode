Question: Given a pattern and a string s, find if s follows the same pattern.
Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

Example 1:
Input: pattern = "abba", s = "dog cat cat dog"
Output: true

Example 2:
Input: pattern = "abba", s = "dog cat cat fish"
Output: false

Example 3:
Input: pattern = "abba", s = "dog dog dog dog"
Output: false

Example 4:
Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false

Notes:
You may assume pattern contains only lowercase letters, and s contains lowercase letters separated by a single space.

Approach 1: Two Hash Maps
one for mapping characters to words and the other for mapping words to characters.
checking for values in a hash map is a O(k) operation where k is the number of key value pairs in the hash map.
Time complexity: O(m + n)
Space complexity: O(w) where w represents the number of unique words in s.

class Solution {
    public boolean wordPattern(String pattern, String s) {
        HashMap<Character, String> map_char = new HashMap();
        HashMap<String, Character> map_word = new HashMap();
        String[] words = s.split(" ");
        if (words.length != pattern.length()) {
            return false;
        }
        for (int i = 0; i < words.length; i++) {
            char c = pattern.charAt(i);
            String w = words[i];
            if (!map_char.containsKey(c)) {
                if (map_word.containsKey(w)) {
                    return false;
                } else {
                    map_char.put(c, w);
                    map_word.put(w, c);
                }
            } else {
                String mapped_word = map_char.get(c);
                if (!mapped_word.equals(w)) {
                    return false;
                }
            }
        }
        return true;
    }
}

Approach 2: Single index hash map
keep track of the first occurences of each character in pattern and each word in s.
goal is to make sure that the indices of each character and word match up.
Time complexity: O(m + n)
Space complexity: O(w)

public class Solution {
    public boolean wordPattern(String pattern, String s) {
        Map<Character, String> map = new HashMap<>();
        String[] arr = str.split(" ");
        if (pattern.length() != arr.length) {
            return false;
        }
        for (int i = 0; i < pattern.length(); i++) {
            char c = pattern.charAt(i);
            String w = words[i];
            if (!map_index.containsKey(c)) {
                map_index.put(c, i);
            }
            if (!map_index.containsKey(w)) {
                map_index.put(w, i);
            }
            if (map_index.get(c) != map_index.get(w)) {
                return false;
            }
        }
        return true;
    }
}
