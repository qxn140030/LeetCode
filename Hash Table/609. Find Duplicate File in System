Given a list paths of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. 
You may return the answer in any order.
A group of duplicate files consists of at least two files that have the same content.
A single directory info string in the input list has the following format:
"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)"
It means there are n files (f1.txt, f2.txt ... fn.txt) with content (f1_content, f2_content ... fn_content) respectively in the directory "root/d1/d2/.../dm". 
Note that n >= 1 and m >= 0. If m = 0, it means the directory is just the root directory.
The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:
"directory_path/file_name.txt"

Example 1:
Input: paths = ["root/a 1.txt(abcd) 2.txt(efgh)","root/c 3.txt(abcd)","root/c/d 4.txt(efgh)","root 4.txt(efgh)"]
Output: [["root/a/2.txt","root/c/d/4.txt","root/4.txt"],["root/a/1.txt","root/c/3.txt"]]

Example 2:
Input: paths = ["root/a 1.txt(abcd) 2.txt(efgh)","root/c 3.txt(abcd)","root/c/d 4.txt(efgh)"]
Output: [["root/a/2.txt","root/c/d/4.txt"],["root/a/1.txt","root/c/3.txt"]]

Follow up:
- Imagine you are given a real file system, how will you search files? DFS or BFS?
DFS. In this case the directory path could be large. DFS can reuse the shared the parent directory before leaving that directory.
BFS explores neighbors first. This means that files which are located close to each other are also accessed one after another. 
This is great e.g. for reducing HDD seek times due to space locality and is expected to be faster. For SSDs, larger number of small sequential reads can be grouped into smaller number of large reads.
- If the file content is very large (GB level), how will you modify your solution?
For very large files we should do the following comparisons in this order:
1. compare sizes, if not equal, then files are different and stop here!
2. hash them with a fast algorithm e.g. MD5 or use SHA256 (no collisions found yet), if not equal then stop here!
3. compare byte by byte to avoid false positives due to collisions.
- If you can only read the file by 1kb each time, how will you modify your solution?
file cannot fit the whole ram. Use a buffer to read controlled by a loop; read until not needed or to the end. The sampled slices are offset by the times the buffer is called.
- What is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?
O(|num_files||sample||directory_depth|) + O(|hashmap.keys()|)
Runtime - Worst case (which is very unlikely to happen): O(N^2 * L) where L is the size of the maximum bytes that need to be compared
Space - Worst case: all files are hashed and inserted in the hashmap, so O(H^2 * L), H is the hash code size and L is the filename size
- How to make sure the duplicated files you find are not false positive?

Approach 1: Using HashMap
Time complexity: O(n * m), n strings of average length m is parsed.
Space complexity: O(n * m)

class Solution {
    public List<List<String>> findDuplicate(String[] paths) {
        Map<String, List<String>> map = new HashMap<>();
        for (String s: paths) {
            String[] path = s.split(" ");
            for (int i = 1; i < path.length; i++) {
                String content = path[i].substring(path[i].indexOf("("), path[i].indexOf(")") + 1);
                if (!map.containsKey(content)) {
                    map.put(content, new ArrayList<>());
                }
                map.get(content).add(path[0] + "/" + path[i].substring(0, path[i].indexOf("(")));
            }
        }
        List<List<String>> rst = new ArrayList<>();
        for (String key: map.keySet()) {               // for (Map.Entry<String, List<String>> entry: map.entrySet()) {
            if (map.get(key).size() > 1) {             // if (entry.getValue().size() > 1)
                rst.add(map.get(key));                 // rst.add(new ArrayList<>(entry.getValue()));
            }
        }
        return rst;
    }
}
