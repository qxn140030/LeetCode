Given two sparse vectors, compute their dot product.
Implement class SparseVector:
- SparseVector(nums) Initializes the object with the vector nums
- dotProduct(vec) Compute the dot product between the instance of SparseVector and vec
A sparse vector is a vector that has mostly zero values, you should store the sparse vector efficiently and compute the dot product between two SparseVector.
Example 1:
Input: nums1 = [1,0,0,2,3], nums2 = [0,3,0,4,0]
Output: 8
Explanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2)
v1.dotProduct(v2) = 1*0 + 0*3 + 0*0 + 2*4 + 3*0 = 8

Example 2:
Input: nums1 = [0,1,0,0,0], nums2 = [0,0,0,0,2]
Output: 0
Explanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2)
v1.dotProduct(v2) = 0*0 + 1*0 + 0*0 + 0*0 + 0*2 = 0

Example 3:
Input: nums1 = [0,1,0,0,2,0,0], nums2 = [1,0,0,0,3,0,4]
Output: 6

Approach 1: Non-efficient Array Approach
Time complexity: O(n) for both constructing the sparse vector and calculating the dot product.
Space complexity: O(1) for constructing the sparse vector as we simply save a reference to the input array and O(1) for calculating the dot product.

class SparseVector {
    private int[] array;
    SparseVector(int[] nums) {
        array = nums;
    }
	  // Return the dotProduct of two sparse vectors
    public int dotProduct(SparseVector vec) {
        int rst = 0;
        for (int i = 0; i < array.length; i++) {
            rst += array[i] * vec.array[i];
        }
        return rst;
    }
}
// Your SparseVector object will be instantiated and called as such:
// SparseVector v1 = new SparseVector(nums1);
// SparseVector v2 = new SparseVector(nums2);
// int ans = v1.dotProduct(v2);

Approach 2: Hash Set
Let n be the length of the input array and m be the number of non-zero elements.
Time complexity: O(n) for creating the Hash Map; O(m) for calculating the dot product.
Space complexity: O(m) for creating the Hash Map; O(1) for calculating the dot product.

class SparseVector {
    Map<Integer, Integer> map;      
    SparseVector(int[] nums) {
        map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                map.put(i, nums[i]);        
            }
        }
    } 
	  public int dotProduct(SparseVector vec) {
        int rst = 0;
        for (int i : map.keySet()) {
            if (vec.map.containsKey(i)) {
                rst += map.get(i) * vec.map.get(i);
            }
        }
        return rst;
    }
}
