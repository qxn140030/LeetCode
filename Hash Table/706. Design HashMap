Design a HashMap without using any built-in hash table libraries.
Implement the MyHashMap class:
* MyHashMap() initializes the object with an empty map.
* void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
* int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
* void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.
Example 1:
Input
["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
Output
[null, null, null, 1, -1, null, 1, null, -1]

Explanation
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // The map is now [[1,1]]
myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]

Approach 1: Using Array List
Time complexity: O(n)
Space complexity: O(n)

class MyHashMap {
    List<Integer> keys, values;
    public MyHashMap() {
       keys = new ArrayList<>();
       values = new ArrayList<>(); 
    }
    public void put(int key, int value) {
        int idx = keys.indexOf(key);       // List .indexOf(key)
        if (idx == -1) {
            keys.add(key);
            values.add(value);
        } else {  
            values.set(idx, value);       // using set() to update the value in array list.
        } 
    }
    public int get(int key) {
        int idx = keys.indexOf(key);
        return idx == -1 ? -1 : values.get(idx);
    }
    public void remove(int key) {
        int idx = keys.indexOf(key);
        if (idx != -1) {
            keys.remove(idx);
            values.remove(idx);
        } 
    }
}
/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */

Approach 2: Using Array int[]
Time complexity: O(1)
Space complexity: O(1)

class MyHashMap {
    int[] ans;
    public MyHashMap() {
        ans = new int[1000001];
        Arrays.fill(ans, -1);
    }
    public void put(int key, int value) {
        ans[key] = value;
    }
    public int get(int key) {
        return ans[key];
    }
    public void remove(int key) {
        ans[key] = -1;
    }
}

Approach 3: Using Array int[] + LinkedList for Collisions
Time complexity: O(n)
Space complexity: O(n)

class MyHashMap {
    private int size;               
    private Node[] nodeHeads;
    private class Node {
        Node next;
        int key, val;
        Node(int key, int val) {
            this.key = key;
            this.val = val;
        }
    }
    public MyHashMap() {
        this.size = 500;              // change the size as needed for tradeoff between speed and memory.
        nodeHeads = new Node[size];
    }
    public void put(int key, int value) {
        int index = hash(key);
        Node temp = nodeHeads[index];
        if (temp == null){
            nodeHeads[index] = new Node(key, value);
            return;
        }
        Node prev = temp;
        while (temp != null) {
            if (temp.key == key) {
                temp.val = value;
                return;
            }
            prev = temp;
            temp = temp.next;
        }
        prev.next = new Node(key, value);
    }
    public int get(int key) {
        int index = hash(key);
        Node temp = nodeHeads[index];
        while (temp != null ){
            if (temp.key == key) {
                return temp.val;
            }
            temp = temp.next;
        }
        return -1;
    }
    public void remove(int key) {
        int index = hash(key);
        Node temp = nodeHeads[index];
        if (temp == null) {
            return;
        }
        if (temp.key == key) {
            nodeHeads[index] = nodeHeads[index].next;
            return;
        }
        while (temp.next != null) {
            if (temp.next.key == key) {
                temp.next = temp.next.next;
                return;
            }
            temp = temp.next;
        }
    }
    private int hash(int key) {
        return key % size;
    }
}
