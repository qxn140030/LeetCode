A trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. 
There are various applications of this data structure, such as autocomplete and spellchecker.
Implement the Trie class:
* Trie() Initializes the trie object.
* void insert(String word) Inserts the string word into the trie.
* boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.
* boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.
Example 1:
Input:
["Trie", "insert", "search", "search", "startsWith", "insert", "search"]
[[], ["apple"], ["apple"], ["app"], ["app"], ["app"], ["app"]]
Output:
[null, null, true, false, true, null, true]
Explanation:
Trie trie = new Trie();
trie.insert("apple");
trie.search("apple");   // return True
trie.search("app");     // return False
trie.startsWith("app"); // return True
trie.insert("app");
trie.search("app");     // return True

Approach 1: Hash Table
using HashMap<Character, TrieNode> children.
Trie (we pronounce "try") or prefix tree is a tree data structure, which is used for retrieval of a key in a dataset of strings.

class TrieNode {
    Map<Character, TrieNode> children = new HashMap<>();
    boolean isLeaf;
    public TrieNode() {} 
}
public class Trie {
    private TrieNode root = new TrieNode();
    public Trie() {}
    public void insert(String word) {                        // Time/Space complexity: O(m), where m is the key length.
        Map<Character, TrieNode> children = root.children;
        for (int i = 0; i < word.length(); i++) {            // In each iteration of the algorithm, we either examine 
            char c = word.charAt(i);
            TrieNode trie = null;
            if (!children.containsKey(c)) {                  // or create a node in the trie till we reach the end of the key.
                trie = new TrieNode();
                children.put(c, trie);
            }
            trie = children.get(c);
            children = trie.children;
            if (i == word.length() - 1) {
                trie.isLeaf = true;
            }
        }
    }    
    public boolean search(String word) {
        TrieNode node = searchHelper(word);
        if (node != null && node.isLeaf) {
            return true;
        }
        return false;
    }
    public boolean startsWith(String prefix) {
        return searchHelper(prefix) == null ? false : true;
    }
    private TrieNode searchHelper(String s) {
        Map<Character, TrieNode> children = root.children;
        TrieNode node = null;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (children.containsKey(c)) {
                node = children.get(c);
                children = node.children;
            } else {
                return null;
            }
        }
        return node;
    }
}
/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */

Approach 2: Improve Performance by Using an Array
Each trie node can only contains 'a'-'z' characters. So we can use a small array to store the character.

class TrieNode {
    TrieNode[] children;
    boolean isLeaf;
    public TrieNode() {
        children = new TrieNode[26];
    }
}
public class Trie {
    private TrieNode root;
    public Trie() {
        root = new TrieNode();
    }
    public void insert(String word) {
        TrieNode p = root;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            int index = c - 'a';
            if (p.children[index] == null) {
                TrieNode tmp = new TrieNode();
                p.children[index] = tmp;
            }
            p = p.children[index];
        }
        p.isLeaf = true;
    }        
    public boolean search(String word) {
        TrieNode node = searchHelper(word);
        if (node != null && node.isLeaf) {
            return true;
        }
        return false;
    }
    public boolean startsWith(String prefix) {
        return searchHelper(prefix) == null ? false : true;
    }
    private TrieNode searchHelper(String s) {
        TrieNode p = root;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            int index = c - 'a';
            if (p.children[index] == null) {
                return null;
            }
            p = p.children[index];
        }
        return p;
    }
}
