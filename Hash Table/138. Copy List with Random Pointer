A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.
Return a deep copy of the list.

Approach 1: Recursive
Time complexity: O(n)
Space complexity: O(n)

/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;
    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
class Solution {
    // HashMap which holds old nodes as keys and new nodes as its values.
    HashMap<Node, Node> visited = new HashMap<>();
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }
        // If we have already processed the current node, then we simply return the cloned version of it.
        if (visited.containsKey(head)) {
            return visited.get(head);
        }
        // Create a new node with the value same as old node. (i.e. copy the node)
        Node node = new Node(head.val, null, null);
        // Save this value in the hash map. This is needed since there might be
        // loops during traversal due to randomness of random pointers and this would help us avoid them.
        visited.put(head, node);
        // Recursively copy the remaining linked list starting once from the next pointer and then from the random pointer.
        // Thus we have two independent recursive calls.
        // Finally we update the next and random pointers for the new node created.
        node.next = copyRandomList(head.next);
        node.random = copyRandomList(head.random);
        return node;
    }
}

Approach 2: Iterative with O(N) Space
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    // HashMap which holds old nodes as keys and new nodes as its values.
    HashMap<Node, Node> visited = new HashMap<>();
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }
        Node oldNode = head;
        Node newNode = new Node(oldNode.val);
        visited.put(oldNode, newNode);
        while (oldNode != null) {
            // Get the clones of the nodes referenced by random and next pointers.
            newNode.random = getClonedNode(oldNode.random);
            newNode.next = getClonedNode(oldNode.next);
            oldNode = oldNode.next;
            newNode = newNode.next;
        }
        return this.visited.get(head);
    }
    private Node getClonedNode(Node node) {
        if (node == null) {
            return null;
        }
        // Check if the node is in the visited dictionary
        if (visited.containsKey(node)) {
            // If its in the visited dictionary then return the new node reference from the dictionary
            return visited.get(node);
        } else {
            // Otherwise create a new node, add to the dictionary and return it
            visited.put(node, new Node(node.val, null, null));
            return visited.get(node);
        }
    }
}

Approach 3: Iterative with O(1) Space
step 1: copy every node and insert; 
step 2: copy random pointers; 
step 3: break the list.
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }
        Node cur = head;
        while (cur != null) {                           // step 1                          
            Node copy = new Node(cur.val);
            copy.next = cur.next;
            cur.next = copy;
            cur = copy.next;
        }
        cur = head;
        while (cur != null) {                           // step 2                        
            if (cur.random != null) {                   // Note: check the random pointer first.
                cur.next.random = cur.random.next;
            }
            cur = cur.next.next;
        }
        Node dummy = new Node(0);
        cur = dummy;
        while (head != null) {                          // step 3  
            cur.next = head.next;
            head.next = head.next.next;
            head = head.next;
            cur = cur.next;
        }
        return dummy.next;
    }
}



Approach 1: using a HashMap. map the old node to copy node.
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }
        Node dummy = new Node(0);
        Map<Node, Node> map = new HashMap<>();
        Node cur1 = head, cur2 = dummy;
        while (cur1 != null) {                          // first loop, the normal linked list.
            Node copy = new Node(cur1.val);
            map.put(cur1, copy);
            cur2.next = copy;
            cur1 = cur1.next;
            cur2 = cur2.next;
        }
        cur1 = head;
        cur2 = dummy;
        while (cur1 != null) {                          // second loop, random pointers.
            cur2.next.random = map.get(cur1.random);
            cur1 = cur1.next;
            cur2 = cur2.next;
        }
        return dummy.next;
    }
}
