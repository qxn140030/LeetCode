A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.
Return a deep copy of the list.

Approach 1: Recursive
Time complexity: O(n)
Space complexity: O(n)

/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;
    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
class Solution {
    Map<Node, Node> visited = new HashMap<>();
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }
        if (visited.containsKey(head)) {
            return visited.get(head);
        }
        Node node = new Node(head.val);      // Create a new node with the value same as old node. (i.e. copy the node)
        // Save old nodes as keys and new nodes as its values in the hash map. This is needed since there might be
        // loops during traversal due to randomness of random pointers and this would help us avoid them.
        visited.put(head, node);    
        node.next = copyRandomList(head.next);
        node.random = copyRandomList(head.random);
        return node;
    }
}

Approach 2: Iterative with O(n) Space
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    Map<Node, Node> visited = new HashMap<>();
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }
        Node oldNode = head, newNode = new Node(oldNode.val);
        visited.put(oldNode, newNode);
        while (oldNode != null) {
            newNode.next = getClonedNode(oldNode.next);
            newNode.random = getClonedNode(oldNode.random);
            oldNode = oldNode.next;
            newNode = newNode.next;
        }
        return visited.get(head);
    }
    private Node getClonedNode(Node node) {
        if (node == null) {
            return null;
        }
        if (!visited.containsKey(node)) {
            visited.put(node, new Node(node.val));
        }
        return visited.get(node);
    }
}

class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }
        Node dummy = new Node(0);
        Map<Node, Node> map = new HashMap<>();
        Node cur1 = head, cur2 = dummy;
        while (cur1 != null) {                          // first loop, the normal linked list.
            Node copy = new Node(cur1.val);
            map.put(cur1, copy);
            cur2.next = copy;
            cur1 = cur1.next;
            cur2 = cur2.next;
        }
        cur1 = head;
        cur2 = dummy.next;
        while (cur1 != null) {                          // second loop, random pointers.
            cur2.random = map.get(cur1.random);
            cur1 = cur1.next;
            cur2 = cur2.next;
        }
        return dummy.next;
    }
}

Approach 3: Iterative with O(1) Space
tweak the original linked list and keep every cloned node next to its original node.
This interleaving of old and new nodes allows us to solve this problem without any extra space.
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }
        Node cur = head;
        while (cur != null) {                           // step 1: copy every node and insert into the original linked list;                          
            Node copy = new Node(cur.val);
            copy.next = cur.next;
            cur.next = copy;
            cur = copy.next;
        }
        cur = head;
        while (cur != null) {                           // step 2: copy random pointers;                        
            if (cur.random != null) {                   // Note: check the random pointer first.
                cur.next.random = cur.random.next;
            }
            cur = cur.next.next;
        }
        Node dummy = new Node(0);
        cur = dummy;
        while (head != null) {                          // step 3: break the list.  
            cur.next = head.next;
            head.next = head.next.next;
            head = head.next;
            cur = cur.next;
        }
        return dummy.next;
    }
}
