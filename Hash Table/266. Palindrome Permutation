Question: Given a string s, return true if a permutation of the string could form a palindrome.

Example 1:
Input: s = "code"
Output: false

Example 2:
Input: s = "aab"
Output: true

Example 3:
Input: s = "carerac"
Output: true

Approach 1: Brute force
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public boolean canPermutePalindrome(String s) {
        int count = 0;
        for (char i = 0; i < 128 && count <= 1; i++) {
            int ct = 0;
            for (int j = 0; j < s.length(); j++) {
                if (s.charAt(j) == i)
                    ct++;
            }
            count += ct % 2;
        }
        return count <= 1;
    }
}

Approach 2: HashMap
Time complexity: O(n)
Space complexity: O(1), the number of distinct characters are bounded.

public class Solution {
    public boolean canPermutePalindrome(String s) {
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }
        boolean flag = false;
        for (int i : map.values()) {
            if (i % 2 == 1) {
                if (flag) {
                    return false;
                }
                flag = true;
            }
        }
        return true;
    }
}

Approach 3: Using Array
Instead of making use of the inbuilt Hashmap.
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public boolean canPermutePalindrome(String s) {
        int[] letters = new int[26];
        for (int i = 0; i < s.length(); i++) {
            letters[s.charAt(i) - 'a']++;
        }
        int count = 0;
        for (int i = 0; i < letters.length && count <= 1; i++) {
            count += letters[i] % 2;
        }
        return count <= 1;
    }
}

Approach 4: Single pass
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public boolean canPermutePalindrome(String s) {
        int[] map = new int[128];
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            map[s.charAt(i)]++;
            if (map[s.charAt(i)] % 2 == 0) {
                count--;
            } else {
                count++;
            }
        }
        return count <= 1;
    }
}

Approach 5: HashSet
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public boolean canPermutePalindrome(String s) {
        Set<Character> hs = new HashSet<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (!hs.contains(c)) {
                hs.add(c);
            } else {
                hs.remove(c);
            }
        }
        return hs.size() <= 1;
    }
}
