Question: Given an integer array nums, return true if any value appears at least twice in the array.

Example 1:
Input: nums = [1,2,3,1]
Output: true

Example 2:
Input: nums = [1,2,3,4]
Output: false

Example 3:
Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true

Approach 1: Naive linear search
Time complexity: O(n^2)
Space complexity: O(1)

public boolean containsDuplicate(int[] nums) {
    for (int i = 0; i < nums.length; ++i) {
        for (int j = 0; j < i; ++j) {
            if (nums[j] == nums[i]) {
                return true;  
            }
        }
    }
    return false;
}
// Time Limit Exceeded

Approach 2: Sort
Time complexity: O(nlogn)
Space complexity: O(1), Space depends on the sorting implementation which, usually, costs O(1) auxiliary space if heapsort is used.

public class Solution {
    public boolean containsDuplicate(int[] nums) {
        if (nums == null || nums.length < 2) {
            return false;
        }
        Arrays.sort(nums);
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                return true;
            }
        }
        return false;
    }
}

Approach 3: Hash Table
Time complexity: O(n)
Space complexity: O(n)

public boolean containsDuplicate(int[] nums) {
    Set<Integer> set = new HashSet<>(nums.length);
    for (int num : nums) {
        if (set.contains(num)) {
            return true;
        }
        set.add(num);
    }
    return false;
}
