You are given a circular array nums and an array queries.

For each query i, you have to find the following:

The minimum distance between the element at index queries[i] and any other index j in the circular array, where nums[j] == nums[queries[i]]. If no such index exists, the answer for that query should be -1.
Return an array answer of the same size as queries, where answer[i] represents the result for query i.

Example 1:
Input: nums = [1,3,1,4,1,3,2], queries = [0,3,5]
Output: [2,-1,3]
Explanation:
Query 0: The element at queries[0] = 0 is nums[0] = 1. The nearest index with the same value is 2, and the distance between them is 2.
Query 1: The element at queries[1] = 3 is nums[3] = 4. No other index contains 4, so the result is -1.
Query 2: The element at queries[2] = 5 is nums[5] = 3. The nearest index with the same value is 1, and the distance between them is 3 (following the circular path: 5 -> 6 -> 0 -> 1).

Example 2:
Input: nums = [1,2,3,4], queries = [0,1,2,3]
Output: [-1,-1,-1,-1]
Explanation:
Each value in nums is unique, so no index shares the same value as the queried element. This results in -1 for all queries.

public List<Integer> solveQueries(int[] nums, int[] queries) {
    int n = nums.length;
    Map<Integer, List<Integer>> map = new HashMap<>();
    for (int i = 0; i < n; i++) {
        map.computeIfAbsent(nums[i], k -> new ArrayList<>()).add(i);
    }
    List<Integer> res = new ArrayList<>();
    for (int q : queries) {
        List<Integer> idxList = map.get(nums[q]);
        if (idxList.size() <= 1) {
            res.add(-1);
            continue;
        }
        // Binary search to find current index's position in the list
        int pos = Collections.binarySearch(idxList, q);
        int best = n; 
        // Check predecessor (wrap around if needed)
        if (pos > 0) {
            best = Math.min(best, q - idxList.get(pos - 1));
        } else {
            best = Math.min(best, q - idxList.get(idxList.size() - 1) + n);
        }
        // Check successor (wrap around)
        if (pos < idxList.size() - 1) {
            best = Math.min(best, idxList.get(pos + 1) - q);
        } else {
            best = Math.min(best, idxList.get(0) + n - q);
        }
        res.add(best);
    }
    return res;
}
