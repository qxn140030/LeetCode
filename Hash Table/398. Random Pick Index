Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that
the given target number must exist in the array.
Note:
The array size can be very large. Solution that uses too much extra space will not pass the judge.
Example:
int[] nums = new int[] {1,2,3,3,3};
Solution solution = new Solution(nums);
// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.
solution.pick(3);
// pick(1) should return 0. Since in the array only nums[0] is equal to 1.
solution.pick(1);

Approach 1: Brute Force
Time complexity: O(n)
Space complexity: O(k)

class Solution {
    int[] nums;
    Random r;
    public Solution(int[] nums) {
        this.nums = nums;
        this.r = new Random();
    }   
    public int pick(int target) {
        List<Integer> list = new ArrayList<Integer>();
        for (int i = 0; i < nums.length; i++) {
            if (target == nums[i]) {
                list.add(i);
            }
        }
        return list.get(r.nextInt(list.size()));
    }
}
/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(nums);
 * int param_1 = obj.pick(target);
 */

Approach 2: Reservoir sampling
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    int[] nums;
    Random rand;
    public Solution(int[] nums) {
        this.nums = nums;
        this.rand = new Random();
    }
    public int pick(int target) {
        int n = nums.length, count = 0, idx = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == target) {
                count++;
                if (rand.nextInt(count) == 0) {    // we pick the current number with probability 1 / count (reservoir sampling)
                    idx = i;
                }
            }
        }
        return idx;
    }
}
