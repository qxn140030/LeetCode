Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path
equals the given sum.
For example: Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

Solution 1: recursive. Time complexity: O(n). Space complexity: O(logn).
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if (root == null) {
            return false;
        }
        if (root.left == null && root.right == null) {
            return sum == root.val;
        }
        return hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);
    }
}

Solution 2: using two queues. Time complexity: O(n). Space complexity: O(n).
public class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if (root == null) {
            return false;
        }
        Queue<TreeNode> q1 = new LinkedList<>();
        Queue<Integer> q2 = new LinkedList<>();
        q1.offer(root);
        q2.offer(root.val);
        while (!q1.isEmpty() && !q2.isEmpty()) {
            root = q1.poll();
            int total = q2.poll();
            if (node.left == null && node.right == null && total == sum) {
                return true;
            }
            if (node.left != null) {
                q1.offer(node.left);
                q2.offer(total + node.left.val);
            }
            if (node.right != null) {
                q1.offer(node.right);
                q2.offer(total + node.right.val);
            }
        }
        return false;
    }
}
