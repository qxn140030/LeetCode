Given a string containing only digits, restore it by returning all possible valid IP address combinations.
For example: Given "25525511135", return ["255.255.11.135", "255.255.111.35"]. (Order does not matter)

Time complexity: exponential. Space complexity: exponential.
public class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> rst = new ArrayList<String>();
        if (s == null || s.length() < 4 || s.length() > 12) {
            return rst;
        }
        List<String> path = new ArrayList<String>();
        dfs(s, rst, path, 0);
        return rst;
    }
    private void dfs(String s, List<String> rst, List<String> path, int pos) {
        if (path.size() == 4) {
            if (pos != s.length()) {
                return;
            }
            StringBuilder sb = new StringBuilder();
            for (String str : path) {
                sb.append(str).append('.');
            }
            sb.deleteCharAt(sb.length() - 1);
            rst.add(sb.toString());
            return;
        }
        for (int i = pos; i < s.length() && i < pos + 3; i++) {
            String sub = s.substring(pos, i + 1);
            if (check(sub)) {
                path.add(sub);
                dfs(s, rst, path, i + 1);
                path.remove(path.size() - 1);
            }
        }
    }
    private boolean check(String s) {
        if (s.charAt(0) == '0') {
            return s.equals("0");             // 001, 010, 03 are not valid.
        }
        int num = Integer.parseInt(s);        // or int num = Integer.valueOf(s);
        return num >= 0 && num <= 255;        // the range of each part is [0, 255].
    }
}
