Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.
An example is the root-to-leaf path 1->2->3 which represents the number 123.
Find the total sum of all root-to-leaf numbers.
For example,
    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Return the sum = 12 + 13 = 25.

Solution 1: recursive. DFS. Time complexity: O(n). Space complexity: O(logn).
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int sumNumbers(TreeNode root) {
        return helper(root, 0);
    }
    private int helper(TreeNode root, int pre) {
        if (root == null) {
            return 0;
        }
        int sum = pre * 10 + root.val;
        if (root.left == null && root.right == null) {
            return sum;
        }
        return helper(root.left, sum) + helper(root.right, sum);
    }
}

Solution 2: BFS. Time complexity: O(n). Space complexity: O(n).
public class Solution {
    public int sumNumbers(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int rst = 0;
        Queue<TreeNode> q1 = new LinkedList<>();
        Queue<Integer> q2 = new LinkedList<>();
        q1.add(root);
        q2.add(root.val);
        while (!q1.isEmpty() && !q2.isEmpty()) {
            root = q1.remove();
            int val = q2.remove();
            if (root.left == null && root.right == null) {
                rst += val;
            }
            if (root.left != null) {
                q1.add(root.left);
                q2.add(val * 10 + root.left.val);
            }
            if (root.right != null) {
                q1.add(root.right);
                q2.add(val * 10 + root.right.val);
            }
        }
        return rst;
    }
}
