You are given an integer n. There is an undirected graph with n nodes, numbered from 0 to n - 1. You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.

Return the number of pairs of different nodes that are unreachable from each other.

Example 1:
Input: n = 3, edges = [[0,1],[0,2],[1,2]]
Output: 0
Explanation: There are no pairs of nodes that are unreachable from each other. Therefore, we return 0.

Example 2:
Input: n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]
Output: 14
Explanation: There are 14 pairs of nodes that are unreachable from each other:
[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].
Therefore, we return 14.

Approach: instead of checking every pair in O(n^2), you can accumulate as you go.

class Solution {
    public long countPairs(int n, int[][] edges) {
        UnionFind uf = new UnionFind(n);
        for (int[] e : edges) {
            uf.union(e[0], e[1]);
        }
        return uf.unreachableCount();
    }
}
class UnionFind {
    int[] parent, size;
    public UnionFind(int n) {
        parent = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }
    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    void union(int x, int y) {
        int rx = find(x), ry = find(y);
        if (rx != ry) {
            if (size[rx] > size[ry]) {
                parent[ry] = rx;
                size[rx] += size[ry];
            } else {
                parent[rx] = ry;
                size[ry] += size[rx];
            }
        }
    }
    long unreachableCount() {
        long total = 0, sum = 0;
        for (int i = 0; i < parent.length; i++) {
            if (parent[i] == i) {
                total += sum * size[i];            // When you see a new component of size s, it forms sum Ã— s new unreachable pairs
                sum += size[i];                    // Keep a running total of all component sizes seen so far
            }
        }
        return total;
    }
}
