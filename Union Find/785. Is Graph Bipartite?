There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. 
More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:
- There are no self-edges (graph[u] does not contain u).
- There are no parallel edges (graph[u] does not contain duplicate values).
- If v is in graph[u], then u is in graph[v] (the graph is undirected).
- The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.
A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.
Return true if and only if it is bipartite.

Example 1:
Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
Output: false
Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.

Example 2:
Input: graph = [[1,3],[0,2],[1,3],[0,2]]
Output: true
Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.

Approach 1: Union-Find
Time complexity: O(V + E)
Space complexity: O(V + E)

class DSU {
    int[] parent;
    int[] rank;
    public DSU(int size) {
        parent = new int[size];
        rank = new int[size];
        for (int i = 0; i < size; i++) {
            parent[i] = i;
        }
    }
    public int find(int x) {
        while (parent[x] != x) {
            parent[x] = parent[parent[x]];
            x = parent[x];
        }
        return x;
    }
    public void union(int x, int y) {
        int px = find(x), py = find(y);
        int rx = rank[x], ry = rank[y];
        if (rx == ry) {
            parent[py] = px;
            rank[px]++;
        } else if (rx > ry) {
            parent[py] = px;
        } else {
            parent[px] = py;
        }
    }
}
class Solution {
    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        DSU dsu = new DSU(n);
        for (int i = 0; i < n; i++) {
            for (int neighbor : graph[i]) {
                if (dsu.find(i) == dsu.find(neighbor)) {
                    return false;
                }
                dsu.union(neighbor, graph[i][0]);
            }
        }
        return true;
    }
}

Approach 2: Coloring by DFS
Time complexity: O(V + E)
Space complexity: O(V)

class Solution {
    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        int[] color = new int[n];
        Arrays.fill(color, -1);
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            if (color[i] == -1) {
                stack.push(i);
                color[i] = 0;
                while (!stack.isEmpty()) {
                    int node = stack.pop();
                    for (int neighbor: graph[node]) {
                        if (color[neighbor] == color[node]) {
                            return false;
                        }
                        if (color[neighbor] == -1) {
                            stack.push(neighbor);
                            color[neighbor] = 1 - color[node];
                        } 
                    }
                }
            }
            stack.clear();
        }
        return true;
    }
}
