A 2d grid map of m rows and n columns is initially filled with water. We may perform an addLand operation which turns the water
at position (row, col) into a land. Given a list of positions to operate, count the number of islands after each addLand operation.
An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four
edges of the grid are all surrounded by water.
Example:
Given m = 3, n = 3, positions = [[0,0], [0,1], [1,2], [2,1]].
Initially, the 2d grid grid is filled with water. (Assume 0 represents water and 1 represents land).
0 0 0
0 0 0
0 0 0
Operation #1: addLand(0, 0) turns the water at grid[0][0] into a land.
1 0 0
0 0 0   Number of islands = 1
0 0 0
Operation #2: addLand(0, 1) turns the water at grid[0][1] into a land.
1 1 0
0 0 0   Number of islands = 1
0 0 0
Operation #3: addLand(1, 2) turns the water at grid[1][2] into a land.
1 1 0
0 0 1   Number of islands = 2
0 0 0
Operation #4: addLand(2, 1) turns the water at grid[2][1] into a land.
1 1 0
0 0 1   Number of islands = 3
0 1 0
We return the result as an array: [1, 1, 2, 3]
Challenge:
Can you do it in time complexity O(k log mn), where k is the length of the positions?

Appraoch 1: union-find
Time complexity: O(1)
Space complexity: O(n)

class Solution {
    public List<Integer> numIslands2(int m, int n, int[][] positions) {
        int[][] dir = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        UnionFind dsu = new UnionFind(m * n);
        List<Integer> rst = new ArrayList<>();
        for (int[] p : positions) {
            int land = p[0] * n + p[1];
            dsu.addLand(land);
            for (int[] d : dir) {
                int rowX = p[0] + d[0], rowY = p[1] + d[1];
                if (rowX >= 0 && rowX < m && rowY >= 0 && rowY < n) {
                    int neighbor = rowX * n + rowY;
                    if (dsu.isLand(neighbor)) {
                        dsu.union(land, neighbor);
                    }
                }
            }
            rst.add(dsu.islandsCount());
        }
        return rst;
    }
}
class UnionFind {
    int[] parent, size;
    int count;
    public UnionFind(int n) {
        parent = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = -1;
            size[i] = 1;
        }
    }
    public int find(int x) {
        while (parent[x] != x) {
            parent[x] = parent[parent[x]];
            x = parent[x];
        }
        return x;
    }
    public void union(int x, int y) {
        int xRoot = find(x), yRoot = find(y);
        if (xRoot != yRoot) {
            if (size[xRoot] < size[yRoot]) {
                parent[xRoot] = yRoot;
                size[yRoot] += size[xRoot];
            } else {
                parent[yRoot] = xRoot;
                size[xRoot] += size[yRoot];
            }
            count--;
        }
    }
    public void addLand(int x) {
        if (parent[x] < 0) {
            parent[x] = x;
            count++;
        }
    }
    public boolean isLand(int x) {
        return parent[x] >= 0;
    }
    int islandsCount() {
        return count;
    }
}
