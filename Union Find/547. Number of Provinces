There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.
A province is a group of directly or indirectly connected cities and no other cities outside of the group.
You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.
Return the total number of provinces.
Example 1:
            1 -- 2    3
Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2

Example 2:
            1    2    3
Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3

Approach 1: Union-find
Time complexity: O(n^2)
Space complexity: O(n)

class Solution {
    class DSU {
        int[] parent, rank;
        public DSU(int size) {
            parent = new int[size + 1];
            rank = new int[size + 1];
            for (int i = 1; i <= size; i++) {
                parent[i] = i;
            }
        }
        public int find(int x) {
            while (parent[x] != x) {
                parent[x] = parent[parent[x]];
                x = parent[x];
            }
            return x;
        } 
        public void union(int x, int y) {
            int px = find(x), py = find(y);
            if (px != py) {
                int rx = rank[px], ry = rank[py];
                if (rx == ry) {
                    parent[px] = py;
                    rank[py]++;
                } else if (rx > ry) {
                    parent[py] = px;
                } else {
                    parent[px] = py;
                }
            }
        }
    }
    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length, cnt = n;
        DSU dsu = new DSU(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isConnected[i][j] == 1 && dsu.find(i) != dsu.find(j)) {
                    dsu.union(i, j);
                    cnt--;
                }
            }
        }
        return cnt;
    }
}
