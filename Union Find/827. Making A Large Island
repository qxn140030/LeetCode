You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.
Return the size of the largest island in grid after applying this operation.
An island is a 4-directionally connected group of 1s.

Example 1:
Input: grid = [[1,0],[0,1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.

Example 2:
Input: grid = [[1,1],[1,0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.

Example 3:
Input: grid = [[1,1],[1,1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.

class Solution {
    public int largestIsland(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        DSU dsu = new DSU(m * n);
        int[][] dir = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        for (int i = 0; i < m; i++) {                      // Step 1: Union all connected 1s
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    int cur = i * n + j;
                    for (int[] d : dir) {
                        int r = i + d[0], c = j + d[1];
                        if (r >= 0 && r < m && c >= 0 && c < n && grid[r][c] == 1) {
                            int next = r * n + c;
                            dsu.union(cur, next);
                        }
                    }
                }
            }
        }
        int maxSize = 0;                         // Step 2: Try changing each 0 to 1 and calculate max island size
        boolean hasZero = false;
        Set<Integer> uniqueRoots = new HashSet<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    hasZero = true;
                    int curSize = 1;
                    for (int[] d : dir) {
                        int r = i + d[0], c = j + d[1];
                        if (r >= 0 && r < m && nj >= 0 && c < n && grid[r][c] == 1) {
                            int root = dsu.find(r * n + c);
                            if (uniqueRoots.add(root)) {
                                curSize += dsu.size[root];
                            }
                        }
                    }
                    uniqueRoots.clear();
                    maxSize = Math.max(maxSize, curSize);
                }
            }
        }
        return !hasZero ? m * n : maxSize;
    }
}
class DSU {
    int[] parent, size;
    public DSU(int n) {
        parent = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }
    public int find(int x) {
        while (parent[x] != x) {
            parent[x] = parent[parent[x]];
            x = parent[x];
        }
        return x;
    }
    public void union(int x, int y) {
        int rootX = find(x), rootY = find(y);
        if (rootX != rootY) {
            if (size[rootX] < size[rootY]) {
                parent[rootX] = rootY;
                size[rootY] += size[rootX];
            } else {
                parent[rootY] = rootX;
                size[rootX] += size[rootY];
            }
        }
    }
}
