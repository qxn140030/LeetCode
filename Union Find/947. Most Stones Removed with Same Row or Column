On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.
A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.
Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.
Example 1:
Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
Output: 5
Explanation: One way to remove 5 stones is as follows:
1. Remove stone [2,2] because it shares the same row as [2,1].
2. Remove stone [2,1] because it shares the same column as [0,1].
3. Remove stone [1,2] because it shares the same row as [1,0].
4. Remove stone [1,0] because it shares the same column as [0,0].
5. Remove stone [0,1] because it shares the same row as [0,0].
Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.

Example 2:
Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]
Output: 3
Explanation: One way to make 3 moves is as follows:
1. Remove stone [2,2] because it shares the same row as [2,0].
2. Remove stone [2,0] because it shares the same column as [0,0].
3. Remove stone [0,2] because it shares the same row as [0,0].
Stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.

Example 3:
Input: stones = [[0,0]]
Output: 0
Explanation: [0,0] is the only stone on the plane, so you cannot remove it.

Approach 1: DFS
Time complexity: O(V^2 + E)
Space complexity: O(V + E)

class Solution {
    public int removeStones(int[][] stones) {
        int n = stones.length;
        List<Integer>[] adj = new ArrayList[n]; 
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (shareSameRowOrColumn(stones[i], stones[j])) {
                    adj[i].add(j);
                    adj[j].add(i);
                }
            }
        }
        boolean[] visited = new boolean[n];
        int componentCount = 0;
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                componentCount++;
                dfs(stones, adj, visited, i);
            }
        }
        return n - componentCount;
    }
    private void dfs(int[][] stones, List<Integer>[] adj, boolean[] visited, int src) {
        visited[src] = true;
        for (int adjacent : adj[src]) {
            if (!visited[adjacent]) {
                dfs(stones, adj, visited, adjacent);
            }
        }
    }
    private boolean shareSameRowOrColumn(int[] a, int[] b) {
        return a[0] == b[0] || a[1] == b[1];
    }
}

Approach 2: Disjoint Set Union (DSU)
Time complexity: O(V^2)
Space complexity: O(V)

class Solution {
    public int removeStones(int[][] stones) {
        int n = stones.length;
        int[] rep = new int[n];
        int[] size = new int[n];
        for (int i = 0; i < stones.length; i++) {
            rep[i] = i;
            size[i] = 1;
        }
        int componentCount = n;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (shareSameRowOrColumn(stones[i], stones[j])) {
                    componentCount -= performUnion(rep, size, i, j);
                }
            }
        }
        return n - componentCount;
    }
    private int find(int[] rep, int x) {
        while (rep[x] != x) {
            rep[x] = rep[rep[x]];
            x = rep[x];
        }
        return x;
    }
    private int performUnion(int[] rep, int[] size, int x, int y) {
        x = find(rep, x);
        y = find(rep, y);
        if (x == y) {
            return 0;
        } 
        if (size[x] > size[y]) {
            rep[y] = x;
            size[x] += size[y];
        } else {
            rep[x] = y;
            size[y] += size[x];
        }
        return 1;
    }
    private boolean shareSameRowOrColumn(int[] a, int[] b) {
        return a[0] == b[0] || a[1] == b[1];
    }
}
