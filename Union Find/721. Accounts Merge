Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.
Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. 
Note that even if two accounts have the same name, they may belong to different people as people could have the same name. 
A person can have any number of accounts initially, but all of their accounts definitely have the same name.
After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. 
The accounts themselves can be returned in any order.
Example 1:
Input: accounts = [["John","johnsmith@mail.com","john_newyork@mail.com"],["John","johnsmith@mail.com","john00@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]
Output: [["John","john00@mail.com","john_newyork@mail.com","johnsmith@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]
Explanation:
The first and second John's are the same person as they have the common email "johnsmith@mail.com".
The third John and Mary are different people as none of their email addresses are used by other accounts.
We could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], 
['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.

Example 2:
Input: accounts = [["Gabe","Gabe0@m.co","Gabe3@m.co","Gabe1@m.co"],["Kevin","Kevin3@m.co","Kevin5@m.co","Kevin0@m.co"],["Ethan","Ethan5@m.co","Ethan4@m.co","Ethan0@m.co"],
                   ["Hanzo","Hanzo3@m.co","Hanzo1@m.co","Hanzo0@m.co"],["Fern","Fern5@m.co","Fern1@m.co","Fern0@m.co"]]
Output: [["Ethan","Ethan0@m.co","Ethan4@m.co","Ethan5@m.co"],["Gabe","Gabe0@m.co","Gabe1@m.co","Gabe3@m.co"],["Hanzo","Hanzo0@m.co","Hanzo1@m.co","Hanzo3@m.co"],
         ["Kevin","Kevin0@m.co","Kevin3@m.co","Kevin5@m.co"],["Fern","Fern0@m.co","Fern1@m.co","Fern5@m.co"]]

Approach 1: DFS
represent emails as nodes, and an edge will signify that two emails are connected and hence belong to the same person.
Initially, we are given n accounts, where each account's emails make up a connected component.
Suppose an account has k emails, we can create an acyclic graph using only k - 1 edges, with the first email as the internal node of the star and all other emails as the leaves.
Time complexity: O(nklog(nk)), n is the number of accounts and k is the maximum length of an account.
In the worst case, all the emails will end up belonging to a single person. The total number of emails will be n * k, 
and we need to sort these emails. DFS traversal will take n * k operations as no email will be traversed more than once.
Space complexity: O(nk), Building the adjacency list will take O(nk) space.

class Solution {
    Set<String> visited = new HashSet<>();
    Map<String, List<String>> adj = new HashMap<>();
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        buildGraph(accounts);
        List<List<String>> rst = new ArrayList<>();
        for (List<String> account : accounts) {
            String name = account.get(0);
            String firstEmail = account.get(1);
            if (!visited.contains(firstEmail)) {
                List<String> merged = new ArrayList<>();
                merged.add(name);
                dfs(merged, firstEmail);
                Collections.sort(merged.subList(1, merged.size()));
                rst.add(merged);
            }
        }
        return rst;
    }
    private void dfs(List<String> merged, String email) {
        visited.add(email);
        merged.add(email);
        if (!adj.containsKey(email)) {
            return;
        }
        for (String neighbor : adj.get(email)) {
            if (!visited.contains(neighbor)) {
                dfs(merged, neighbor);
            }
        }
    }
    private void buildGraph(List<List<String>> accounts) {
        for (List<String> account : accounts) {
            String firstEmail = account.get(1);
            for (int i = 2; i < account.size(); i++) {
                String email = account.get(i);
                if (!adj.containsKey(firstEmail)) {
                    adj.put(firstEmail, new ArrayList<>());
                }
                adj.get(firstEmail).add(email);
                if (!adj.containsKey(email)) {
                    adj.put(email, new ArrayList<>());
                }
                adj.get(email).add(firstEmail);
            }
        }
    }
}
