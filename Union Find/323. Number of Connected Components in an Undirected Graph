You have a graph of n nodes. You are given an integer n and an array edges where edges[i] = [ai, bi] indicates that there is an edge between ai and bi in the graph.
Return the number of connected components in the graph.
Example 1:
           0 -- 1    3
                |    |
                2    4
Input: n = 5, edges = [[0,1],[1,2],[3,4]]
Output: 2

Example 2:
           0 -- 1     3
                |  /  |
                2     4
Input: n = 5, edges = [[0,1],[1,2],[2,3],[3,4]]
Output: 1

Approach 1: DFS
Time complexity: O(V + E)
Building the adjacency list will take O(E) operations, as we iterate over the list of edges once, and insert each edge into two lists.
During the DFS traversal, each vertex will only be visited once. In addition, when we iterate over the edge list of each vertex, we look at each edge once. 
Space complexity: O(V + E)
Building the adjacency list will take O(E) space. To keep track of visited vertices, an array of size O(V) is required. Also, the run-time stack for DFS will use O(V) space.

class Solution {
    public int countComponents(int n, int[][] edges) {
        List<List<Integer>> adj = new ArrayList<>(); 
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] e : edges) {
            adj.get(e[0]).add(e[1]);
            adj.get(e[1]).add(e[0]);
        }
        boolean[] visited = new boolean[n];
        int components = 0;
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                components++;
                dfs(adj, visited, i);
            }
        }
        return components;
    }
    private void dfs(List<List<Integer>> adj, boolean[] visited, int start) {
        visited[start] = true;
        for (int i = 0; i < adj.get(start).size(); i++) {
            if (!visited[adj.get(start).get(i)]) {
                dfs(adj, visited, adj.get(start).get(i));
            }
        }
    }
}

Approach 2: BFS
Time complexity: O(V + E)
Space complexity: O(V + E)

class Solution {
    public int countComponents(int n, int[][] edges) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }  
        for (int[] e : edges) {
            adj.get(e[0]).add(e[1]);
            adj.get(e[1]).add(e[0]);
        }
        boolean[] visit = new boolean[n];
        Queue<Integer> q = new LinkedList<>();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (!visit[i]) {
                cnt++;
                q.offer(i);
                visit[i] = true;
                while (!q.isEmpty()) {
                    int cur = q.poll();
                    for (int next : adj.get(cur)) {
                        if (!visit[next]) {
                            q.offer(next);
                            visit[next] = true;
                        }
                    }
                }
            }
        }
        return cnt;
    }
}

Approach 3: Union-find
Initially, there are n nodes. The nodes that are involved in each edge is merged.
There are k loops and each loop processing the root array costs log(n). 
time complexity is O(V + E)
Space complexity: O(V)

class DSU {
    int[] parent;
    int[] size;
    public DSU(int n) {
        parent = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }
    public int find(int x) {
        while (parent[x] != x) {
            parent[x] = parent[parent[x]];
            x = parent[x];
        }
        return x;
    }
    public int union(int x, int y) {
        int px = find(x), py = find(y);
        if (px == py) {
            return 0;
        }
        if (size[px] > size[py]) {
            parent[py] = px;
            size[px] += size[py];
        } else {
            parent[px] = py;
            size[py] += size[px];
        }
        return 1;
    }
}
class Solution {
    public int countComponents(int n, int[][] edges) {
        DSU dsu = new DSU(n);
        int components = n;
        for (int[] e : edges) {
            components -= dsu.union(e[0], e[1]);
        }
        return components;
    }
}

class Solution {
    public int countComponents(int n, int[][] edges) {
        int count = n;  
        int[] root = new int[n];
        for (int i = 0; i < n; i++) {
            root[i] = i;        
        } 
        for (int[] e : edges) {
            int x = e[0], y = e[1]; 
            int xRoot = getRoot(root, x);
            int yRoot = getRoot(root, y); 
            if (xRoot != yRoot) {
                count--;
                root[xRoot] = yRoot;
            } 
        }
        return count;
    }
    public int getRoot(int[] arr, int i) {
        while (arr[i] != i) {
            arr[i] = arr[arr[i]];
            i = arr[i];
        }
        return i;
    }
}
