We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.
Given the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.
Example 1:
Input: n = 4, dislikes = [[1,2],[1,3],[2,4]]
Output: true
Explanation: The first group has [1,4], and the second group has [2,3].

Example 2:
Input: n = 3, dislikes = [[1,2],[1,3],[2,3]]
Output: false
Explanation: We need at least 3 groups to divide them. We cannot put them in two groups.

Approach 1: BFS
Time complexity: O(V + E)
Space complexity: O(V + E)

class Solution {
    Map<Integer, List<Integer>> adj = new HashMap<>();
    public boolean possibleBipartition(int n, int[][] dislikes) {
        for (int[] e : dislikes) {
            adj.putIfAbsent(e[0], new ArrayList<>());
            adj.get(e[0]).add(e[1]);
            adj.putIfAbsent(e[1], new ArrayList<>());
            adj.get(e[1]).add(e[0]);
        }
        int[] color = new int[n + 1];
        Arrays.fill(color, -1); // 0 stands for red and 1 stands for blue.
        for (int i = 1; i <= n; i++) {
            if (color[i] == -1 && !bfs(i, color)) {
                return false;
            }
        }
        return true;
    }
    private boolean bfs(int source, int[] color) {
        Queue<Integer> q = new LinkedList<>();
        q.offer(source);
        color[source] = 0; // Start with marking source as `RED`.
        while (!q.isEmpty()) {
            int cur = q.poll();
            if (adj.containsKey(cur)) {
                for (int neighbor : adj.get(cur)) {
                    if (color[neighbor] == color[cur]) {
                        return false;
                    }
                    if (color[neighbor] == -1) {
                        color[neighbor] = 1 - color[cur];
                        q.add(neighbor);
                    }
                }
            }
        }
        return true;
    }
}

Approach 2: DFS
Time complexity: O(V + E)
Space complexity: O(V + E)

class Solution {
    Map<Integer, List<Integer>> adj = new HashMap<>();
    public boolean possibleBipartition(int n, int[][] dislikes) {
        for (int[] e : dislikes) {
            adj.putIfAbsent(e[0], new ArrayList<>());
            adj.get(e[0]).add(e[1]);
            adj.putIfAbsent(e[1], new ArrayList<>());
            adj.get(e[1]).add(e[0]);
        }
        int[] color = new int[n + 1];
        Arrays.fill(color, -1); // 0 stands for red and 1 stands for blue.
        for (int i = 1; i <= n; i++) {
            if (color[i] == -1 && !dfs(i, 0, color)) {
                return false;
            }
        }
        return true;
    }
    private boolean dfs(int source, int nodeColor, int[] color) {
        color[source] = nodeColor;
        if (adj.containsKey(source)) {
            for (int neighbor : adj.get(source)) {
                if (color[neighbor] == color[source]) {
                    return false;
                }
                if (color[neighbor] == -1 && !dfs(neighbor, 1 - nodeColor, color)) {
                    return false;
                }
            }
        }
        return true;
    }
}

Approach 3: Union-Find
place the people that do not like each other into two different sets.
Time complexity: O(V + E)
Space complexity: O(V + E)

class DSU {
    int[] parent;
    int[] rank;
    public DSU(int size) {
        this.parent = new int[size];
        this.rank = new int[size];
        for (int i = 0; i < size; i++) {
            parent[i] = i;
        }
    }
    public int find(int x) {
        while (parent[x] != x) {
            parent[x] = parent[parent[x]];
            x = parent[x];
        }
        return x;
    }
    public void union(int x, int y) {
        int px = find(x), py = find(y);
        int rx = rank[px], ry = rank[py];
        if (rx == ry) {
            parent[py] = px;
            rank[px]++;
        } else if (rx > ry) {
            parent[py] = px;
        } else {
            parent[px] = py;
        }
    }
}
class Solution {
    public boolean possibleBipartition(int n, int[][] dislikes) {
        Map<Integer, List<Integer>> adj = new HashMap<>();
        for (int[] e : dislikes) {
            adj.putIfAbsent(e[0], new ArrayList<>());
            adj.get(e[0]).add(e[1]);
            adj.putIfAbsent(e[1], new ArrayList<>());
            adj.get(e[1]).add(e[0]);
        }
        DSU dsu = new DSU(n + 1);
        for (int i = 1; i <= n; i++) {
            if (adj.containsKey(i)) {
                for (int neighbor : adj.get(i)) {
                    if (dsu.find(i) == dsu.find(neighbor)) {     // if the node and its neighbor is in the same set, return false.
                        return false;
                    }
                    dsu.union(adj.get(i).get(0), neighbor);      // Move all the neighbours into same set as the first neighbour.
                }
            }
        }
        return true;
    }
}
