You are given an m x n grid grid of values 0, 1, or 2, where:
each 0 marks an empty land that you can pass by freely,
each 1 marks a building that you cannot pass through, and
each 2 marks an obstacle that you cannot pass through.
You want to build a house on an empty land that reaches all buildings in the shortest total travel distance. You can only move up, down, left, and right.

Return the shortest travel distance for such a house. If it is not possible to build such a house according to the above rules, return -1.

The total travel distance is the sum of the distances between the houses of the friends and the meeting point.

Example 1:
Input: grid = [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]
Output: 7
Explanation: Given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2).
The point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal.
So return 7.

Example 2:
Input: grid = [[1,0]]
Output: 1

Example 3:
Input: grid = [[1]]
Output: -1

Approach 1: BFS from Houses to Empty Land
Time Complexity: O(m^2 * n^2)
Space Complexity: O(m * n)

public int shortestDistance(int[][] grid) {
    int m = grid.length, n = grid[0].length;
    int totalHouses = 0, minDistance = Integer.MAX_VALUE;
    int[][][] distances = new int[m][n][2];               // Store { total_dist, houses_count } for each cell
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (grid[i][j] == 1) {                       // Count houses and start bfs from each house
                totalHouses++;
                bfs(grid, distances, i, j);
            }
        }
    }
    for (int i = 0; i < m; i++) {                       // Check all empty lands with houses count equal to total houses and find the min ans
        for (int j = 0; j < n; j++) {
            if (distances[i][j][1] == totalHouses) {  
                minDistance = Math.min(minDistance, distances[i][j][0]);
            }
        }
    }
    if (minDistance == Integer.MAX_VALUE) {            // If we haven't found a valid cell return -1
        return -1;
    }
    return minDistance;
}
void bfs(int[][] grid, int[][][] distances, int row, int col) {
    int dirs[][] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    int m = grid.length, n = grid[0].length;
    Queue<int[]> q = new LinkedList<>();
    q.offer(new int[]{ row, col });
    boolean[][] visited = new boolean[m][n];
    visited[row][col] = true;
    int steps = 0;
    while (!q.isEmpty()) {
        int size = q.size();
        for (int i = size; i > 0; i--) {
            int[] curr = q.poll();
            row = curr[0];
            col = curr[1];
            if (grid[row][col] == 0) {               // If we reached an empty cell,
                distances[row][col][0] += steps;     // then add the distance
                distances[row][col][1]++;            // and increment the count of houses reached at this cell
            }
            for (int[] dir : dirs) {                                  // Traverse the next cells which is not a blockage
                int nextRow = row + dir[0], nextCol = col + dir[1];
                if (nextRow >= 0 && nextCol >= 0 && nextRow < m && nextCol < n) {
                    if (!visited[nextRow][nextCol] && grid[nextRow][nextCol] == 0) {
                        visited[nextRow][nextCol] = true;
                        q.offer(new int[]{ nextRow, nextCol });
                    }
                }
            }
        }
        steps++;
    }
}
