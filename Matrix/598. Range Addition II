You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.
Count and return the number of maximum integers in the matrix after performing all the operations.
Example 1:
0  0  0            1  1  0            2  2  1
0  0  0     ->     1  1  0     ->     2  2  1
0  0  0            0  0  0            1  1  1
Input: m = 3, n = 3, ops = [[2,2],[3,3]]
Output: 4
Explanation: The maximum integer in M is 2, and there are four of it in M. So return 4.
Example 2:

Input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]
Output: 4
Example 3:

Input: m = 3, n = 3, ops = []
Output: 9

Approach 1: Brute Force (Memory Limit Exceed)
Time complexity : O(x * m * n), x is the length of op.
Space complexity : O(m * n)

class Solution {
    public int maxCount(int m, int n, int[][] ops) {
        int[][] matrix = new int[m][n];
        for (int[] op : ops) {
            for (int i = 0; i < op[0]; i++) {
                for (int j = 0; j < op[1]; j++) {
                    matrix[i][j]++;
                }
            }
        }
        int cnt = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == matrix[0][0]) {
                    cnt++;
                }
            }
        }
        return cnt;
    }
}

Approach 2: Single Pass
the maximum elements will be the ones which lie in the intersection region of the rectangles representing the operations.
Time complexity : O(x)
Space complexity : O(1)

class Solution {
    public int maxCount(int m, int n, int[][] ops) {
        for (int[] op : ops) {
            m = Math.min(m, op[0]);
            n = Math.min(n, op[1]);
        }
        return m * n;
    }
}
