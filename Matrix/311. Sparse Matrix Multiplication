Given two sparse matrices A and B, return the result of AB.
You may assume that A's column number is equal to B's row number.
Example:
A = [
  [ 1, 0, 0],
  [-1, 0, 3]
]
B = [
  [ 7, 0, 0 ],
  [ 0, 0, 0 ],
  [ 0, 0, 1 ]
]
     |  1 0 0 |   | 7 0 0 |   |  7 0 0 |
AB = | -1 0 3 | x | 0 0 0 | = | -7 0 3 |
                  | 0 0 1 |

Approach 1: Naive Iteration
Time complexity: O(m * k * n), Let m and k represent the number of rows and columns in mat1, respectively. Likewise, let k and n represent the number of rows and columns in mat2, respectively.
Space complexity: O(1)

class Solution {
    public int[][] multiply(int[][] mat1, int[][] mat2) {
        int m = mat1.length, k = mat1[0].length, n = mat2[0].length;
        int[][] ans = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < k; j++) {
                if (mat1[i][j] != 0)  {
                    for (int c = 0; c < n; c++) {
                        ans[i][c] += mat1[i][j] * mat2[j][c];
                    }
                }
            }
        }
        return ans;
    }
}

A sparse matrix can be represented as a sequence of rows, each of which is a sequence of (column-number, value) pairs of the
nonzero values in the row.

class Solution {
    public int[][] multiply(int[][] mat1, int[][] mat2) {
        int m = mat1.length, k = mat1[0].length, n = mat2[0].length;
        int[][] ans = new int[m][n];
        Map<Integer, Map<Integer, Integer>> map = new HashMap<>();
        for (int i = 0; i < k; i++) {
            map.put(i, new HashMap<>());
            for (int j = 0; j < n; j++) {
                if (mat2[i][j] != 0) {
                    map.get(i).put(j, mat2[i][j]);
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int c = 0; c < k; c++) {
                if (mat1[i][c] != 0) {
                    for (int j : map.get(c).keySet()) {
                        ans[i][j] += mat1[i][c] * map.get(c).get(j);
                    }
                }
            }
        }
        return ans;
    }
}
