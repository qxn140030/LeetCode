Given two sparse matrices A and B, return the result of AB.
You may assume that A's column number is equal to B's row number.
Example:
A = [
  [ 1, 0, 0],
  [-1, 0, 3]
]
B = [
  [ 7, 0, 0 ],
  [ 0, 0, 0 ],
  [ 0, 0, 1 ]
]
     |  1 0 0 |   | 7 0 0 |   |  7 0 0 |
AB = | -1 0 3 | x | 0 0 0 | = | -7 0 3 |
                  | 0 0 1 |

public class Solution {
    public int[][] multiply(int[][] A, int[][] B) {
        int m = A.length, n = A[0].length, n2 = B[0].length;
        int[][] rst = new int[m][n2];
        for (int i = 0; i < m; i++) {
            for (int k = 0; k < n; k++) {
                if (A[i][k] == 0) {
                    continue;
                }
                for (int j = 0; j < n2; j++) {
                    rst[i][j] += A[i][k] * B[k][j];
                }
            }
        }
        return rst;
    }
}

A sparse matrix can be represented as a sequence of rows, each of which is a sequence of (column-number, value) pairs of the
nonzero values in the row.
public class Solution {
    public int[][] multiply(int[][] A, int[][] B) {
        int m = A.length, l = A[0].length, n = B[0].length;
        int[][] C = new int[m][n];
        Map<Integer, Map<Integer, Integer>> tableB = new HashMap<>();
        for (int k = 0; k < l; k++) {
            tableB.put(k, new HashMap<>());
            for (int j = 0; j < n; j++) {
                if (B[k][j] != 0) {
                    tableB.get(k).put(j, B[k][j]);
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int k = 0; k < l; k++) {
                if (A[i][k] != 0) {
                    for (int j : tableB.get(k).keySet()) {
                        C[i][j] += A[i][k] * tableB.get(k).get(j);
                    }
                }
            }
        }
        return C;
    }
}
