Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
For example, Consider the following matrix:
[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true. Given target = 20, return false.

Approach 1: Brute Force
Time complexity: O(m * n)
Space complexity: O(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] == target) {
                    return true;
                }
            }
        }
        return false;
    }
}

Approach 2: Binary Search
Time complexity: O(log(n!))
O(log(n)+log(n−1)+log(n−2)+…+log(1)), log(a)+log(b)=log(ab)
Space complexity: O(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        // an empty matrix obviously does not contain `target`
        if (matrix == null || matrix.length == 0) {
            return false;
        }
        // iterate over matrix diagonals
        int shorterDim = Math.min(matrix.length, matrix[0].length);
        for (int i = 0; i < shorterDim; i++) {
            boolean verticalFound = binarySearch(matrix, target, i, true);
            boolean horizontalFound = binarySearch(matrix, target, i, false);
            if (verticalFound || horizontalFound) {
                return true;
            }
        }
        return false; 
    }
    private boolean binarySearch(int[][] matrix, int target, int start, boolean vertical) {
        int lo = start;
        int hi = vertical ? matrix[0].length-1 : matrix.length-1;
        while (hi >= lo) {
            int mid = (lo + hi)/2;
            if (vertical) {                               // searching a column
                if (matrix[start][mid] < target) {
                    lo = mid + 1;
                } else if (matrix[start][mid] > target) {
                    hi = mid - 1;
                } else {
                    return true;
                }
            } else {                                      // searching a row
                if (matrix[mid][start] < target) {
                    lo = mid + 1;
                } else if (matrix[mid][start] > target) {
                    hi = mid - 1;
                } else {
                    return true;
                }
            }
        }
        return false;
    }
}

Approach 3: Divide and Conquer
Time complexity: O(nlogn)
Space complexity: O(logn)

class Solution {
    private int[][] m;
    private int t;
    public boolean searchMatrix(int[][] matrix, int target) {
        // cache input values in object to avoid passing them unnecessarily to `searchRec`
        m = matrix;
        t = target;
        // an empty matrix obviously does not contain `target`
        if (m == null || m.length == 0) {
            return false;
        }
        return searchRec(0, 0, m[0].length - 1, m.length - 1);
    }
    private boolean searchRec(int left, int up, int right, int down) {
        // this submatrix has no height or no width.
        if (left > right || up > down) {
            return false;
        // `target` is already larger than the largest element or smaller
        // than the smallest element in this submatrix.
        } else if (t < m[up][left] || t > m[down][right]) {
            return false;
        }
        int mid = left + (right - left) / 2;
        // Locate `row` such that matrix[row-1][mid] < target < matrix[row][mid]
        int row = up;
        while (row <= down && m[row][mid] <= t) {
            if (m[row][mid] == t) {
                return true;
            }
            row++;
        }
        return searchRec(left, row, mid - 1, down) || searchRec(mid + 1, up, right, row - 1);
    }
}

Approach 4: Search Space Reduction
Time complexity: O(m + n)
Space complexity: O(1)

public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length, n = matrix[0].length;
        int col = 0, row = m - 1;
        while (row >= 0 && col < n) {
            if (matrix[row][col] == target) {
                return true;
            } else if (matrix[row][col] > target) {
                row--;
            } else {
                col++;
            }
        }
        return false;
    }
}
