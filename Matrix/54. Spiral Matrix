Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.
For example, Given the following matrix:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
You should return [1,2,3,6,9,8,7,4,5].

Approach 1: Set Up Boundaries
Time complexity: O(m * n)
Space complexity: O(1)

public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> rst = new ArrayList<>();
        int m = matrix.length, n = matrix[0].length;
        int left = 0, top = 0, right = n - 1, bottom = m - 1;
        while (rst.size() < m * n) {
            for (int i = left; i <= right; i++) {
                rst.add(matrix[top][i]);
            }
            top++;
            if (top > bottom) {
                break;
            }
            for (int i = top; i <= bottom; i++) {
                rst.add(matrix[i][right]);
            }
            right--;
            if (left > right) {
                break;
            }
            for (int i = right; i >= left; i--) {
                rst.add(matrix[bottom][i]);
            }
            bottom--;
            for (int i = bottom; i >= top; i--) {
                rst.add(matrix[i][left]);
            }
            left++;
        }
        return rst;
    }
}

Approach 2: Mark Visited Elements
Time complexity: O(m * n)
Space complexity: O(1)

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        // constraint: -100 <= matrix[i][j] <= 100
        int VISITED = 101;
        int rows = matrix.length, columns = matrix[0].length;
        // Four directions that we will move: right, down, left, up.
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        // Initial direction: moving right.
        int curDirection = 0;
        // The number of times we change the direction.
        int changeDirection = 0;
        // Current place that we are at is (row, col).
        // row is the row index; col is the column index.
        int row = 0, col = 0;
        // Store the first element and mark it as visited.
        List<Integer> rst = new ArrayList<>();
        rst.add(matrix[0][0]);
        matrix[0][0] = VISITED;
        while (changeDirection < 2) {
            while (row + directions[curDirection][0] >= 0 &&
                   row + directions[curDirection][0] < rows &&
                   col + directions[curDirection][1] >= 0 &&
                   col + directions[curDirection][1] < columns &&
                   matrix[row + directions[curDirection][0]]
                   [col + directions[curDirection][1]] != VISITED) {
                // Reset this to 0 since we did not break and change the direction.
                changeDirection = 0;
                // Calculate the next place that we will move to.
                row = row + directions[curDirection][0];
                col = col + directions[curDirection][1];
                rst.add(matrix[row][col]);
                matrix[row][col] = VISITED;
            }
            // Change our direction.
            curDirection = (curDirection + 1) % 4;
            // Increment change_direction because we changed our direction.
            changeDirection++;
        }
        return rst;
    }
}
