You are given an m x n integer matrix grid​​​, where m and n are both even integers, and an integer k.
The matrix is composed of several layers, which is shown in the below image, where each color is its own layer:
A cyclic rotation of the matrix is done by cyclically rotating each layer in the matrix. 
To cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the counter-clockwise direction. 
An example rotation is shown below:
Return the matrix after applying k cyclic rotations to it.

Example 1:
Input: grid = [[40,10],[30,20]], k = 1
Output: [[10,20],[40,30]]
Explanation: The figures above represent the grid at every state.

Example 2:
Input: grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2
Output: [[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]
Explanation: The figures above represent the grid at every state.

Approach 1: Layer-by-layer simulation
Time / Space Complexity: O(m * n)

public int[][] rotateGrid(int[][] grid, int k) {
    int m = grid.length, n = grid[0].length;
    int layers = Math.min(m, n) / 2;
    for (int p = 0; p < layers; p++) {
        rotateLayer(grid, p, k);
    }
    return grid;
}
void rotateLayer(int[][] grid, int p, int k) {
    List<Integer> layer = extractLayer(grid, p);
    int layerSize = layer.size();
    k %= layerSize;
    if (k == 0) {
        return;
    }
    List<Integer> rotated = rotateLeft(layer, k);
    insertLayer(grid, p, rotated);
}
List<Integer> extractLayer(int[][] grid, int p) {
    List<Integer> layer = new ArrayList<>();
    int m = grid.length, n = grid[0].length;
    for (int j = p; j < n - p - 1; j++) {     // Top row
        layer.add(grid[p][j]);
    }
    for (int i = p; i < m - p - 1; i++) {     // Right column
        layer.add(grid[i][n - p - 1]);
    }
    for (int j = n - p - 1; j > p; j--) {     // Bottom row
        layer.add(grid[m - p - 1][j]);
    }
    for (int i = m - p - 1; i > p; i--) {     // Left column
        layer.add(grid[i][p]);
    }
    return layer;
}
void insertLayer(int[][] grid, int p, List<Integer> layer) {
    int m = grid.length, n = grid[0].length, idx = 0;
    for (int j = p; j < n - p - 1; j++) {             // Top row
        grid[p][j] = layer.get(idx++);
    }
    for (int i = p; i < m - p - 1; i++) {             // Right column
        grid[i][n - p - 1] = layer.get(idx++);
    }
    for (int j = n - p - 1; j > p; j--) {             // Bottom row
        grid[m - p - 1][j] = layer.get(idx++);
    }
    for (int i = m - p - 1; i > p; i--) {             // Left column
        grid[i][p] = layer.get(idx++);
    }
}
List<Integer> rotateLeft(List<Integer> layer, int k) {
    int size = layer.size();
    List<Integer> rotated = new ArrayList<>(size);
    for (int i = 0; i < size; i++) {
        rotated.add(layer.get((i + k) % size));
    }
    return rotated;
}
