Given an integer array nums and an integer k, return the number of good subarrays of nums.

A good array is an array where the number of different integers in that array is exactly k.

For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
A subarray is a contiguous part of an array.

Example 1:

Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]
Example 2:

Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].


public int subarraysWithKDistinct(int[] nums, int k) {
    return atMostK(nums, k) - atMostK(nums, k - 1);
}
int atMostK(int[] nums, int k) {
    int i = 0, res = 0;
    Map<Integer, Integer> count = new HashMap<>();
    for (int j = 0; j < nums.length; j++) {
        if (count.getOrDefault(nums[j], 0) == 0) {
            k--;
        }
        count.put(nums[j], count.getOrDefault(nums[j], 0) + 1);
        while (k < 0) {
            count.put(nums[i], count.get(nums[i]) - 1);
            if (count.get(nums[i]) == 0) {
                k++;
            }
            i++;
        }
        res += (j - i + 1);
    }
    return res;
}
