Given a binary array data, return the minimum number of swaps required to group all 1â€™s present in the array together in any place in the array.
Example 1:
Input: data = [1,0,1,0,1]
Output: 1
Explanation: There are 3 ways to group all 1's together:
[1,1,1,0,0] using 1 swap.
[0,1,1,1,0] using 2 swaps.
[0,0,1,1,1] using 1 swap.
The minimum is 1.

Example 2:
Input: data = [0,0,0,1,0]
Output: 0
Explanation: Since there is only one 1 in the array, no swaps are needed.

Example 3:
Input: data = [1,0,1,0,1,0,0,1,1,0,1]
Output: 3
Explanation: One possible solution that uses 3 swaps is [0,0,0,0,0,1,1,1,1,1,1].

Approach 1: Sliding Window with Two Pointers
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int minSwaps(int[] data) {
        int numOnes = 0;
        for (int num : data) {
            if (num == 1) {
                numOnes++;          // get the total number of 1's in the array.
            }
        }
        int maxOnes = 0, windowOnes = 0;
        for (int left = 0, right = 0; right < data.length; right++) {
            windowOnes += data[right];
            if (right - left == numOnes - 1) {
                maxOnes = Math.max(maxOnes, windowOnes);
                windowOnes -= data[left++];
            }
        }
        return numOnes - maxOnes;
    }
}
