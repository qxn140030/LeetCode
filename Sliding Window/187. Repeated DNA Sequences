All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: "ACGAATTCCG". When studying DNA,
it is sometimes useful to identify repeated sequences within the DNA.
Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.
Example 1: 
Input: s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
output: ["AAAAACCCCC", "CCCCCAAAAA"]

Example 2:
Input: s = "AAAAAAAAAAAAA"
Output: ["AAAAAAAAAA"]

Approach 1: Linear-time Slice Using Substring + HashSet
Time complexity: O(n), O(l * (n - l)), where l = 10.
Space complexity: O(n), O(l * (n - l)) to keep the hash table.

class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        Set<String> seen = new HashSet<>();
        Set<String> res = new HashSet<>();
        for (int i = 0; i + 10 <= s.length(); i++) {
            String subStr = s.substring(i, i + 10);
            if (seen.contains(subStr)){
                res.add(subStr);
            } else {
                seen.add(subStr);
            }
        }
        return new ArrayList<>(res);
    }
}

public class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        List<String> rst = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i + 10 <= s.length(); i++) {
            String sub = s.substring(i, i + 10);
            if (map.containsKey(sub)) {
                if (map.get(sub) == 1) {
                    rst.add(sub);
                }
                map.put(sub, map.get(sub) + 1);
            } else {
                map.put(sub, 1);
            }
        }
        return rst;
    }
}

Approach 2: Constant-time Slice Using Rolling Hash (Rabin-Karp)
Rabin-Karp algorithm is used to perform a multiple pattern search. 
It's used for plagiarism detection and in bioinformatics to look for similarities in two or more proteins.
First, convert string to integer array: 'A' -> 0, 'C' -> 1, 'G' -> 2, 'T' -> 3.
Time complexity: O(n)
Space complexity: O(n - l) to keep the hash table.

class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        Map<Character, Integer> map = new HashMap<>(){{
            put('A', 0);
            put('C', 1);
            put('G', 2);
            put('T', 3);
        }};
        int L = 10, n = s.length();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = map.get(s.charAt(i));
        } 
        Set<Integer> seen = new HashSet<>();
        Set<String> rst = new HashSet<>();
        int hash = 0, a = 4, aL = (int)Math.pow(a, 10);
        for (int start = 0; start + L - 1 < n; start++) {
            if (start != 0) {
                hash = hash * a - nums[start - 1] * aL + nums[start + L - 1];       // compute hash of the current sequence in O(1) time.
            } else {  
                for (int i = 0; i < L; i++) {
                    hash = hash * a + nums[i];                                      // compute hash of the first sequence in O(L) time.
                }
            }        
            if (seen.contains(hash)) {
                rst.add(s.substring(start, start + L));    
            }   
            seen.add(hash);
        }
        return new ArrayList<>(rst);
    }
}

Approach 3: Constant-time Slice Using Bitmask (Bit Manipulation)
each of the 4 nucleotides can be stored in 2 bits. 'A' -> 00, 'C' -> 01, 'G' -> 10, 'T' -> 11.
So the 10-letter-long sequence can be converted to 20-bits-long integer. 
Time complexity: O(n), O(n - l), in the loop executed n - l + 1 one builds a bitmask in constant time.
Space complexity: O(n) to keep the hash table.

class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        Map<Character, Integer> map = new HashMap<>(){{
            put('A', 0);
            put('C', 1);
            put('G', 2);
            put('T', 3);
        }};   
        Set<Integer> hs = new HashSet<>();
        Set<String> rst = new HashSet<>();
        int num = 0;
        for (int i = 0; i < s.length(); i++) {
            num = (num << 2) + map.get(s.charAt(i));        // each ACGT fit 2 bits, so left shift 2.
            if (i >= 9) {
                num = (num & ((1 << 20) - 1));              // make length of num to be 20.
                if (hs.contains(num)) {
                    rst.add(s.substring(i - 9, i + 1));
                } else {
                    hs.add(num);
                }
            }
        }
        return new ArrayList<>(rst);
    }
}
