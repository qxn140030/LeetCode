Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.
Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.
The order of output does not matter.
Example 1:
Input: s: "cbaebabacd" p: "abc"
Output: [0,6]
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".

Example 2:
Input: s: "abab" p: "ab"
Output: [0,1,2]

Approach 1: Sliding Window with HashMap
Time complexity: O(m + n)
Space complexity: O(1)

public List<Integer> findAnagrams(String s, String p) {
    int ns = s.length(), np = p.length();
    Map<Character, Integer> sCount = new HashMap<>(), pCount = new HashMap<>();
    for (char ch : p.toCharArray()) {
        pCount.put(ch, pCount.getOrDefault(ch, 0) + 1);
    }
    List<Integer> rst = new ArrayList<>();
    for (int i = 0; i < ns; i++) {
        char ch = s.charAt(i);
        sCount.put(ch, sCount.getOrDefault(ch, 0) + 1);
        if (i >= np) {
            ch = s.charAt(i - np);
            if (sCount.get(ch) == 1) {
                sCount.remove(ch);
            }
            else {
                sCount.put(ch, sCount.get(ch) - 1);
            }
        }
        if (pCount.equals(sCount)) {
            rst.add(i - np + 1);
        }
    }
    return rst;
}

Approach 2: Sliding Window with Array
Time complexity: O(m + n)
Space complexity: O(1)

public class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> rst = new ArrayList<>();
        int count = p.length();
        int[] hash = new int[26];
        for (int i = 0; i < count; i++) {
            hash[p.charAt(i) - 'a']++;
        }
        int left = 0, right = 0;
        while (right < s.length()) {
            if (hash[s.charAt(right) - 'a'] > 0) {
                count--;
            }
            hash[s.charAt(right) - 'a']--;
            right++;
            if (count == 0) {
                rst.add(left);
            }
            if (right - left == p.length()) {
                if (hash[s.charAt(left) - 'a'] >= 0) {
                    count++;
                }
                hash[s.charAt(left) - 'a']++;
                left++;
            }
        }
        return rst;
    }
}
