Given an integer array arr, return the length of a maximum size turbulent subarray of arr.
A subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.
More formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if:
* For i <= k < j:
** arr[k] > arr[k + 1] when k is odd, and
** arr[k] < arr[k + 1] when k is even.
* Or, for i <= k < j:
** arr[k] > arr[k + 1] when k is even, and
** arr[k] < arr[k + 1] when k is odd.
Example 1:
Input: arr = [9,4,2,10,7,8,8,1,9]
Output: 5
Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]

Example 2:
Input: arr = [4,8,12,16]
Output: 2

Example 3:
Input: arr = [100]
Output: 1

Approach 1: Sliding Window
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int maxTurbulenceSize(int[] arr) {
        int n = arr.length, ans = 1, start = 0;
        for (int i = 1; i < n; i++) {
            int c = Integer.compare(arr[i - 1], arr[i]);
            if (c == 0) {
                start = i;
            } else if (i == n - 1 || c * Integer.compare(arr[i], arr[i + 1]) != -1) {
                ans = Math.max(ans, i - start + 1);
                start = i;
            }
        }
        return ans;
    }
}
