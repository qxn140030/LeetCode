Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
In other words, return true if one of s1's permutations is the substring of s2.
Example 1:
Input: s1 = "ab", s2 = "eidbaooo"
Output: true, s2 contains one permutation of s1 ("ba").

Example 2:
Input: s1 = "ab", s2 = "eidboaoo"
Output: false

Approach 1: Brute Force
Time complexity: O(n!), where n is the length of s1.
Space complexity: O(n^2), the depth of the recursion tree is n, every node contains a string of max length n.

class Solution {
    boolean flag = false;
    public boolean checkInclusion(String s1, String s2) {
        check(s1, s2, 0);
        return flag;
    }
    private void check(String s1, String s2, int l) {
        if (l == s1.length()) {
            if (s2.indexOf(s1) >= 0) {
                flag = true;
            }
        } else {
            for (int i = l; i < s1.length(); i++) {
                s1 = swap(s1, l, i);
                check(s1, s2, l + 1);
                s1 = swap(s1, l, i);
            }
        }
    }
    private String swap(String s, int left, int right) {
        if (left == right) {
            return s;
        }
        String s1 = s.substring(0, left);
        String s2 = s.substring(left + 1, right);
        String s3 = s.substring(right + 1);
        return s1 + s.charAt(right) + s2 + s.charAt(left) + s3;
    }
}

Approach 2: Sorting
One string x is a permutation of other string y only if sorted(x) = sorted(y).
Time complexity: O(nlogn + (m - n) * nlogn)
Space complexity: O(n)

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        s1 = sort(s1);
        for (int i = 0; i <= s2.length() - s1.length(); i++) {
            if (s1.equals(sort(s2.substring(i, i + s1.length())))) {
                return true;
            }
        }
        return false;
    }
    private String sort(String s) {
        char[] t = s.toCharArray();
        Arrays.sort(t);
        return new String(t);
    }
}

Approach 3: Hash Table
Time complexity: O(n + n * (m - n))
Space complexity: O(1). Hashmap contains at most 26 key-value pairs.

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        HashMap<Character, Integer> map1 = new HashMap<>();
        for (int i = 0; i < s1.length(); i++) {
            char c = s1.charAt(i);
            map1.put(c, map1.getOrDefault(c, 0) + 1);
        }
        for (int i = 0; i <= s2.length() - s1.length(); i++) {
            HashMap<Character, Integer> map2 = new HashMap<>();
            for (int j = 0; j < s1.length(); j++) {
                char c = s2.charAt(i + j);
                map2.put(c, map2.getOrDefault(c, 0) + 1);
            }
            if (matches(map1, map2)) {
                return true;
            }
        }
        return false;
    }
    private boolean matches(HashMap<Character, Integer> map1, HashMap<Character, Integer> map2) {
        for (char key : map1.keySet()) {
            if (map1.get(key) - map2.getOrDefault(key, -1) != 0) {
                return false;
            }
        }
        return true;
    }
}

Approach 4: Use Array
Time complexity: O(n + n * (m - n))
Space complexity: O(1)

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int[] arr1 = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            arr1[s1.charAt(i) - 'a']++;
        }
        for (int i = 0; i <= s2.length() - s1.length(); i++) {
            int[] arr2 = new int[26];
            for (int j = 0; j < s1.length(); j++) {
                arr2[s2.charAt(i + j) - 'a']++;
            }
            if (matches(arr1, arr2)) {
                return true;
            }
        }
        return false;
    }
    private boolean matches(int[] arr1, int[] arr2) {
        for (int i = 0; i < 26; i++) {
            if (arr1[i] != arr2[i]) {
                return false;
            }
        }
        return true;
    }
}

Approach 5: Sliding Window
Time complexity: O(n + 26 * (m - n))
Space complexity: O(1)

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if (s1.length() > s2.length()) {
            return false;
        }   
        int[] arr1 = new int[26];
        int[] arr2 = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            arr1[s1.charAt(i) - 'a']++;
            arr2[s2.charAt(i) - 'a']++;
        }
        for (int i = 0; i < s2.length() - s1.length(); i++) {
            if (matches(arr1, arr2)) {
                return true;
            }
            arr2[s2.charAt(i + s1.length()) - 'a']++;
            arr2[s2.charAt(i) - 'a']--;
        }
        return matches(arr1, arr2);
    }
    private boolean matches(int[] arr1, int[] arr2) {
        for (int i = 0; i < 26; i++) {
            if (arr1[i] != arr2[i])
                return false;
        }
        return true;
    }
}

Approach 6: Optimized Sliding Window
Time complexity: O(n + (m - n))
Space complexity: O(1)

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if (s1.length() > s2.length()) {
            return false;
        }   
        int[] arr1 = new int[26];
        int[] arr2 = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            arr1[s1.charAt(i) - 'a']++;
            arr2[s2.charAt(i) - 'a']++;
        }
        int count = 0;
        for (int i = 0; i < 26; i++) {
            if (arr1[i] == arr2[i]) {
                count++;
            }
        }
        for (int i = 0; i < s2.length() - s1.length(); i++) {
            int r = s2.charAt(i + s1.length()) - 'a';
            int l = s2.charAt(i) - 'a';
            if (count == 26)
                return true;
            arr2[r]++;
            if (arr2[r] == arr1[r]) {
                count++;
            } else if (arr2[r] == arr1[r] + 1) {
                count--;
            }
            arr2[l]--;
            if (arr2[l] == arr1[l]) {
                count++;
            } else if (arr2[l] == arr1[l] - 1) {
                count--;
            }
        }
        return count == 26;
    }
}

public boolean checkInclusion(String s1, String s2) {
    Map<Character, Integer> need = new HashMap<>(), window = new HashMap<>();
    for (char c : s1.toCharArray()) {
        need.put(c, need.getOrDefault(c, 0) + 1);
    }
    int left = 0, right = 0, valid = 0;
    while (right < s2.length()) {
        char c = s2.charAt(right++);
        if (need.containsKey(c)) {
            window.put(c, window.getOrDefault(c, 0) + 1);
            if (window.get(c).equals(need.get(c))) {
                valid++;
            }
        }
        while (right - left >= s1.length()) {
            if (valid == need.size()) {
                return true;
            }
            char ch = s2.charAt(left++);
            if (need.containsKey(ch)) {
                if (window.get(ch).equals(need.get(ch))) {
                    valid--;
                }
                window.put(ch, window.getOrDefault(ch, 0) - 1);
            }
        }
    }
    return false;
}
