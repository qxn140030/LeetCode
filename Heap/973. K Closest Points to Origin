Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).
The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2).
You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).
Example 1:
Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]
Explanation:
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].

Example 2:
Input: points = [[3,3],[5,-1],[-2,4]], k = 2
Output: [[3,3],[-2,4]]
Explanation: The answer [[-2,4],[3,3]] would also be accepted.

Approach 1: Max Heap
Time complexity: O(nlogk + klogk)
Space complexity: O(k)

class Solution {
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<int[]> heap = new PriorityQueue<>((a, b) -> b[0] * b[0] + b[1] * b[1] - a[0] * a[0] - a[1] * a[1]);
        for (int[] p : points) {
            heap.offer(p);
            if (heap.size() > k) {
                heap.poll();
            }
        }
        int[][] rst = new int[k][2];
        int idx = 0;
        while (!heap.isEmpty()) {
            rst[idx++] = heap.poll();
        }
        return rst;
    }
}

Approach 2: Sorting distance
Time complexity: O(nlogn)
Space complexity: O(n)

class Solution {
    public int[][] kClosest(int[][] points, int k) {
        int n = points.length;
        int[] distance = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = dist(points[i]);
        }
        Arrays.sort(distance);
        int[][] rst = new int[k][2];
        int idx = 0;
        for (int i = 0; i < n; i++) {
            if (dist(points[i]) <= distance[k - 1]) {
                rst[idx++] = points[i];
            }
        }
        return rst;
    }
    private int dist(int[] point) {
        return point[0] * point[0] + point[1] * point[1];
    }
}
