You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.
The right interval for an interval i is an interval j such that startj >= endi and startj is minimized. Note that i may equal j.
Return an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i.

Example 1:
Input: intervals = [[1,2]]
Output: [-1]
Explanation: There is only one interval in the collection, so it outputs -1.

Example 2:
Input: intervals = [[3,4],[2,3],[1,2]]
Output: [-1,0,1]
Explanation: There is no right interval for [3,4].
The right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.
The right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.

Example 3:
Input: intervals = [[1,4],[2,3],[3,4]]
Output: [-1,2,-1]
Explanation: There is no right interval for [1,4] and [3,4].
The right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.

Approach 1: Two Heaps
Time Complexity: O(nlogn)
Space Complexity: O(n)

public int[] findRightInterval(int[][] intervals) {
    PriorityQueue<int[]> start = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
    PriorityQueue<int[]> end = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
    int[] rst = new int[intervals.length];
    Arrays.fill(rst, -1);
    for (int i = 0; i < intervals.length; i++) {
        start.offer(new int[]{intervals[i][0], i});              // [start time, index]
        end.offer(new int[]{intervals[i][1], i});                // [end time, index]
    }
    while (!end.isEmpty()) {
        int[] cur = end.poll();
        int curEnd = cur[0], index = cur[1];
        while (!start.isEmpty() && curEnd > start.peek()[0]) {   // Remove all start times that are less than the current end time.
            start.poll();                      
        }
        if (!start.isEmpty()) {                                  // If thereâ€™s a valid start time left, 
            rst[index] = start.peek()[1];                        // it's the smallest start >= current end.
        }
    }
    return rst;
}
