We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].
You're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.
If you choose a job that ends at time X you will be able to start another job that starts at time X.

Example 1:
Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
Output: 120
Explanation: The subset chosen is the first and fourth job. 
Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70.

Example 2:
Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
Output: 150
Explanation: The subset chosen is the first, fourth and fifth job. 
Profit obtained 150 = 20 + 70 + 60.

Example 3:
Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
Output: 6

Approach 1: Sorting + Priority Queue
Time complexity: O(nlog‚Å°n)
Space complexity: O(n)

class Job {
    int start, end, profit;
    public Job(int start, int end, int profit) {
        this.start = start;
        this.end = end;
        this.profit = profit;
    }
}
public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
    int n = profit.length;
    Job[] jobs = new Job[n];
    for (int i = 0; i < n; i++) {
        jobs[i] = new Job(startTime[i], endTime[i], profit[i]);
    }
    Arrays.sort(jobs, (a, b) -> Integer.compare(a.start, b.start));
    return findMaxProfit(jobs);
}
int findMaxProfit(Job[] jobs) {
    int n = jobs.length, maxProfit = 0;
    PriorityQueue<Job> pq = new PriorityQueue<>((a, b) -> Integer.compare(a.end, b.end));        
    for (int i = 0; i < n; i++) {
        int start = jobs[i].start, end = jobs[i].end, profit = jobs[i].profit;
        while (!pq.isEmpty() && start >= pq.peek().end) {           // keep popping while jobs are not conflicting          
            maxProfit = Math.max(maxProfit, pq.poll().profit);
        }
        Job combinedJob = new Job(start, end, profit + maxProfit);
        pq.offer(combinedJob);         // push the job with combined profit
    } 
    while (!pq.isEmpty()) {
        maxProfit = Math.max(maxProfit, pq.poll().profit);    // update the value of maxProfit by comparing with profit of jobs that exits in the heap 
    }
    return maxProfit;
}
