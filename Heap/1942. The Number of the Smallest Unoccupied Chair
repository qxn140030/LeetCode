There is a party where n friends numbered from 0 to n - 1 are attending. 
There is an infinite number of chairs in this party that are numbered from 0 to infinity. 
When a friend arrives at the party, they sit on the unoccupied chair with the smallest number.
For example, if chairs 0, 1, and 5 are occupied when a friend comes, they will sit on chair number 2.
When a friend leaves the party, their chair becomes unoccupied at the moment they leave. 
If another friend arrives at that same moment, they can sit in that chair.
You are given a 0-indexed 2D integer array times where times[i] = [arrivali, leavingi], 
indicating the arrival and leaving times of the ith friend respectively, and an integer targetFriend. All arrival times are distinct.
Return the chair number that the friend numbered targetFriend will sit on.

Example 1:
Input: times = [[1,4],[2,3],[4,6]], targetFriend = 1
Output: 1
Explanation: 
- Friend 0 arrives at time 1 and sits on chair 0.
- Friend 1 arrives at time 2 and sits on chair 1.
- Friend 1 leaves at time 3 and chair 1 becomes empty.
- Friend 0 leaves at time 4 and chair 0 becomes empty.
- Friend 2 arrives at time 4 and sits on chair 0.
Since friend 1 sat on chair 1, we return 1.

Example 2:
Input: times = [[3,10],[1,5],[2,6]], targetFriend = 0
Output: 2
Explanation: 
- Friend 1 arrives at time 1 and sits on chair 0.
- Friend 2 arrives at time 2 and sits on chair 1.
- Friend 0 arrives at time 3 and sits on chair 2.
- Friend 1 leaves at time 5 and chair 0 becomes empty.
- Friend 2 leaves at time 6 and chair 1 becomes empty.
- Friend 0 leaves at time 10 and chair 2 becomes empty.
Since friend 0 sat on chair 2, we return 2.

Time Complexity: O(nlogn)
Space Complexity: O(n)

public int smallestChair(int[][] times, int targetFriend) {
    List<int[]> sortedFriends = new ArrayList<>();
    for (int i = 0; i < times.length; i++) {
        sortedFriends.add(new int[]{i, times[i][0], times[i][1]});
    }
    sortedFriends.sort(Comparator.comparingInt(a -> a[1]));
    PriorityQueue<Integer> availableChairs = new PriorityQueue<>(); // Stores available chair numbers (min-heap)
    PriorityQueue<int[]> occupiedChairs = new PriorityQueue<>(Comparator.comparingInt(a -> a[0])); // Stores (leaving_time, chair_number) (min-heap)
    int chairIndex = 0;
    for (int[] friend : sortedFriends) {
        int friendId = friend[0], arrival = friend[1], leaving = friend[2];
        // Step 4: Free up chairs that should be released before the current friend's arrival
        while (!occupiedChairs.isEmpty() && occupiedChairs.peek()[0] <= arrival) {
            int freedChair = occupiedChairs.poll()[1];
            availableChairs.offer(freedChair); 
        }
        // Step 5: Assign the smallest available chair
        int assignedChair;
        if (!availableChairs.isEmpty()) {
            assignedChair = availableChairs.poll();
        } else {
            assignedChair = chairIndex++; // Use a new chair if none are available
        }
        // Step 6: Store the chair assignment with leaving time
        occupiedChairs.offer(new int[]{leaving, assignedChair});
        // Step 7: Check if this is the target friend
        if (friendId == targetFriend) {
            return assignedChair; // Return the chair number assigned to the target friend
        }
    }
    return -1;
}
