Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.
Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Example 2:
Input: nums = [1], k = 1
Output: [1]

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

Approach 1: Heap
Time complexity: O(nlogk)
Space complexity: O(n + k)

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> count = new HashMap<>();
        for (int n: nums) {
          count.put(n, count.getOrDefault(n, 0) + 1);
        }
        Queue<Integer> heap = new PriorityQueue<>((n1, n2) -> count.get(n1) - count.get(n2));      // Min Heap.
        for (int n: count.keySet()) {
            heap.add(n);
            if (heap.size() > k) {                                                                 // keep k top frequent elements in the heap.
                heap.poll();
            }    
        }
        int[] top = new int[k];
        for (int i = k - 1; i >= 0; i--) {
            top[i] = heap.poll();                                                                 // O(klogk) time.
        }
        return top;
    }
}

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        PriorityQueue<Map.Entry<Integer, Integer>> queue = new PriorityQueue<>(Map.Entry.comparingByValue(Comparator.reverseOrder()));
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            queue.offer(entry);
        }
        int[] rst = new int[k];
        for (int i = 0; i < k; i++) {
            rst[i] = queue.poll().getKey();
        }
        return rst;
    }
}

Approach 2: Quickselect (Hoare's selection algorithm)
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    int[] unique;
    Map<Integer, Integer> count;
    public int[] topKFrequent(int[] nums, int k) {
        count = new HashMap<>();
        for (int num : nums) {
            count.put(num, count.getOrDefault(num, 0) + 1);
        }
        int n = count.size();
        unique = new int[n]; 
        int i = 0;
        for (int num : count.keySet()) {
            unique[i++] = num;
        }
        quickSelect(0, n - 1, n - k);
        return Arrays.copyOfRange(unique, n - k, n);
    }
    void quickSelect(int i, int j, int k) {
        while (i < j) {
            int pivotIndex = partition(i, j);
            if (pivotIndex < k) {
                i = pivotIndex + 1;
            } else if (pivotIndex > k) {
                j = pivotIndex - 1;
            } else {
                return;
            }
        }
    }
    int partition(int left, int right) {
        Random random = new Random();
        int pivotIndex = left + random.nextInt(right - left); 
        int pivot = unique[pivotIndex];
        swap(pivotIndex, right);                             // 1. move pivot to right.
        int storeIndex = left;
        for (int i = left; i <= right; i++) {
            if (count.get(unique[i]) < count.get(pivot)) {
                swap(storeIndex, i);                         // 2. move all less frequent elements to the left.
                storeIndex++;
            }
        }
        swap(storeIndex, right);                             // 3. move pivot to its final place.
        return storeIndex;
    }
    void swap(int i, int j) {
        int tmp = unique[i];
        unique[i] = unique[j];
        unique[j] = tmp;
    }
}
