Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.
Example 1:
Input: intervals = [[0,30],[5,10],[15,20]]
Output: 2

Example 2:
Input: intervals = [[7,10],[2,4]]
Output: 1

Approach 1: Priority Queues
Time Complexity: O(nlog⁡n)
Space Complexity: O(n)

class Solution {
    public int minMeetingRooms(int[][] intervals) { 
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        // Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        // Arrays.sort(intervals, new Comparator<int[]>() {
        //     public int compare(int[] a, int[] b) {
        //         return a[0] - b[0];                  // Sort the intervals by start time.
        //     }
        // });
        PriorityQueue<Integer> q = new PriorityQueue<>();
        for (int[] interval : intervals) {
            if (!q.isEmpty() && interval[0] >= q.peek()) {
                q.poll();
            }
            q.offer(interval[1]);
        }
        return q.size();
    }
}

Approach 2: Chronological Ordering
Time Complexity: O(nlog⁡n)
Space Complexity: O(n)

class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if (intervals.length == 0) {
            return 0;
        }
        Integer[] start = new Integer[intervals.length];
        Integer[] end = new Integer[intervals.length];
        for (int i = 0; i < intervals.length; i++) {
            start[i] = intervals[i][0];
            end[i] = intervals[i][1];
        }
        Arrays.sort(
            end,                          // Sort the intervals by end time.
            new Comparator<Integer>() {
                public int compare(Integer a, Integer b) {
                    return a - b;
                }
            });
        Arrays.sort(
            start,                        // Sort the intervals by start time.
            new Comparator<Integer>() {
                public int compare(Integer a, Integer b) {
                    return a - b;
                }
            });
        int startPointer = 0, endPointer = 0;
        int usedRooms = 0;                        // maximum number of rooms used.
        while (startPointer < intervals.length) {
            if (start[startPointer] >= end[endPointer]) {
                usedRooms--;
                endPointer++;
            }
            usedRooms++;
            startPointer++;
        }
        return usedRooms;
    }
}
