You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.
Define a pair (u,v) which consists of one element from the first array and one element from the second array.
Find the k pairs (u1,v1),(u2,v2) ...(uk,vk) with the smallest sums.
Example 1:
Given nums1 = [1,7,11], nums2 = [2,4,6],  k = 3
Return: [1,2],[1,4],[1,6]
The first 3 pairs are returned from the sequence:
[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]

Example 2:
Given nums1 = [1,1,2], nums2 = [1,2,3],  k = 2
Return: [1,1],[1,1]
The first 2 pairs are returned from the sequence:
[1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]

Example 3:
Given nums1 = [1,2], nums2 = [3],  k = 3 
Return: [1,3],[2,3]
All possible pairs are returned from the sequence:
[1,3],[2,3]

Time complexity: O()
Space complexity: O()

public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
    List<List<Integer>> rst = new ArrayList<>();
    PriorityQueue<int[]> pq = new PriorityQueue<>(
        (a, b) -> Integer.compare((a[0] + a[1]), (b[0] + b[1])) 
    );
    for (int i = 0; i < nums1.length; i++) {
        pq.offer(new int[] {nums1[i], nums2[0], 0}); 
    }
    while (k-- > 0 && !pq.isEmpty()) {
        int[] pair = pq.poll();
        int num1 = pair[0], num2 = pair[1], index2 = pair[2];
        rst.add(Arrays.asList(num1, num2));
        if (index2 + 1 < nums2.length) {
            pq.offer(new int[] {num1, nums2[index2 + 1], index2 + 1});
        }
    }
    return rst;
}
