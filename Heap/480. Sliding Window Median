The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.

For examples, if arr = [2,3,4], the median is 3.
For examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5.
You are given an integer array nums and an integer k. There is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the median array for each window in the original array. Answers within 10-5 of the actual value will be accepted.

Example 1:
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]
Explanation: 
Window position                Median
---------------                -----
[1  3  -1] -3  5  3  6  7        1
 1 [3  -1  -3] 5  3  6  7       -1
 1  3 [-1  -3  5] 3  6  7       -1
 1  3  -1 [-3  5  3] 6  7        3
 1  3  -1  -3 [5  3  6] 7        5
 1  3  -1  -3  5 [3  6  7]       6

Example 2:
Input: nums = [1,2,3,4,2,3,1,4,2], k = 3
Output: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]

Approach 1: Two Heaps (Lazy Removal)
Time complexity: O(nlogn)
Space complexity: O(k)+O(n)â‰ˆO(n) extra linear space.

class Solution {
    PriorityQueue<Long> lo = new PriorityQueue<>((a, b) -> Long.compare(b, a));
    PriorityQueue<Long> hi = new PriorityQueue<>();    
    Map<Long, Integer> delayed = new HashMap<>();      // lazy deletion counts
    int loSize = 0, hiSize = 0;             // number of valid elements in each heap (excluding delayed ones)
    public double[] medianSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        double[] ans = new double[n - k + 1];
        for (int i = 0; i < k; i++) {
            add(nums[i]);
        }
        ans[0] = median(k);
        for (int i = k; i < n; i++) {
            add(nums[i]);
            remove(nums[i - k]);
            ans[i - k + 1] = median(k);
        }
        return ans;
    }
    void add(int num) {
        long x = num;
        if (lo.isEmpty() || x <= lo.peek()) {
            lo.offer(x);
            loSize++;
        } else {
            hi.offer(x);
            hiSize++;
        }
        balance();
    }
    void remove(int num) {
        long x = num;
        delayed.put(x, delayed.getOrDefault(x, 0) + 1);   // mark for lazy deletion
        // decrement size for the heap that x belongs to (by value)
        if (!lo.isEmpty() && x <= lo.peek()) {
            loSize--;
            if (!lo.isEmpty() && lo.peek().equals(x)) {   // if x is at top, prune now
                prune(lo);
            }
        } else {
            hiSize--;
            if (!hi.isEmpty() && hi.peek().equals(x)) {
                prune(hi);
            }
        }
        balance();
    }
    void balance() {           // keep loSize == hiSize or loSize == hiSize + 1
        if (loSize > hiSize + 1) {
            hi.offer(lo.poll());
            loSize--; 
            hiSize++;
            prune(lo);
        } else if (loSize < hiSize) {
            lo.offer(hi.poll());
            hiSize--; 
            loSize++;
            prune(hi);
        }
    }
    void prune(PriorityQueue<Long> heap) {
        while (!heap.isEmpty()) {
            long x = heap.peek();
            Integer cnt = delayed.get(x);
            if (cnt == null || cnt == 0) {
                break;
            }
            heap.poll();
            if (cnt == 1) {
                delayed.remove(x);
            } else {
                delayed.put(x, cnt - 1);
            }
        }
    }
    double median(int k) {
        if ((k & 1) == 1) { // odd
            prune(lo);
            return lo.peek();
        } else {            // even
            prune(lo); 
            prune(hi);
            return (lo.peek() + hi.peek()) / 2.0;
        }
    }
}
