Given an integer array nums, handle multiple queries of the following types:
1. Update the value of an element in nums.
2. Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:
- NumArray(int[] nums) Initializes the object with the integer array nums.
- void update(int index, int val) Updates the value of nums[index] to be val.
- int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 
Example 1:
Input
["NumArray", "sumRange", "update", "sumRange"]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
Output
[null, 9, null, 8]
Explanation
NumArray numArray = new NumArray([1, 3, 5]);
numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9
numArray.update(1, 2);   // nums = [1, 2, 5]
numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8

Approach 1: Naive

class NumArray {
    private int[] nums;
    public NumArray(int[] nums) {
        this.nums = nums;
    }
    public void update(int index, int val) {
        nums[index] = val;
    }   
    public int sumRange(int left, int right) {
        int sum = 0;
        for (int i = left; i <= right; i++) {
            sum += nums[i];
        }
        return sum;
    }
}
/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(index,val);
 * int param_2 = obj.sumRange(left,right);
 */

Approach 2: Segment Tree

class NumArray {
    int[] tree;
    int n;
    public NumArray(int[] nums) {
        n = nums.length;
        tree = new int[n * 2];
        build(nums);
    }
    private void build(int[] nums) {
        for (int i = n, j = 0; i < 2 * n; i++, j++) {
            tree[i] = nums[j];
        }
        for (int i = n - 1; i > 0; i--) {
            tree[i] = tree[2 * i] + tree[2 * i + 1];
        }
    }
    public void update(int index, int val) {
        index += n;
        tree[index] = val;
        while (index > 0) {
            int left = index, right = index;
            if (index % 2 == 0) {
                right = index + 1;
            } else {
                left = index - 1;
            }
            tree[index / 2] = tree[left] + tree[right];
            index /= 2;
        }
    }
    public int sumRange(int left, int right) {
        left += n;
        right += n;
        int sum = 0;
        while (left <= right) {
            if (left % 2 == 1) {
                sum += tree[left++];
            }
            if (right % 2 == 0) {
                sum += tree[right--];
            }
            left /= 2; 
            right /= 2;
        }
        return sum;
    }
}

 class NumArray {
    int[] nums;
    class TreeNode {
        int sum, low, high;
        TreeNode left, right;
        public TreeNode(int sum, int low, int high) {
            this.sum = sum;
            this.low = low;
            this.high = high;
        }
    }
    TreeNode root;
    public NumArray(int[] nums) {
        this.nums = nums;
        root = build(nums, 0, nums.length - 1);
    }
    public TreeNode build(int[] nums, int i, int j) {
        if (i == j) {
            return new TreeNode(nums[i], i, j);
        }
        int mid = (i + j) / 2;
        TreeNode root = new TreeNode(0, i, j);
        root.left = build(nums, i, mid);
        root.right = build(nums, mid + 1, j);
        root.sum = root.left.sum + root.right.sum;
        return root;
    }
    public void update(int index, int val) {
        update(index, val, root);
    }
    private void update (int index, int val, TreeNode node) {
        if (node.low == node.high) {
            node.sum = val;
            return;
        }
        int mid = (node.low + node.high) / 2;
        if (index > mid) {
            update(index, val, node.right);
        } else {
            update(index, val, node.left);
        }
        node.sum = node.left.sum + node.right.sum;
    }
    public int sumRange(int left, int right) {
        return sumRangeHelper(root, left, right);
    }
    public int sumRangeHelper(TreeNode node, int left, int right) {
        if (left == node.low && right == node.high) {
            return node.sum;
        }
        int mid = (node.low + node.high) / 2;
        if (left > mid) {
            return sumRangeHelper(node.right, left, right);
        } 
        if (right <= mid) {
            return sumRangeHelper(node.left, left, right);
        }
        return sumRangeHelper(node, left, mid) + sumRangeHelper(node, mid + 1, right);
    }
}
