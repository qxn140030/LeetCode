Question: Given a linked list, remove the nth node from the end of list and return its head.
          For example, Given linked list: 1->2->3->4->5, and n = 2.
          After removing the second node from the end, the linked list becomes 1->2->3->5.
    Note: Given n will always be valid. Try to do this in one pass.

Solution 1: two passes. Calculate the length first, and then remove the (len - n + 1)th from the beginning.
            Time complexity: O(n). Space complexity: O(1).
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if (head == null || n <= 0) {
            return head;
        }
        ListNode node = head;
        int len = 0;
        while (node != null) {
            len++;
            node = node.next;
        }
        if (len == n) {
            return head.next;
        }
        int m = len - n - 1;
        node = head;
        while (m-- > 0) {
            node = node.next;
        }
        node.next = node.next.next;
        return head;
    }
}

Solution 2: one pass, dummy head, two pointers, the fast pointer is n steps ahead of the slow pointer. 
            Time complexity: O(n). Space complexity: O(1).
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if (head == null || n <= 0) {
            return head;
        }
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode runner = dummy;
        head = dummy;
        for (int i = 0; i < n; i++) {
            if (runner.next != null) {
                runner = runner.next;
            }
        }
        while (runner.next != null) {
            head = head.next;
            runner = runner.next;
        }
        head.next = head.next.next;
        return dummy.next;
    }
}
