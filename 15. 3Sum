Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? 
Find all unique triplets in the array which gives the sum of zero.
Note: 
Elements in a triplet (a,b,c) must be in non-descending order. (ie, a = b = c)
The solution set must not contain duplicate triplets.
For example, given array S = {-1 0 1 2 -1 -4}, A solution set is: (-1, 0, 1), (-1, -1, 2).

Solution 1: Time complexity: O(n^2 + nlogn) = (n^2). Space complexity: O(1).
public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> rst = new ArrayList<List<Integer>>();
        if (nums == null || nums.length < 3) {
            return rst;
        }
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 2; i++) {
            if (nums[i] > 0) {
                return rst;
            }
            if (i == 0 || nums[i] > nums[i - 1]) {
                int start = i + 1;
                int end = nums.length - 1;
                while (start < end) {
                    List<Integer> each = new ArrayList<>();
                    if (nums[i] + nums[start] + nums[end] == 0) {
                        each.add(nums[i]);
                        each.add(nums[start]);
                        each.add(nums[end]);
                        rst.add(each);
                        start++;
                        end--;
                        while (start < end && nums[end] == nums[end + 1]) {
                            end--;
                        }
                        while (start < end && nums[start] == nums[start - 1]) {
                            start++;
                        }
                    } else if (nums[i] + nums[start] + nums[end] > 0) {
                        end--;
                    } else {
                        start++;
                    }
                }
            }
        }
        return rst;
    }
}

Solution 2: using HashSet to avoid duplicates. Time complexity: O(n^2 + nlogn) = (n^2). Space complexity: O(n).
public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> rst = new ArrayList<List<Integer>>();
        if (nums == null || nums.length < 3) {
            return rst;
        }
        Arrays.sort(nums);
        Set<ArrayList<Integer>> hs = new HashSet<>();
        for (int i = 0; i < nums.length - 2; i++) {
            if (nums[i] > 0) {
                return rst;
            }
            if (i == 0 || nums[i] > nums[i - 1]) {
                int start = i + 1;
                int end = nums.length - 1;
                while (start < end) {
                    ArrayList<Integer> each = new ArrayList<>();
                    if (nums[i] + nums[start] + nums[end] == 0) {
                        each.add(nums[i]);
                        each.add(nums[start]);
                        each.add(nums[end]);
                        if (!hs.contains(each)) {
                            rst.add(each);
                            hs.add(each);
                        }
                        start++;
                        end--;
                    } else if (nums[i] + nums[start] + nums[end] > 0) {
                        end--;
                    } else {
                        start++;
                    }
                }
            }
        }
        return rst;
    }
}
