Question: Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.
Do not allocate extra space for another array, you must do this in place with constant memory.
For example, Given input array nums = [1,1,2], Your function should return length = 2, with the first two elements of nums
being 1 and 2 respectively. It doesn't matter what you leave beyond the new length.

If we are allowed to use extra space. create a map which stores all elements as the key and frequency as the value.
then iterate the map and push all keys in array.

Approach 1: Two pointers
The first index updates the value while reading the data from second index, until the second index reaches the end of an array.
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int removeDuplicates(int[] nums) {
        int insertIndex = 1;
        for (int i = 1; i < nums.length; i++){
            // We skip to next index if we see a duplicate element
            if (nums[i - 1] != nums[i]) {
                // Storing the unique element at insertIndex index and incrementing the insertIndex by 1
                nums[insertIndex++] = nums[i];
            }
        }
        return insertIndex;
    }
}
