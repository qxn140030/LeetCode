Rotate an array of n elements to the right by k steps.
For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].
Note:
Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
Hint:
Could you do it in-place with O(1) extra space?

Approach 1: Brute Force
Time complexity: O(n * k). All the numbers are shifted by one step(O(n)) k times(O(k)). 
Space complexity: O(1)

public class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        k %= n;
        for (int j = 0; j < k; j++) {
            for (int i = n - 1; i > 0; i--) {
                int tmp = nums[i];
                nums[i] = nums[i - 1];
                nums[i - 1] = tmp;
            }
        }
    }
}

Approach 2: Using Extra Array
Time complexity: O(n)
Space complexity: O(n)

public class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        k %= n;
        int[] tmp = new int[n];
        for (int i = 0; i < n; i++) {
            tmp[(i + k) % n] = nums[i];
        }
        for (int i = 0; i < n; i++) {
            nums[i] = tmp[i];
        }
    }
}

Approach 3: Using Cyclic Replacements
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length, count = 0, curr, prev;
        k %= n;
        for (int start = 0; count < n; start++) {
            curr = start;
            prev = nums[start];
            do {
                int next = (curr + k) % n;
                int temp = nums[next];
                nums[next] = prev;
                prev = temp;
                curr = next;
                count++;
            } while (start != curr);
        }
    }
}

Approach 4: Using Reverse
Time complexity: O(n). n elements are reversed a total of three times. 
Space complexity: O(1)

public class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        k %= n;
        reverse(nums, 0, n - 1);          // reversing all numbers.
        reverse(nums, 0, k - 1);          // reversing first k numbers.
        reverse(nums, k, n - 1);          // reversing last n - k numbers.
    }
    private void reverse(int[] nums, int left, int right) {
        for (int i = left, j = right; i < j; i++, j--) {
            int tmp = nums[i];
            nums[i] = nums[j];
            nums[j] = tmp;
        }
    }
}
