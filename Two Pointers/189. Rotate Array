Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.
Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

Example 2:
Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]

Follow up:
- Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.
- Could you do it in-place with O(1) extra space?

Approach 1: Brute Force
Time complexity: O(n * k). All the numbers are shifted by one step(O(n)) k times(O(k)). 
Space complexity: O(1)

public class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        k %= n;
        for (int j = 0; j < k; j++) {
            for (int i = n - 1; i > 0; i--) {
                int tmp = nums[i];
                nums[i] = nums[i - 1];
                nums[i - 1] = tmp;
            }
        }
    }
}

Approach 2: Using Extra Array
Time complexity: O(n)
Space complexity: O(n)

public class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        k %= n;
        int[] tmp = new int[n];
        for (int i = 0; i < n; i++) {
            tmp[(i + k) % n] = nums[i];
        }
        for (int i = 0; i < n; i++) {
            nums[i] = tmp[i];
        }
    }
}

Approach 3: Using Cyclic Replacements
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length, count = 0, curr, prev;
        k %= n;
        for (int start = 0; count < n; start++) {
            curr = start;
            prev = nums[start];
            do {
                int next = (curr + k) % n;
                int temp = nums[next];
                nums[next] = prev;
                prev = temp;
                curr = next;
                count++;
            } while (start != curr);
        }
    }
}

Approach 4: Using Reverse
Time complexity: O(n). n elements are reversed a total of three times. 
Space complexity: O(1)

public class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        k %= n;
        reverse(nums, 0, n - 1);          // reversing all numbers.
        reverse(nums, 0, k - 1);          // reversing first k numbers.
        reverse(nums, k, n - 1);          // reversing last n - k numbers.
    }
    private void reverse(int[] nums, int i, int j) {
        for (; i < j; i++, j--) {
            int tmp = nums[i];
            nums[i] = nums[j];
            nums[j] = tmp;
        }
    }
}
