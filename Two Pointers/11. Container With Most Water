You are given an integer array height of length n. There are n vertical lines.
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amout of water a container can store.
Notice that you may not slant the container.

Approach 1: Brute force
Time complexity: O(n^2)
Space complexity: O(1)

class Solution {
    public int maxArea(int[] height) {
        int water = 0;
        for (int i = 0; i < height.length; i++) {
            for (int j = i + 1; j < height.length; j++) {
                int cur = Math.min(height[i], height[j]) * (j - i);
                if (cur > water) {
                    water = cur;
                }
            }
        }
        return water;
    }
}

Approach 2: Two pointers
one at the beginning and one at the end of the array.
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int maxArea(int[] height) {
        int maxWater = 0, i = 0, j = height.length - 1;
        while (i < j) {
            int maxLeft = height[i], maxRight = height[j];
            int cur = Math.min(maxLeft, maxRight) * (j - i);
            if (cur > maxWater) {
                maxWater = cur;
            }
            if (maxLeft < maxRight) {
                while (i < j && height[i] <= maxLeft) {
                    i++;
                } 
            } else {
                while (i < j && height[j] <= maxRight) {
                    j--;
                }
            }
        }
        return maxWater;
    }
}
