Question: Given an integer array nums and an integer val, remove all occurences of val in nums in-place. 
The relative order of the elements may be changed.
Do not allocate extra space for another array, you must do this by modifying the input array in place with constant memory.
The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Example 1: 
Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_,_]
Your function should return length = 2, with the first two elements of nums being 2.

Example 2: 
Input: nums = [0,1,2,2,3,0,4,2], val = 2
Output: 5, nums = [0,1,4,0,3,_,_,_]

Hint: 
Try two pointers.
Did you use the property of "the order of elements can be changed"?
What happens when the elements to remove are rare?

Approach 1: Two pointers
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public int removeElement(int[] nums, int val) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int len = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != val) {
                nums[len++] = nums[i];
            } 
        }
        return len;
    }
}

Approach 2: Two pointers - when elements to remove are rare.
Time complexity: O(n). 
the number of assignment operation is equal to the number of elements to remove. So it is more efficient if elements to remove are rare.
Space complexity: O(1)

public class Solution {
    public int removeElement(int[] nums, int val) {
        int left = 0;
        int right = nums.length - 1;
        while (left <= right) {
            if (nums[left] == val) {
                nums[left] = nums[right--];                
            } else {
                left++;
            }
        }
        return left;
    }
}
