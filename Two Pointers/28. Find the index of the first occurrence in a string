Given two strings, returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
Example 1:
Input: haystack = "sadbutsad", needle = "sad"
Output: 0

Example 2:
Input: haystack = "leetcode", needle = "leeto"
Output: -1

Approach 1: Built-in function
Time complexity: O(m * n)
Space complexity: O(1)

class Solution {
    public int strStr(String haystack, String needle) {
        return haystack.indexOf(needle);
    }
}

Approach 2: Sliding window
Traverse each possible substring of length m in the haystack and check if it is equal to the needle.
Time complexity: O(m * n)
Space complexity: O(1)

public class Solution {
    public int strStr(String haystack, String needle) {
        int m = haystack.length();
        int n = needle.length();
        for (int i = 0; i < m - n + 1; i++) {
            int j = 0;
            for (j = 0; j < n; j++) {
                if (haystack.charAt(i + j) != needle.charAt(j)) {
                    break;
                }
            }
            if (j == n) {
                return i;
            }
        }
        return -1;
    }
}

public class Solution {
    public int strStr(String haystack, String needle) {
        int m = haystack.length();
        int n = needle.length();
        for (int i = 0; i <= m - n; i++) {
            if (haystack.substring(i, i + n).equals(needle)) {
                return i;
            }
        }
        return -1;
    }
}

Approach 3: Rabin-Karp algorithm (Single Hash)
Time complexity: O(m * n)
Space complexity: O(1)

Approach 4: Rabin-Karp algorithm (Double Hash)
Time complexity: O(n)
Space complexity: O(1)

Approach 5: Knuth-Morris-Pratt algorithm
Time complexity: O(n)
Space complexity: O(m)
