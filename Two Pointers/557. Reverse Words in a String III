Question: Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

Example 1:
Input: s = "Let's take LeetCode contest"
Output: "s'teL ekat edoCteeL tsetnoc"

Example 2:
Input: s = "God Ding"
Output: "doG gniD"

Approach 1: Traverse and Reverse each character one by one
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public String reverseWords(String s) {
        StringBuilder result = new StringBuilder();
        int lastSpaceIndex = -1;
        for (int i = 0; i < s.length(); i++) {
            if ((i == s.length() - 1) || s.charAt(i) == ' ') {
                int j = (i == s.length() - 1) ? i : i - 1;
                for (; j > lastSpaceIndex; j--) {
                    result.append(s.charAt(j));
                }
                if (strIndex != s.length() - 1) {
                    result.append(' ');
                }
                lastSpaceIndex = i;
            }
        }
        return new String(result);
    }
}

Approach 2: Two pointers
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public String reverseWords(String s) {
        int lastSpaceIndex = -1;
        char[] ch = s.toCharArray();
        int len = s.length();
        for (int i = 0; i <= len; i++) {
            if (i == len || chArray[i] == ' ') {
                int startIndex = lastSpaceIndex + 1;
                int endIndex = strIndex - 1;
                while (startIndex < endIndex) {
                    char temp = chArray[startIndex];
                    ch[startIndex++] = ch[endIndex];
                    ch[endIndex--] = temp;
                }
                lastSpaceIndex = i;
            }
        }
        return new String(chArray);
    }

}
