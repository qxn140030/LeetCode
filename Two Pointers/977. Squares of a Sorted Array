Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.
Example 1:
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].

Example 2:
Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]

Approach 1: Sort
Time complexity: O(nlogn)
Space complexity: O(logn)

class Solution {
    public int[] sortedSquares(int[] nums) {
        int n = nums.length;
        int[] rst = new int[n];
        for (int i = 0; i < nums.length; i++) {
            rst[i] = nums[i] * nums[i];
        }
        Arrays.sort(rst);
        return rst;
    }
}

Approach 2: Two Pointers
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int[] sortedSquares(int[] nums) {
        int n = nums.length, i = 0, j = n - 1;
        int[] rst = new int[n];
        for (int idx = n - 1; idx >= 0; idx--) {
            if (Math.abs(nums[i]) > Math.abs(nums[j])) {
                rst[idx] = nums[i] * nums[i];
                i++;
            } else {
                rst[idx] = nums[j] * nums[j];
                j--;
            }
        }
        return rst;
    }
}
