Compare two version numbers version1 and version2.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.
You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the
second first-level revision.
Here is an example of version numbers ordering: 0.1 < 1.1 < 1.2 < 13.37
Example 1:
Input: version1 = "1.01", version2 = "1.001"
Output: 0
Explanation: Ignoring leading zeroes, both "01" and "001" represent the same integer "1".

Example 2:
Input: version1 = "1.0", version2 = "1.0.0"
Output: 0
Explanation: version1 does not specify revision 2, which means it is treated as "0".

Example 3:
Input: version1 = "0.1", version2 = "1.1"
Output: -1

Approach 1: Split + Parse, Two Pass
Time complexity: O(m + n)
Space complexity: O(m + n)

class Solution {
    public int compareVersion(String version1, String version2) {
        String[] v1 = version1.split("\\.");
        String[] v2 = version2.split("\\.");
        int m = v1.length, n = v2.length;
        for (int i = 0, j = 0; i < m || j < n; i++, j++) {
            int val1 = i < m ? Integer.valueOf(v1[i]) : 0;
            int val2 = j < n ? Integer.valueOf(v2[j]) : 0;
            if (val1 != val2) {
                return val1 > val2 ? 1 : -1;
            }
        }
        return 0;
    }
}

Approach 2: Two Pointers, One Pass
Rather than splitting the string all at once with the split() function, we could also split the string on the fly, 
through which we only need to iterate through the revisions once.
Time complexity: O(max(m, n))
Space complexity: O(max(m, n)) to store a substring of the input string for integer conversion.

public int compareVersion(String version1, String version2) {
    int i = 0, m = version1.length(), j = 0, n = version2.length();
    while (i < m || j < n) {
        int val1 = 0;
        while (i < m && version1.charAt(i) != '.') {
            val1 = val1 * 10 + (version1.charAt(i) - '0');
            i++;
        }
        int val2 = 0;
        while (j < n && version2.charAt(j) != '.') {
            val2 = val2 * 10 + (version2.charAt(j) - '0');
            j++;
        }
        i++;
        j++;
        if (val1 != val2) {
            return val1 > val2 ? 1 : -1;
        }
    }
    return 0;
}
