Given an array nums of integers and integer k, return the maximum sum such that there exists i < j with nums[i] + nums[j] = sum and sum < k. 
If no i, j exist satisfying this equation, return -1.
Example 1:
Input: nums = [34,23,1,24,75,33,54,8], k = 60
Output: 58
Explanation: We can use 34 and 24 to sum 58 which is less than 60.

Example 2:
Input: nums = [10,20,30], k = 15
Output: -1
Explanation: In this case it is not possible to get a pair sum less that 15.

Approach 1: Brute Force
Time Complexity: O(n^2)
Space Complexity: O(1)

class Solution {
    public int twoSumLessThanK(int[] nums, int k) {
        int n = nums.length, rst = -1;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int sum = nums[i] + nums[j];
                if (sum < k) {
                    rst = Math.max(rst, sum);
                }
            }
        }
        return rst;
    }
}

Approach 2: Two Pointers
Time Complexity: O(nlogn)
Space Complexity: O(logn)

class Solution {
    public int twoSumLessThanK(int[] nums, int k) {
        Arrays.sort(nums);
        int i = 0, j = nums.length - 1, rst = -1;
        while (i < j) {
            int sum = nums[i] + nums[j];
            if (sum >= k) {
                j--;
            } else {
                rst = Math.max(rst, sum);
                i++;
            }
        }
        return rst;
    }
}

Approach 3: Binary Search
Time Complexity: O(nlogn)
Space Complexity: O(logn)

class Solution {
    public int twoSumLessThanK(int[] nums, int k) {
        Arrays.sort(nums);
        int n = nums.length, rst = -1;
        for (int i = 0; i < nums.length; ++i) {
            int idx = Arrays.binarySearch(nums, i + 1, n, k - nums[i] - 1);
            int j = idx >= 0 ? idx : ~idx;
            if (j == n || nums[j] > k - nums[i] - 1) {
                j--;
            }
            if (j > i) {
                rst = Math.max(rst, nums[i] + nums[j]);
            }
        }
        return rst;
    }
}

Approach 4: Counting Sort
Time Complexity: O(m + n), where m corresponds to the range of values in the input array.
Space Complexity: O(m)

class Solution {
    public int twoSumLessThanK(int[] nums, int k) {
        int[] count = new int[1001];
        for (int num : nums) {
            count[num]++;
        }
        int low = 1, high = 1000, rst = -1;
        while (low <= high) {
            if (low + high >= k || count[high] == 0) {
                high--;
            } else {
                if (count[low] > (low < high ? 0 : 1)) {
                    rst = Math.max(rst, low + high);
                }
                low++;
            }
        }
        return rst;
    }
}
