Given two nodes of a binary tree p and q, return their lowest common ancestor (LCA).

Each node will have a reference to its parent node. The definition for Node is below:

class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
}
According to the definition of LCA on Wikipedia: "The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself)."

Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Example 2:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the LCA definition.

Example 3:

Input: root = [1,2], p = 1, q = 2
Output: 1

All Node.val are unique.

Approach 1: Using HashSet to track ancestors.

public Node lowestCommonAncestor(Node p, Node q) {
    Set<Integer> seen = new HashSet<>();
    while (p != null || q != null) {
        if (p != null) {
            if (!seen.add(p.val)) {        // return false if the element was already in the set.
                return p;
            }
            p = p.parent;
        }
        if (q != null) {
            if (!seen.add(q.val)) {
                return q;
            }
            q = q.parent;
        }
    }
    return null;
}

Approach 2: Two Pointers
it balances the paths by switching starting points. Once both pointers walk the same total distance, theyâ€™ll meet at the LCA.

public Node lowestCommonAncestor(Node p, Node q) {
    Node a = p, b = q;
    while (a != b) {
        a = (a == null) ? q : a.parent;
        b = (b == null) ? p : b.parent;
    }
    return a;
}
