Question: Write a function that reverse a string. The input string is given as an array of characters s.
You must do this by modifying the input array in-place with O(1) extra memory.

Example 1:
Input: s = ["h","e","l","l","o"]
Output: ["o","l","l","e","h"]

Example 2:
Input: s = ["H","a","n","n","a","h"]
Output: ["h","a","n","n","a","H"]

Approach 1: Recursion, in-place
in-place algorithm is an algorithm which transforms input using no auxiliary data structure.
space is used by many actors, not only by data structures.
Time complexity: O(n) to perform N / 2 swaps.
Space complexity: O(n) to keep the recursion stack.

class Solution {
  public void helper(char[] s, int left, int right) {
    if (left >= right) {
        return;
    }
    char tmp = s[left];
    s[left++] = s[right];
    s[right--] = tmp;
    helper(s, left, right);
  }
  public void reverseString(char[] s) {
    helper(s, 0, s.length - 1);
  }
}

Approach 2: Iteration
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public void reverseString(char[] s) {
        if (s == null || s.length < 2) {
            return;
        }
        for (int i = 0, j = s.length - 1; i < j; i++, j--) {
            char tmp = s[i];
            s[i] = s[j];
            s[j] = tmp;
        }
    }
}
