Given a sorted array of integers nums and integer values a, b and c. Apply a function of the form f(x) = ax^2 + bx + c to
each element x in the array.
The returned array must be in sorted order.
Expected time complexity: O(n)
Example:
nums = [-4, -2, 2, 4], a = 1, b = 3, c = 5, Result: [3, 9, 15, 33]
nums = [-4, -2, 2, 4], a = -1, b = 3, c = 5, Result: [-23, -5, 1, 7]

Approach 1:
Time complexity: O()
Space complexity: O()

public class Solution {
    public int[] sortTransformedArray(int[] nums, int a, int b, int c) {
        int[] rst = new int[nums.length];
        if (a == 0) {
            if (b >= 0) {
                for (int i = 0; i < nums.length; i++) {
                    rst[i] = calculate(nums[i], a, b, c);
                } 
            } else {
                for (int i = 0; i < nums.length; i++) {
                    rst[nums.length - 1 - i] = calculate(nums[i], a, b, c);
                }
            }
        } else if (a > 0) {
            int left = 0;
            int right = nums.length - 1;
            int index = nums.length - 1;
            while (left <= right) {
                int left_val = calculate(nums[left], a, b, c);
                int right_val = calculate(nums[right], a, b, c);
                if (left_val > right_val) {
                    rst[index--] = left_val;
                    left++;
                } else {
                    rst[index--] = right_val;
                    right--;
                }
            }
        } else {
            int left = 0;
            int right = nums.length - 1;
            int index = 0;
            while (left <= right) {
                int left_val = calculate(nums[left], a, b, c);
                int right_val = calculate(nums[right], a, b, c);
                if (left_val < right_val) {
                    rst[index++] = left_val;
                    left++;
                } else {
                    rst[index++] = right_val;
                    right--;
                }
            }
        }
        return rst;
    }
    private int calculate(int num, int a, int b, int c) {
        return a * num * num + b * num + c;
    }
}

Approach 2:
Time complexity: O()
Space complexity: O()

public class Solution {
    public int[] sortTransformedArray(int[] nums, int a, int b, int c) {
        int[] rst = new int[nums.length];
        int left = 0;
        int right = nums.length - 1;
        int index = a >= 0 ? nums.length - 1 : 0;
        while (left <= right) {
            if (a >= 0) {
                rst[index--] = calculate(nums[left], a, b, c) > calculate(nums[right], a, b, c) 
                               ? calculate(nums[left++], a, b, c) : calculate(nums[right--], a, b, c);
            } else {
                rst[index++] = calculate(nums[left], a, b, c) < calculate(nums[right], a, b, c) 
                               ? calculate(nums[left++], a, b, c) : calculate(nums[right--], a, b, c);
            }
        } 
        return rst;
    }
    private int calculate(int num, int a, int b, int c) {
        return a * num * num + b * num + c;
    }
}
