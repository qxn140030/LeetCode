Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. 
The relative order of the elements should be kept the same.
Example 1:
Input: nums = [1,1,1,2,2,3]
Output: 5, nums = [1,1,2,2,3,_]

Example 2:
Input: nums = [0,0,1,1,1,1,2,3,3]
Output: 7, nums = [0,0,1,1,2,3,3,_,_]

Approach 1: Popping Unwanted Duplicates
Time complexity: O(n^2)
Space complexity: O(1)

class Solution {
    public int removeDuplicates(int[] nums) {
        int count = 1, len = nums.length;
        for (int i = 1; i < len; i++) {
            if (nums[i] == nums[i - 1]) {
                count++;
                if (count > 2) {
                    removeElement(nums, i);
                    i--;
                    len--;
                }
            } else {
                count = 1;
            }
        }
        return len;
    }
    private int[] removeElement(int[] nums, int idx) {
        for (int i = idx + 1; i < nums.length; i++) {
            nums[i - 1] = nums[i];
        }
        return nums;
    }
}

Approach 2: Overwriting unwanted duplicates
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public int removeDuplicates(int[] nums) {
        int len = 1, count = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1]) {
                nums[len++] = nums[i];
                count = 1;
            } else if (count == 1) {
                nums[len++] = nums[i];
                count++;
            } 
        }
        return len;
    }
}
