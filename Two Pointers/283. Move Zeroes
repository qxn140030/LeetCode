Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Example 2:
Input: nums = [0]
Output: [0]

Note:
You must do this in-place without making a copy of the array.
Follow up:
Could you minimize the total number of operations done?

Approach 1: Two pointers
Fast pointer process new elements, if the new element is not 0, record it just after the last found non-0 element.
Slow pointer is the position of last found non-0 element.
After the fast pointer reaches the end of array, we simply fill all the indices after slow pointer with 0.
Time complexity: O(n), the total number of operations are sub-optimal.
Space complexity: O(1)

public class Solution {
    public void moveZeroes(int[] nums) {
        int j = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                nums[j++] = nums[i];
            } 
        }
        for (; j < nums.length; j++) {
            nums[j] = 0;
        }
    }
}

Approach 2: Two pointers - minimize the total number of operations
When we encounter a non-zero element, swap elements pointed by fast and slow pointers.
Time complexity: O(n), the total number of operations (array writes) are optimal. it's Number of non-0 elements. 
much better best-case (when all elements are non-0) complexity. 
Space complexity: O(1)

public class Solution {
    public void moveZeroes(int[] nums) {
        int j = -1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                if (j == -1) {
                    j = i;
                }
            } else if (j != -1) {
                int tmp = nums[j];
                nums[j] = nums[i];
                nums[i] = tmp;
                j++;                 // Note.
            }
        }
    }
}
