Given two strings s and t, return true if they are both one edit distance apart, otherwise return false.
A string s is said to be one distance apart from a string t if you can:
- Insert exactly one character into s to get t.
- Delete exactly one character from s to get t.
- Replace exactly one character of s with a different character to get t.
Example 1:
Input: s = "ab", t = "acb"
Output: true. We can insert 'c' into s to get t.

Example 2:
Input: s = "", t = ""
Output: false. We cannot get t from s by only one step.

Approach 1: One pass
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public boolean isOneEditDistance(String s, String t) {
        int m = s.length(), n = t.length();
        if (Math.abs(m - n) > 1) {
            return false;
        }
        int i = 0, j = 0, count = 0;         
        while (i < m && j < n) {
            if (s.charAt(i) != t.charAt(j)) {
                count++;
                if (count > 1) {
                    return false;
                }
                if (m > n) {
                    i++;
                    continue;
                } else if (m < n) {
                    j++;
                    continue;
                }
            } 
            i++;
            j++;
        }
        if (i < m || j < n) {                 
            count++;
        }
        return count == 1;
    }
}
