Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target
number. The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less
than index2.
Please note that your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution.
Follow up:
What if we needed to consider integer overflow when adding two elements?
to prevent an overflow error, we could cast our numbers from int data type to long data type.
Alternatively, if we cannot use long integers, then we can check if numbers[low] > (1 << 31) - 1 - numbers[high] at the beginning of each iteration. 
If this condition is true, then numbers[low] + numbers[high] will result in integer overflow, and so we would move the larger index to the left.
Example 1:
Input: numbers = [2,7,11,15], target = 9
Output: [1,2], index1 = 1, index2 = 2. We return [1, 2].

Example 2:
Input: numbers = [2,3,4], target = 6
Output: [1,3]

Example 3:
Input: numbers = [-1,0], target = -1
Output: [1,2]

Approach 1: Two Pointers
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int i = 0, j = numbers.length - 1;
        while (i < j) {
            int sum = numbers[i] + numbers[j];
            if (sum == target) {
               return new int[]{i + 1, j + 1}; 
            } else if (sum < target) {
                i++;
            } else {
                j--;
            }
        }
        return new int[]{-1, -1};
    }
}

Approach 2: HashMap
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < numbers.length; i++) {
            if (map.containsKey(target - numbers[i])) {
                return new int[]{map.get(target - numbers[i]) + 1, i + 1};
            }
            map.put(numbers[i], i);
        }
        return new int[]{-1, -1};
    }
}
