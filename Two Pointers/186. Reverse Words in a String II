Given a character array s, reverse the order of the words.
A word is defined as a sequence of non-space characters. The words in s will be separated by a single space.
Your code must solve the problem in-place, i.e. without allocating extra space.
Example 1:
Input: s = ["t","h","e"," ","s","k","y"," ","i","s"," ","b","l","u","e"]
Output: ["b","l","u","e"," ","i","s"," ","s","k","y"," ","t","h","e"]

Example 2:
Input: s = ["a"]
Output: ["a"]

Approach 1: Reverse the Whole String and Then Reverse Each Word
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public void reverseWords(char[] s) {
        reverse(s, 0, s.length - 1);
        reverseEachWord(s);
    }
    private void reverse(char[] s, int left, int right) {
        while (left < right) {
            char ch = s[left];
            s[left++] = s[right];
            s[right--] = ch;
        }
    }
    private void reverseEachWord(char[] s) {
        int n = s.length, start = 0, end = 0;
        while (start < n) {
            while (end < n && s[end] != ' ') {
                end++;
            } 
            reverse(s, start, end - 1);
            start = end + 1;
            end++;
        }
    }
}
