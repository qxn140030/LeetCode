Question: Given a string s, return true if the s can be palindrome after deleting at most one character from it.

Example 1:
Input: s = "aba"
Output: true

Example 2:
Input: s = "abca"
Output: true, by deleting the character 'c'

Example 3:
Input: s = "abc"
Output: false

Approach 1: Brute force
delete each character and then test palindromicity.
Time complexity: O(n^2)
Space complexity: O(1)

Approach 2: Recursion
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public boolean validPalindrome(String s) {
        if (s == null || s.length() < 2) {
            return true;
        }
        return isValid(s, 0, s.length() - 1, false);
    }

    private boolean isValid(String s, int i, int j, boolean flag) {
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                if (flag) {
                    return false;
                } else {
                    return isValid(s, i + 1, j, true) || isValid(s, i, j - 1, true);
                }
            }
            i++;
            j--;
        }
        return true;
    } 
}

Approach 3: Two pointers (Iteration)
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public boolean validPalindrome(String s) {
        if (s == null || s.length() < 2) {
            return true;
        }
        int i = 0;
        int j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return isPalindrome(s, i + 1, j) || isPalindrome(s, i, j - 1);
            } 
            i++;
            j--;
        }
        return true;
    }

    private boolean isPalindrome(String s, int i, int j) {
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    } 
}
