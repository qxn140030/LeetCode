Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).
The replacement must be in-place, do not allocate extra memory.
Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 -> 1,3,2      3,2,1 -> 1,2,3     1,1,5 -> 1,5,1

Approach 1: Brute force
find out every possible permutation.
Time complexity: O(n!)
Space complexity: O(n), since an array will be used to store the permutations.

Approach 2: Single Pass
for any given sequence that is in descending order, no next larger permutation is possible.
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public void nextPermutation(int[] nums) {  
        for (int i = nums.length - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {                        // Find first decreasing element.                     
                for (int j = nums.length - 1; j > i; j--) {
                    if (nums[i] < nums[j]) {                    // Find number just larger than nums[i]      
                        swap(nums, i, j);                       
                        reverse(nums, i + 1, nums.length - 1);  
                        return;
                    }
                }
            }
        }
        reverse(nums, 0, nums.length - 1);                      // If the input is in descending order, just reverse it.
    }
    private void swap(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
    private void reverse(int[] nums, int left, int right) {
        for (int i = left, j = right; i < j; i++, j--) {
            swap(nums, i, j);
        }
    }
}
