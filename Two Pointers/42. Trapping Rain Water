Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.
For example, 
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.

Approach 1: Brute force
Time complexity: O(n^2)
Space complexity: O(1)

class Solution {
    public int trap(int[] height) {
        int ans = 0, size = height.length;
        for (int i = 1; i < size - 1; i++) {
            int left = 0, right = 0;
            for (int j = i; j >= 0; j--) {            // Search the left part for max bar size
                left = Math.max(left, height[j]);
            }
            for (int j = i; j < size; j++) {          // Search the right part for max bar size
                right = Math.max(right, height[j]);
            }
            ans += Math.min(left, right) - height[i];
        }
        return ans;
    }
}

Approach 2: DP
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int trap(int[] height) {
        int size = height.length, ans = 0;
        int[] left = new int[size];
        int[] right = new int[size];
        left[0] = height[0];
        for (int i = 1; i < size; i++) {
            left[i] = Math.max(height[i], left[i - 1]);
        }
        right[size - 1] = height[size - 1];
        for (int i = size - 2; i >= 0; i--) {
            right[i] = Math.max(height[i], right[i + 1]);
        }
        for (int i = 1; i < size - 1; i++) {
            ans += Math.min(left[i], right[i]) - height[i];
        }
        return ans;
    }
}

Approach 3: Using stacks
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int trap(int[] height) {
        int size = height.length;
        int ans = 0, cur = 0;
        Stack<Integer> stack = new Stack<>();
        while (cur < size) {
            while (!stack.empty() && height[cur] > height[stack.peek()]) {
                int top = stack.pop();
                if (stack.empty()) {
                    break;
                }     
                int distance = cur - stack.peek() - 1;
                int boundedHeight = Math.min(height[cur], height[stack.peek()]) - height[top];
                ans += distance * boundedHeight;
            }
            stack.push(cur++);
        }
        return ans;
    }
}

Approach 4: Two Pointers
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public int trap(int[] height) {
        int size = height.length
        int left = 0, right = size - 1, rst = 0;
        int smaller = 0;                // Note: mark the smaller one of the left and right pointer.
        while (left < right) {
            if (height[left] < height[right]) {
                smaller = height[left];
                while (left < right && smaller >= height[left]) {     // compare with the smaller every time.
                    rst += smaller - height[left];
                    left++;
                }
            } else {
                smaller = height[right];
                while (left < right && smaller >= height[right]) {
                    rst += smaller - height[right];
                    right--;
                }
            }
        }
        return rst;
    }
}
