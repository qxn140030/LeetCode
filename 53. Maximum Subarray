Find the contiguous subarray within an array (containing at least one number) which has the largest sum.
For example, given the array [-2,1,-3,4,-1,2,1,-5,4], the contiguous subarray [4,-1,2,1] has the largest sum = 6.
More practice: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach,
               which is more subtle.
               
Solution 1: DP. Time complexity: O(n). Space complexity: O(1).
public class Solution {
    public int maxSubArray(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int local = nums[0];
        int global = nums[0];
        for (int i = 1; i < nums.length; i++) {
            local = Math.max(nums[i], local + nums[i]);     // local max value must contain the current element.
            global = Math.max(global, local);
        }
        return global;
    }
}

Solution 2: Divide & Conquer. Time complexity: O(nlogn). Space complexity: O(logn).
public class Solution {
    public int maxSubArray(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        return maxSub(nums, 0, nums.length - 1);
    }
    private int maxSub(int[] nums, int start, int end) {
        if (start == end) {
            return nums[start];
        }
        int mid = start + (end - start) / 2;
        int leftMax = maxSub(nums, start, mid);
        int rightMax = maxSub(nums, mid + 1, end);
        int leftSuf = nums[mid];
        int rightPre = nums[mid + 1];
        int tmp = 0;
        for (int i = mid; i >= start; i--) {
            tmp += nums[i];
            if (tmp > leftSuf) {
                leftSuf = tmp;
            }
        }
        tmp = 0;
        for (int i = mid + 1; i <= end; i++) {
            tmp += nums[i];
            if (tmp > rightPre) {
                rightPre = tmp;
            }
        }
        return Math.max(leftSuf + rightPre, Math.max(leftMax, rightMax));
    }
}
