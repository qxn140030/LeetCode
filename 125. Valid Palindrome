Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.
For example, 
"A man, a plan, a canal: Panama" is a palindrome. "race a car" is not a palindrome.
Note: 
Have you consider that the string might be empty? This is a good question to ask during an interview.
For the purpose of this problem, we define empty string as valid palindrome.

Solution 1: using two pointers.
Time complexity: O(n). Space complexity: O(1).
public class Solution {
    public boolean isPalindrome(String s) {
        if (s == null || s.length() == 0) {
            return true;
        }
        s = s.toLowerCase();
        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            if ((s.charAt(left) < 'a' || s.charAt(left) > 'z') && (s.charAt(left) < '0' || s.charAt(left) > '9')) {
                left++;
                continue;
            }
            if ((s.charAt(right) < 'a' || s.charAt(right) > 'z') && (s.charAt(right) < '0' || s.charAt(right) > '9')) {
                right--;
                continue;
            }
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}

Solution 2: using a stack
Time complexity: O(n). Space complexity: O(n).
public class Solution {
    public boolean isPalindrome(String s) {
        if (s == null || s.length() == 0) {
            return true;
        }
        s = s.toLowerCase().replaceAll("[^a-z0-9]", "");      // replaceAll().
        Stack<Character> stack = new Stack<>();
        int len = s.length();
        int index = 0;
        while (index < len / 2) {
            stack.push(s.charAt(index++));
        }
        if (len % 2 == 1) {
            index++;
        }
        while (index < len) {
            if (s.charAt(index++) != stack.pop()) {
                return false;
            }
        }
        return true;
    }
}
