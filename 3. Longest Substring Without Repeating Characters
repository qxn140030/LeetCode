Given a string, find the length of the longest substring without repeating characters.
Examples: Given "abcabcbb", the answer is "abc", which the length is 3.
          Given "bbbbb", the answer is "b", with the length of 1.
          Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring,
          "pwke" is a subsequence and not a substring.

Solution 1: Brute Force [Time Limit Exceeded]
Check all the substring one by one to see if it has no duplicate character.
Time complexity: O(n^3).
Space complexity: O(min(n, m)). need O(k) space for checking a substring has no duplicate characters, 
where k is the size of the Set. it is upper bounded by the size of the string n and the size of the charset/alphabet m.
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        int n = s.length();
        int rst = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (uniqueSubstring(s, i, j)) {
                    rst = Math.max(rst, j - i + 1);
                } 
            }
        }
        return rst;
    }
    private boolean uniqueSubstring(String s, int start, int end) {
        Set<Character> hs = new HashSet<>();
        for (int i = start; i <= end; i++) {
            if (hs.contains(s.charAt(i))) {
                return false;
            } 
            hs.add(s.charAt(i));
        }
        return true;
    }
}

Solution 2: Sliding Window. By using HashSet as a sliding window, checking a character can be done in O(1).
Time complexity: O(n^2). Space complexity: O(min(n, m)). need O(k) space for the sliding window. m is the size of alphabet.
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        int n = s.length();
        int rst = 0;
        for (int i = 0; i < n; i++) {
            Set<Character> hs = new HashSet<>();
            for (int j = i; j < n; j++) {
                if (hs.contains(s.charAt(j))) {
                    break;
                }
                hs.add(s.charAt(j));
                rst = Math.max(rst, j - i + 1);
            }
        }
        return rst;
    }
}

Solution 3: Sliding Window Optimized
Instead of using HashSet to tell if a character exists or not, define a mapping of the characters to its index.
then we can skip the characters immediately when found a repeated character.
Time complexity: O(n). Space complexity: O(min(n, m)). same.
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        int n = s.length();
        int longest = 0;
      	int start = 0;
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (map.containsKey(s.charAt(j))) {
                start = Math.max(map.get(s.charAt(i)) + 1, start);      
            }
            map.put(s.charAt(i), i);
            longest = Math.max(longest, i - start + 1);
        }
        return longest;
    }
}
