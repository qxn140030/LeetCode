You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.
Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.

Example 1:
Input: graph = [[1,2,3],[0],[0],[0]]
Output: 4
Explanation: One possible path is [1,0,2,0,3]

Example 2:
Input: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]
Output: 4
Explanation: One possible path is [0,1,4,2,3]

Approach 1: BFS
Time complexity: O(n * 2^n)
Space complexity: O(n * 2^n)

public int shortestPathLength(int[][] graph) {
    int n = graph.length;
    if (n <= 1) {
        return 0;
    }
    int target = (1 << n) - 1;
    boolean[][] visited = new boolean[n][1 << n];      // visited[u][mask]: at node u whether visited set 'mask'
    Deque<int[]> q = new ArrayDeque<>();
    for (int i = 0; i < n; i++) {                      // Multi-source init: start from each node with only itself visited
        int mask = 1 << i;
        visited[i][mask] = true;
        q.offer(new int[]{i, mask});
    }
    int steps = 0;
    while (!q.isEmpty()) {
        int sz = q.size();
        for (int i = 0; i < sz; i++) {
            int[] cur = q.poll();
            int u = cur[0], mask = cur[1];
            if (mask == target) {
                return steps; 
            }
            for (int v : graph[u]) {
                int nmask = mask | (1 << v);
                if (!visited[v][nmask]) {
                    visited[v][nmask] = true;
                    q.offer(new int[]{v, nmask});
                }
            }
        }
        steps++;
    }
    return -1;                                   // unreachable (shouldn't happen for connected graphs)
}
