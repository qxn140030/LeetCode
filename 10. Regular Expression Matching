Implement regular expression matching with support for '.' and '*'.
'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).
The function prototype should be: bool isMatch(const char *s, const char *p)
Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true

Solution 1: recursive. Time complexity: exponential. Space complexity: exponential.
public class Solution {
    public boolean isMatch(String s, String p) {
        if (p == null || p.length() == 0) {          // Base case: length == 0.
            return s == null || s.length() == 0;
        }
        if (p.length() == 1) {         // Base case: length == 1.
            return s.length() == 1 && (s.charAt(0) == p.charAt(0) || p.charAt(0) == '.');
        }
        if (p.charAt(1) != '*') {      // easy case: when the second char of p is not '*'.
            return s.length() > 0 && (s.charAt(0) == p.charAt(0) || p.charAt(0) == '.') && isMatch(s.substring(1), p.substring(1));
        } else {                                   // complex case.
            if (isMatch(s, p.substring(2))) {      // the preceding char + '*' stand for 0 elements.
                return true;
            }                                      // stand for 1 or more preceding element.
            return s.length() > 0 && (s.charAt(0) == p.charAt(0) || p.charAt(0) == '.') && isMatch(s.substring(1), p);
        }
    }
}

Solution 2: DP. Time complexity: O(n^2). Space complexity: O(n^2).
public class Solution {
    public boolean isMatch(String s, String p) {
        if (p == null || p.length() == 0) {
            return s == null || s.length() == 0;
        }
        int m = s.length();
        int n = p.length();
        boolean[][] dp = new boolean[m + 1][n + 1];
        dp[0][0] = true;
        for (int j = 1; j <= n; j++) {
            if (p.charAt(j - 1) == '*') {
                dp[0][j] = dp[0][j - 2];
            }
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                char si = s.charAt(i - 1);
                char pj = p.charAt(j - 1);
                if (pj != '*') {
                    if (pj == '.' || si == pj) {
                        dp[i][j] = dp[i - 1][j - 1];
                    }
                } else {
                    if (p.charAt(j - 2) != '.' && si != p.charAt(j - 2)) {
                        dp[i][j] = dp[i][j - 2];                              // stand for 0 element.
                    } else {
                        dp[i][j] = dp[i][j - 2] || dp[i][j - 1] || dp[i - 1][j];
                    }    // stand for 0                  1             more elements.
                }
            }
        }
        return dp[m][n];
    }
}
