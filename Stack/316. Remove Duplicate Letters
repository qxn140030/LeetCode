Given a string s, remove duplicate letters so that every letter appears once and only once. 
You must make sure your result is the smallest in lexicographical order among all possible results.
Example 1:
Input: s = "bcabc"
Output: "abc"

Example 2:
Input: s = "cbacdcbc"
Output: "acdb"

Approach 1: Greedy - Solving with Stack
Time complexity: O(n)
Space complexity: O(1), both stack and seen are bounded by constant.

public String smallestSubsequence(String s) {
    int[] count = new int[26];
    for(char c : s.toCharArray()) {
        count[c - 'a']++;
    }
    boolean[] visited = new boolean[26];        // to keep track of visited character so that we don't use them if present in answer.
    Stack<Character> stack = new Stack<>();
    for(char c : s.toCharArray()){
        count[c - 'a']--;                       // decrement the frequncy of character since we are using it in answer.
        if (visited[c - 'a']) {
            continue;
        }
        while (!stack.isEmpty() && c < stack.peek() && count[stack.peek() - 'a'] > 0) {
            visited[stack.pop() - 'a'] = false;
        }
        stack.push(c);
        visited[c - 'a'] = true;
    }
    StringBuilder sb = new StringBuilder();
    while (!stack.isEmpty()) {
        sb.append(stack.pop());
    }
    return sb.reverse().toString();
}
