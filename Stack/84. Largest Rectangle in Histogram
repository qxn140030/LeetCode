Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of
largest rectangle in the histogram.
For example,
Given heights = [2,1,5,6,2,3], return 10.

Approach 1: Brute Force
We can simply start off by considering every possible pair of bars.
Time complexity: O(n^3)
Space complexity: O(1)

class Solution {
    public int largestRectangleArea(int[] heights) {
        int maxarea = 0;
        for (int i = 0; i < heights.length; i++) {
            for (int j = i; j < heights.length; j++) {
                int minheight = Integer.MAX_VALUE;
                for (int k = i; k <= j; k++) {
                    minheight = Math.min(minheight, heights[k]);
                }
                maxarea = Math.max(maxarea, minheight * (j - i + 1));
            }
        }
        return maxarea;
    }
}

Approach 2: Better Brute Force
We can find the bar of minimum height for current pair by using the minimum height bar of the previous pair.
Time complexity: O(n^2)
Space complexity: O(1)

class Solution {
    public int largestRectangleArea(int[] heights) {
        int maxarea = 0;
        for (int i = 0; i < heights.length; i++) {
            int minheight = Integer.MAX_VALUE;
            for (int j = i; j < heights.length; j++) {
                minheight = Math.min(minheight, heights[j]);
                maxarea = Math.max(maxarea, minheight * (j - i + 1));
            }
        }
        return maxarea;
    }
}

For every index as a right bound, try all the left ones to get the max. 
public class Solution {
    public int largestRectangleArea(int[] heights) {
        int rst = 0;
        for (int i = 0; i < heights.length; i++) {
            if (i < heights.length - 1 && heights[i] <= heights[i + 1]) {     // pruning. beacuse if heights[i] <= heights[i + 1],
                continue;                        // whatever the left bound is, heights[i + 1] will always give you a larger area.
            }
            int minH = heights[i];
            for (int j = i; j >= 0; j--) {
                minH = Math.min(minH, heights[j]);
                rst = Math.max(rst, minH * (i - j + 1));
            }
        }
        return rst;
    }
}

Approach 3: Divide and Conquer
Time complexity: O(nlogn) in average case, O(n^2) in worst case.
Space complexity: O(n)

class Solution {
    public int largestRectangleArea(int[] heights) {
        return calculateArea(heights, 0, heights.length - 1);
    }
    private int calculateArea(int[] heights, int start, int end) {
        if (start > end) {
            return 0;
        }
        int minindex = start;
        for (int i = start; i <= end; i++) {
            if (heights[i] < heights[minindex]) {
                minindex = i;
            }
        }
        return Math.max(heights[minindex] * (end - start + 1),
                        Math.max(calculateArea(heights, start, minindex - 1), calculateArea(heights, minindex + 1, end)));
    }
}

Approach 4: Using Monotonic Stack
Maintain a stack to store indicies, only keep the increasing bars.
Keep pushing the current bar's index onto the stack until we get two successive numbers in descending order
Time complexity: O(n)
Space complexity: O(n)

public int largestRectangleArea(int[] heights) {
    int rst = 0;
    Stack<Integer> stack = new Stack<>();
    for (int i = 0; i <= heights.length; i++) {
        int cur = i == heights.length ? -1 : heights[i];
        while (!stack.isEmpty() && cur <= heights[stack.peek()]) {
            int h = heights[stack.pop()];
            int w = stack.isEmpty() ? i : i - stack.peek() - 1;
            rst = Math.max(rst, w * h);
        }
        stack.push(i);
    }
    return rst;
}
