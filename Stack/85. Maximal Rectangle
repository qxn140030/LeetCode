Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.
For example, given the following matrix:
1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0      Return 6.

Approach 1: Brute Force
Trivially we can enumerate every possible rectangle. This is done by iterating over all possible combinations of coordinates (x1, y1) and (x2, y2) 
and letting them define a rectangle with the coordinates being opposite corners.
Time complexoty: O(n^3 * m^3), with n being the number of rows and m the number of columns.
Iterating over all possible coordinates is O(n^2 * m^2), and iterating over the rectangle defined by two coordinates is an additional O(n * m).
Space complexity: O(1)

Approach 2: DP
Time complexity: O(m * n^2)
Computing the maximum area for one point takes O(n) time, since it iterates over the values in the same column.
Space complexity: O(m * n)

class Solution {
    public int maximalRectangle(char[][] matrix) {
        int maxarea = 0, m = matrix.length, n = matrix[0].length;;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == '1'){
                    dp[i][j] = j == 0 ? 1 : dp[i][j - 1] + 1;      // compute the maximum width and update dp with it.
                    int width = dp[i][j];
                    for (int k = i; k >= 0; k--) {                 // compute the maximum area rectangle with a lower right corner at [i, j].
                        width = Math.min(width, dp[k][j]);
                        maxarea = Math.max(maxarea, width * (i - k + 1));
                    }
                }
            }
        } 
        return maxarea;
    }
}

Approach 3: Using Stack
Time complexity: O(m * n)
Space complexity: O(m)


public class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        int m = matrix.length, n = matrix[0].length;
        int[][] height = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0) {
                    height[i][j] = matrix[i][j] == '1' ? 1 : 0;
                } else {
                    height[i][j] = matrix[i][j] == '1' ? height[i - 1][j] + 1 : 0;
                }
            }
        }
        int rst = 0;
        for (int i = 0; i < m; i++) {
            Stack<Integer> stack = new Stack<>();  
            for (int j = 0; j <= n; j++) {
                int cur = j == n ? -1 : height[i][j];
                while (!stack.empty() && cur <= height[i][stack.peek()]) {
                    int h = height[i][stack.pop()];
                    int w = stack.empty() ? j : j - stack.peek() - 1;
                    rst = Math.max(rst, w * h);
                }
                stack.push(j);
            }
        }
        return rst;
    }
}
