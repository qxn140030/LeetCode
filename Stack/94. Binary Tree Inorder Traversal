Question: Given the root of a binary tree, return the inorder traversal of its nodes' values.
For example: Given binary tree [1,null,2,3],
   1
    \
     2
    /
   3
return [1,3,2].
Follow up: 
Recursive solution is trivial, could you do it iteratively?

Approach 1: Recursive
Time complexity: O(n)
Space complexity: O(logn) in average, O(n) in the worst case

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> rst = new ArrayList<>();
        if (root == null) {
            return rst;
        }
        rst.addAll(inorderTraversal(root.left));
        rst.add(root.val);
        rst.addAll(inorderTraversal(root.right));
        return rst;
    }
}

Approach 2: Iterative using Stack
Time complexity: O(n)
Space complexity: O(n)

public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> rst = new ArrayList<Integer>();
        Stack<TreeNode> stack = new Stack<>();
        while (root != null || !stack.empty()) {
            while (root != null) {
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            rst.add(root.val);
            root = root.right;
        }
        return rst;
    }
}

Approach 3: Morris traversal
use a data structure - Threaded Binary Tree.
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        TreeNode curr = root;
        TreeNode pre;
        while (curr != null) {
            if (curr.left == null) {
                res.add(curr.val);
                curr = curr.right;            // move to next right node
            } else {                          // has a left subtree
                pre = curr.left;
                while (pre.right != null) {   // find rightmost
                    pre = pre.right;
                }
                pre.right = curr;             // put cur after the pre node
                TreeNode temp = curr;         // store cur node
                curr = curr.left;             // move cur to the top of the new tree
                temp.left = null;             // original cur left be null, avoid infinite loops
            }
        }
        return res;
    }
}
