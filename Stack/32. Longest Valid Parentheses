Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.
For "(()", the longest valid parentheses substring is "()", which has length = 2.
Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.

Approach 1: Brute Force
Time complexity: O(n^3)
Space cpmplexity: O(n)

class Solution {
    public int longestValidParentheses(String s) {
        int maxlen = 0;
        for (int i = 0; i < s.length(); i++) {
            for (int j = i + 2; j <= s.length(); j += 2) {
                if (isValid(s.substring(i, j))) {
                    maxlen = Math.max(maxlen, j - i);
                }
            }
        }
        return maxlen;
    }
    private boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                stack.push('(');
            } else if (!stack.empty() && stack.peek() == '(') {
                stack.pop();
            } else {
                return false;
            }
        }
        return stack.empty();
    }
}

Approach 2: DP
ith element of array represents the length of the longest valid substring ending at ith index.
substrings ending with ‘(’ will always contain '0' at their corresponding dp indices. Thus, we update the array only when ‘)’ is encountered.
Time complexity: O(n)
Space cpmplexity: O(n)

class Solution {
    public int longestValidParentheses(String s) {
        int rst = 0;
        int dp[] = new int[s.length()];
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == ')') {
                if (s.charAt(i - 1) == '(') {
                    dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;                                // string looks like ".......()"
                } else if (i - dp[i - 1] > 0 && s.charAt(i - dp[i - 1] - 1) == '(') {    // string looks like ".......))"
                    dp[i] = dp[i - 1] + ((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;
                }
                rst = Math.max(rst, dp[i]);
            }
        }
        return rst;
    }
}

Approach 3: Using Stack
Time complexity: O(n)
Space cpmplexity: O(n)

class Solution {
    public int longestValidParentheses(String s) {
        int rst = 0;
        Stack<Integer> stack = new Stack<>();
        stack.push(-1);                            // Find the length of the longest valid string.
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                stack.push(i);                     // For every ‘(’ encountered, we push its index onto the stack.          
            } else {
                stack.pop();                       // For every ‘)’ encountered, we pop the topmost element.
                if (stack.empty()) {
                    stack.push(i);     
                } else {
                    rst = Math.max(rst, i - stack.peek());
                }
            }
        }
        return rst;
    }
}

class Solution {
    public int longestValidParentheses(String s) {
        int max = 0, start = 0;
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                stack.push(i);
            } else {
                if (stack.empty()) {
                    start = i + 1;
                } else {
                    stack.pop();    
                    if (stack.empty()) {
                        max = Math.max(max, i - start + 1);
                    } else {
                        max = Math.max(max, i - stack.peek());
                    } 
                }
            }
        }
        return max;
    }
}

Approach 4: Without extra space
Step 1: left to right scan
Whenever left becomes equal to right, we calculate the length of the current valid string and keep track of maximum length substring found so far. 
If right becomes greater than left we reset left and right to 0.
Step 2: right to left scan
Whenever left equals to right, calculate the length of the current valid string and keep track of maximum length substring found so far. 
If left becomes greater than right we reset left and right to 0.
Time complexity: O(n)
Space cpmplexity: O(1)

class Solution {
    public int longestValidParentheses(String s) {
        int left = 0, right = 0, maxlength = 0;               // two counters, left and right.
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                left++;
            } else {
                right++;
            }
            if (left == right) {
                maxlength = Math.max(maxlength, 2 * right);
            } else if (right > left) {                        // Note.
                left = right = 0;
            }
        }
        left = right = 0;
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) == '(') {
                left++;
            } else {
                right++;
            }
            if (left == right) {
                maxlength = Math.max(maxlength, 2 * left);
            } else if (left > right) {                       // Note.
                left = right = 0;
            }
        }
        return maxlength;
    }
}
