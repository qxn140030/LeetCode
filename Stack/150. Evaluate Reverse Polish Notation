Evaluate the value of an arithmetic expression in Reverse Polish Notation.
Valid operators are +, -, *, /. Each operand may be an integer or another expression.
Some examples:
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6
  
Approach 1: Reducing the List
Time complexity: O(n^2)
Deleting an item from an ArrayList or Array is O(n), because all the items after have to be shuffled down one place to fill in the gap.
Space complexity: O(n)

class Solution {
    public int evalRPN(String[] tokens) {
        List<String> list = new ArrayList<>();
        for (String s : tokens) {
            list.add(s);
        } 
        int len = tokens.length, pos = 0;
        while (len > 1) {
            while (!"+-*/".contains(list.get(pos))) {
                pos++;
            }
            int num1 = Integer.parseInt(list.get(pos - 2));
            int num2 = Integer.parseInt(list.get(pos - 1));
            int newValue = 0;
            switch (list.get(pos)) {
                case "+":
                    newValue = num1 + num2;
                    break;
                case "-":
                    newValue = num1 - num2;
                    break;
                case "*":
                    newValue = num1 * num2;
                    break;
                case "/":
                    newValue = num1 / num2;
                    break;
            }
            list.set(pos, Integer.toString(newValue));
            list.remove(--pos);
            list.remove(--pos);
            len -= 2;
        }
        return Integer.parseInt(list.get(0));
    }
}

Approach 2: Reducing the List In-place
Time complexity: O(n^2)
Space complexity: O(1)

class Solution {
    public int evalRPN(String[] tokens) {
        int len = tokens.length, pos = 0;
        while (len > 1) {
            while (!"+-*/".contains(tokens[pos])) {
                pos++;
            }
            int num1 = Integer.parseInt(tokens[pos - 2]);
            int num2 = Integer.parseInt(tokens[pos - 1]);
            int newValue = 0;
            switch (tokens[pos]) {
                case "+":
                    newValue = num1 + num2;
                    break;
                case "-":
                    newValue = num1 - num2;
                    break;
                case "*":
                    newValue = num1 * num2;
                    break;
                case "/":
                    newValue = num1 / num2;
                    break;
            }
            tokens[pos] = Integer.toString(newValue);
            delete2AtIndex(tokens, pos - 2, len);
            len -= 2;
            pos--;
        }
        return Integer.parseInt(tokens[0]);
    }
    private void delete2AtIndex(String[] tokens, int pos, int len) {
        for (int i = pos; i < len - 2; i++) {
            tokens[i] = tokens[i + 2];
        }
    }
}

Approach 2: Stack
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int evalRPN(String[] tokens) {
        Deque<Integer> stack = new ArrayDeque<>();
        for (String s : tokens) {
            if ("+-*/".contains(s)) {
                int num2 = stack.pop();
                int num1 = stack.pop();
                switch (s) {
                    case "+":
                        stack.push(num1 + num2);
                        break;
                    case "-":
                        stack.push(num1 - num2);
                        break;
                    case "*":
                        stack.push(num1 * num2);
                        break;
                    case "/":
                        stack.push(num1 / num2);
                        break;
                }
            } else {
                stack.push(Integer.parseInt(s));
            }
        }
        return stack.pop();
    }
}
