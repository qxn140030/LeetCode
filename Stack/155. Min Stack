Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.

Approach 1: Stack of Value/ Minimum Pairs
Time complexity: O(1) for all operations.
Space complexity: O(n)

class MinStack {
    private Deque<int[]> stack = new ArrayDeque<>();
    public MinStack() {}   
    public void push(int val) {
        if (stack.isEmpty()) {
            stack.push(new int[]{val, val});
            return;
        }
        int currMin = stack.peek()[1];
        stack.push(new int[]{val, Math.min(val, currMin)});
    } 
    public void pop() {
        stack.pop();
    }
    public int top() {
        return stack.peek()[0];
    } 
    public int getMin() {
        return stack.peek()[1];
    }
}
/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */

Approach 2: Two Stacks
Time complexity: O(1) for all operations.
Space complexity: O(n)

public class MinStack {
    private Deque<Integer> stack = new ArrayDeque<>();
    private Deque<Integer> minStack = new ArrayDeque<>();
    public MinStack() {}   
    public void push(int val) {
        stack.push(val);
        if (minStack.isEmpty() || val <= minStack.peek()) {
            minStack.push(val);
        }
    }    
    public void pop() {
        if (minStack.peek().equals(stack.peek())) {           // use .equals(), not == for Integer.
            minStack.pop();
        }
        stack.pop();
    }   
    public int top() {
        return stack.peek();
    }    
    public int getMin() {
        return minStack.peek();
    }
}

Approach 3: Improved Two Stacks
In the above approach, we pushed a new number onto the min-tracker minStack if, and only if, it was less than or equal to the current minimum.
One downside is that if the same number is pushed repeatedly onto MinStack, and that number also happens to be the current minimum, 
there'll be a lot of needless repetition on the min-tracker minStack.
An improvement is to put pairs onto the min-tracker minStack. The first value of the pair would be the same as before, 
and the second value would be how many times that minimum was repeated.
Time complexity: O(1) for all operations.
Space complexity: O(n)

class MinStack {
    private Deque<Integer> stack = new ArrayDeque<>();
    private Deque<int[]> minStack = new ArrayDeque<>();
    public MinStack() {}
    public void push(int val) {
        stack.push(val);
        if (minStack.isEmpty() || val < minStack.peek()[0]) {
            minStack.push(new int[]{val, 1});
        } else if (val == minStack.peek()[0]) {
            minStack.peek()[1]++;
        }
    }
    public void pop() {
        if (stack.peek().equals(minStack.peek()[0])) {
            minStack.peek()[1]--;
        }
        if (minStack.peek()[1] == 0) {
            minStack.pop();
        }
        stack.pop();
    } 
    public int top() {
        return stack.peek();
    }
    public int getMin() {
        return minStack.peek()[0];
    }
}
