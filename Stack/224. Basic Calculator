Implement a basic calculator to evaluate a simple expression string.
The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces.
You may assume that the given expression is always valid.
Some examples:
"1 + 1" = 2
" 2-1 + 2 " = 3
"(1+(4+5+2)-3)+(6+8)" = 23
Note: Do not use the eval built-in library function.

Approach 1: Using stack
Time complexity: O(n)
Space complexity: O(n)

public class Solution {
    public int calculate(String s) {
        Stack<Integer> stack = new Stack<>();
        int rst = 0, sign = 1;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ' ') {           // if (Character.isWhitespace(c))
                continue;
            }
            if (Character.isDigit(s.charAt(i))) {
                int num = s.charAt(i) - '0';
                while (i + 1 < s.length() && Character.isDigit(s.charAt(i + 1))) {
                    num = num * 10 + (s.charAt(i + 1) - '0');
                    i++;
                }
                rst += num * sign;
            } else if (s.charAt(i) == '+') {
                sign = 1;
            } else if (s.charAt(i) == '-') {
                sign = -1;
            } else if (s.charAt(i) == '(') {
                stack.push(rst);
                stack.push(sign);
                rst = 0;
                sign = 1;
            } else {
                rst = rst * stack.pop() + stack.pop();
            }
        }
        return rst;
    }
}

Approach 2: Recursion
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int calculate(String s) {
        int res = 0, num = 0, sign = 1, n = s.length();
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
                num = 10 * num + c - '0';
            } else if (c == '(') {
                int j = i, cnt = 0;
                for (; i < n; i++) {
                    if (s.charAt(i) == '(') {
                        cnt++;
                    } else if (s.charAt(i) == ')') {
                        cnt--;
                    }
                    if (cnt == 0) {
                        break;
                    }
                }
                num = calculate(s.substring(j + 1, i));
            }
            if (c == '+' || c == '-' || i == n - 1) {
                res += sign * num;
                num = 0;
                sign = c == '+' ? 1 : -1;
             } 
        }
        return res;
    }
}
