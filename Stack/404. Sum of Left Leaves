Find the sum of all left leaves in a given binary tree.
Example:
    3
   / \
  9  20
    /  \
   15   7
There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.

Approach 1: Recursive
Time complexity: O(n), where n is the number of nodes.
Space complexity: O(logn)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int rst = 0;
        if (root.left != null) {
            if (root.left.left == null && root.left.right == null) {
                rst += root.left.val;
            } else {
                rst += sumOfLeftLeaves(root.left);
            }
        }
        if (root.right != null) {
            rst += sumOfLeftLeaves(root.right);
        }
        return rst;
    }
}

public class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        return helper(root, false);
    }
    private int helper(TreeNode root, boolean isLeft) {
        if (root == null) {
            return 0;
        }
        if (isLeft && root.left == null && root.right == null) {
            return root.val;
        }
        return helper(root.left, true) + helper(root.right, false);
    }
}

Approach 2: Iterative. using a stack.
Time complexity: O(n)
Space complexity: O(n)

public class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int rst = 0;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while (!stack.empty()) {
            root = stack.pop();
            if (root.left != null) {
                if (root.left.left == null && root.left.right == null) {
                    rst += root.left.val;
                } else {
                    stack.push(root.left);
                }
            }
            if (root.right != null) {
                stack.push(root.right);
            }
        }
        return rst;
    }
}
