Given a string s which represents an expression, evaluate this expression and return its value. 
The integer division should truncate toward zero.
You may assume that the given expression is always valid. All intermediate results will be in the range of [-2^31, 2^31 - 1].
Note: 
You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().
Example 1:
Input: s = "3+2*2"
Output: 7

Example 2:
Input: s = " 3/2 "
Output: 1

Example 3:
Input: s = " 3+5 / 2 "
Output: 5

Approach 1: Using Stack
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int calculate(String s) {
        int len = s.length(), curr = 0;
        Deque<Integer> stack = new ArrayDeque<>();
        char operation = '+';
        for (int i = 0; i < len; i++) {
            char ch = s.charAt(i);
            if (Character.isDigit(ch)) {
                curr = curr * 10 + (ch - '0');
            }
            if (i == len - 1 || !Character.isDigit(ch) && !Character.isWhitespace(ch)) {
                if (operation == '-') {
                    stack.push(-curr);
                } else if (operation == '+') {
                    stack.push(curr);
                } else if (operation == '*') {
                    stack.push(stack.pop() * curr);
                } else if (operation == '/') {
                    stack.push(stack.pop() / curr);
                }
                operation = ch;
                curr = 0;
            }
        }
        int rst = 0;
        while (!stack.isEmpty()) {
            rst += stack.pop();
        }
        return rst;
    }
}

Approach 2: Optimized Without Using Stack
we could add the values to the result beforehand and keep track of the last calculated number, thus eliminating the need for the stack.
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int calculate(String s) {
        int len = s.length(), curr = 0, last = 0, rst = 0;
        char operation = '+';
        for (int i = 0; i < len; i++) {
            char ch = s.charAt(i);
            if (Character.isDigit(ch)) {
                curr = curr * 10 + ch - '0';
            }
            if (i == len - 1 || !Character.isDigit(ch) && !Character.isWhitespace(ch)) {
                if (operation == '+' || operation == '-') {
                    rst += last;
                    last = operation == '+' ? curr : -curr;
                } else if (operation == '*') {
                    last *= curr;
                } else if (operation == '/') {
                    last /= curr;
                }
                operation = ch;
                curr = 0;
            }
        }
        rst += last;
        return rst;
    }
}
