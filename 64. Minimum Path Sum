Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers
along its path.
Note: You can only move either down or right at any point in time.

Solution 1: DP. Time complexity: O(m * n). Space complexity: O(m * n).
public class Solution {
    public int minPathSum(int[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return -1;
        }
        int m = grid.length;
        int n = grid[0].length;
        int[][] sum = new int[m][n];
        sum[0][0] = grid[0][0];
        for (int i = 1; i < m; i++) {
            sum[i][0] = sum[i - 1][0] + grid[i][0];
        }
        for (int i = 1; i < n; i++) {
            sum[0][i] = sum[0][i - 1] + grid[0][i];
        }
        for (int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                sum[i][j] = Math.min(sum[i - 1][j], sum[i][j - 1]) + grid[i][j];
            }
        }
        return sum[m - 1][n - 1];
    }
}

Solution 2: DP. Time complexity: O(m * n). Space complexity: O(n).
public class Solution {
    public int minPathSum(int[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return -1;
        }
        int m = grid.length;
        int n = grid[0].length;
        int[] rst = new int[n];
        rst[0] = grid[0][0];
        for (int j = 1; j < n; j++) {
            rst[j] = rst[j - 1] + grid[0][j];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (j == 0) {
                    rst[0] += grid[i][j];
                } else {
                    rst[j] = Math.min(rst[j], rst[j - 1]) + grid[i][j];
                }
            }
        }
        return rst[n - 1];
    }
}
