Suppose a sorted array is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.
You must write an algorithm with O(log n) runtime complexity.
Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:
Input: nums = [1], target = 0
Output: -1

Approach 1: Binary search
Find a rotation index (index of the samllest element), it splits array into two parts.
Time complexity: O(logn)
Space complexity: O(1)

class Solution {
    public int search(int[] nums, int target) {
        int smallestIndex = findSmallestIndex(nums);
        if (target >= nums[smallestIndex] && target <= nums[nums.length - 1]) {
            return binarySearch(nums, target, smallestIndex, nums.length - 1);
        } 
        return binarySearch(nums, target, 0, smallestIndex - 1);
    }
    private int binarySearch(int[] nums, int target, int i, int j) {
        while (i < j) {
            int mid = (i + j) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] > target) {
                j = mid - 1;
            } else {
                i = mid + 1;
            }
        }
        return nums[i] == target ? i : -1;
    }
    private int findSmallestIndex(int[] nums) {
        int i = 0, j = nums.length - 1;
        while (i + 1 < j) {
            int mid = (i + j) / 2;
            if (nums[mid] > nums[mid + 1]) {
                return mid + 1;
            }
            if (nums[mid] < nums[i]) {
                j = mid;
            } else {
                i = mid;
            }
        }
        return nums[i] < nums[j] ? i : j;
    }
}

Approach 2: One-pass Binary Search
Time complexity: O(logn)
Space complexity: O(1)

public class Solution {
    public int search(int[] nums, int target) {
        int start = 0, end = nums.length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;            
            if (nums[mid] > nums[end]) {
                if (target >= nums[start] && target <= nums[mid]) {
                    end = mid;
                } else {
                    start = mid;
                }
            } else {
                if (target >= nums[mid] && target <= nums[end]) {
                    start = mid;
                } else {
                    end = mid;
                }
            }
        }
        if (nums[start] == target) {
            return start;
        } 
        if (nums[end] == target) {
            return end;
        }
        return -1;
    }
}

class Solution {
    public int search(int[] nums, int target) {
        int i = 0, j = nums.length - 1;
        while (i <= j) {
            int mid = i + (j - i) / 2;  
            if (nums[mid] == target) {
                return mid;
            }          
            if (nums[mid] >= nums[i]) {
                if (target >= nums[i] && target < nums[mid]) {
                    j = mid - 1;
                } else {
                    i = mid + 1;
                }
            } else {
                if (target > nums[mid] && target <= nums[j]) {
                    i = mid + 1;
                } else {
                    j = mid - 1;
                }
            }
        }
        return -1;
    }
}
