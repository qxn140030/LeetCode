Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.
Note that it is the kth smallest element in the sorted order, not the kth distinct element.
Example 1:
matrix = [
   [ 1,  5,  9],
   [10, 11, 13],
   [12, 13, 15]
], 
k = 8, return 13.

Example 2:
Input: matrix = [[-5]], k = 1
Output: -5

Approach 1: Max-Heap
Time compexity: O(n^2 * logk)
Space complexity: O(k)

public class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        PriorityQueue<Integer> q = new PriorityQueue<>(k, Collections.reverseOrder());
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                q.offer(matrix[i][j]);
                if (q.size() > k) {
                    q.poll();
                }
            }
        }
        return q.poll();
    }
}

Approach 2: Binary Search
Time complexity: O(n * lgx), x = matrix[n - 1][n - 1] - matrix[0][0].
Space complexity: O(1)

public class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;
        int start = matrix[0][0];
        int end = matrix[n - 1][n - 1];
        while (start < end) {
            int mid = start + (end - start) / 2;
            int count = get(matrix, mid);
            if (count < k) {
                start = mid + 1;
            } else {
                end = mid;
            }
        }
        return end;
    }
    private int get(int[][] matrix, int target) {
        int n = matrix.length;
        int i = n - 1, j = 0, count = 0;
        while (i >= 0 && j < n) {
            if (matrix[i][j] <= target) {
                count += i + 1;
                j++;
            } else {
                i--;
            }
        }
        return count;
    }
}
