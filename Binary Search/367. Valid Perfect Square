Given a positive integer num, return true if num is a perfect square or false otherwise.
A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.
You must not use any built-in library function, such as sqrt.
Example 1:
Input: num = 16
Output: true, 4 * 4 = 16 and 4 is an integer.

Example 2:
Input: num = 14
Output: false, because 3.742 * 3.742 = 14 and 3.742 is not an integer.

Approach 1: Binary Search
Time complexity: O(logn)
Space complexity: O(1)

class Solution {
    public boolean isPerfectSquare(int num) {
        int start = 1, end = num;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (mid <= num / mid) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (start * start == num || end * end == num) {
            return true;
        }
        return false;
    }
}

Approach 2: Newton's Method
The problem is to find a root of f(x) = x^2 âˆ’ num = 0
The idea is to start from a seed (= initial guess) and then to compute a root as a sequence of improved guesses.
Time complexity: O(logn) because guess sequence converges quadratically.
Space complexity: O(1)

class Solution {
    public boolean isPerfectSquare(int num) {
        if (num <= 1) {
            return true;
        }
        int x = num / 2;
        while (x > num / x) {
            x = (x + num / x) / 2;
        }
        return x * x == num;
    }
}
