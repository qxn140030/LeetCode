Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.
An integer a is closer to x than an integer b if:
|a - x| < |b - x|, or
|a - x| == |b - x| and a < b
 
Example 1:
Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]

Example 2:
Input: arr = [1,2,3,4,5], k = 4, x = -1
Output: [1,2,3,4]

Approach 1: Sort With Custom Comparator
Time complexity: O(nlog⁡n + klog⁡k)
Space complexity: O(n)

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        List<Integer> sortedArr = new ArrayList<>();
        for (int num : arr) {
            sortedArr.add(num);
        }
        Collections.sort(sortedArr, (num1, num2) -> Math.abs(num1 - x) - Math.abs(num2 - x));     // Sort using custom comparator.
        sortedArr = sortedArr.subList(0, k);
        Collections.sort(sortedArr);
        return sortedArr;
    }
}

Approach 2: Binary Search + Sliding Window
Time complexity: O(log⁡n + k)
Space complexity: O(1)

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        List<Integer> rst = new ArrayList<>();
        if (arr.length == k) {
            for (int i = 0; i < k; i++) {
                rst.add(arr[i]);
            }
            return rst;
        }
        int left = 0, right = arr.length, mid = 0;
        while (left < right) {             // Binary search to find the closest element.
            mid = (left + right) / 2;
            if (arr[mid] >= x) {
                right = mid;
            } else {
                left = mid + 1;
            }
        } 
        left--;                            // Initialize sliding window's bounds.
        right = left + 1;
        while (right - left - 1 < k) {     // While the window size is less than k.
            if (left == -1) {    
                right++;
                continue;
            }
            if (right == arr.length || Math.abs(arr[left] - x) <= Math.abs(arr[right] - x)) {
                left--;
            } else {
                right++;
            }
        } 
        for (int i = left + 1; i < right; i++) {
            rst.add(arr[i]);
        }
        return rst;
    }
}

Approach 3: Binary Search To Find The Left Bound
Time complexity: O(log⁡(n - k) + k)
Space complexity: O(1)

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        int left = 0, right = arr.length - k;
        while (left < right) {
            int mid = (left + right) / 2;
            if (x - arr[mid] > arr[mid + k] - x) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        List<Integer> rst = new ArrayList<>();
        for (int i = left; i < left + k; i++) {
            rst.add(arr[i]);
        }
        return rst;
    }
}
