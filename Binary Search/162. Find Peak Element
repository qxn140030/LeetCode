A peak element is an element that is greater than its neighbors.
Given an input array where num[i] ≠ num[i+1], find a peak element and return its index.
The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.
You may imagine that num[-1] = num[n] = -∞.
Note: Your solution should be in logarithmic complexity.
Example 1:
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

Example 2:
Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.

Approach 1: Linear Scan
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int findPeakElement(int[] nums) {
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] > nums[i + 1]) {
                return i;
            }
        }
        return nums.length - 1;
    }
}

Approach 2: Recursive Binary Search
Time complexity: O(logn)
Space complexity: O(logn)

class Solution {
    public int findPeakElement(int[] nums) {
        return search(nums, 0, nums.length - 1);
    }
    private int search(int[] nums, int start, int end) {
        if (start == end) {
            return start;
        }
        int mid = start + (end - start) / 2;
        if (nums[mid] > nums[mid + 1]) {
            return search(nums, start, mid);
        }
        return search(nums, mid + 1, end);
    }
}

Approach 3: Iterative Binary Search
Time complexity: O(logn)
Space complexity: O(1)

public int findPeakElement(int[] nums) {
    int start = 0, end = nums.length - 1;
    while (start + 1 < end) {
        int mid = start + (end - start) / 2;
        if (nums[mid] < nums[mid - 1]) {
            end = mid;
        } else if (nums[mid] < nums[mid + 1]) {
            start = mid;
        } else {
            return mid;
        }
    }
    return nums[start] > nums[end] ? start : end;
}

public int findPeakElement(int[] nums) {
    int start = 0, end = nums.length - 1;
    while (start < end) {
        int mid = start + (end - start) / 2;
        if (nums[mid] > nums[mid + 1]) {
            end = mid;
        } else {
            start = mid + 1;
        } 
    }
    return start;
}
