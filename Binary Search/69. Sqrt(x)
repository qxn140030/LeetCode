Given a non-negative integer x, return the square root of x rounded down to the nearest integer.
The returned integer should be non-negative as well.
You must not use any built-in exponent funxtion or operator.
Example 1:
Input: x = 4
Output: 2

Example 2:
Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.

Approach 1: Pocket calculator algorithm
Time complexity: O(1)
Space complexity: O(1)

class Solution {
  public int mySqrt(int x) {
    if (x < 2) {
        return x;
    }
    int left = (int)Math.pow(Math.E, 0.5 * Math.log(x));
    int right = left + 1;
    return (long)right * right > x ? left : right;
  }
}

Approach 2: Binary search
Time complexity: O(logn)
Space complexity: O(1)

class Solution {
    public int mySqrt(int x) {
        if (x < 2) {
            return x;
        }
        int start = 1, end = x;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (mid <= x / mid) {                    // mid * mid might cause overflow
                start = mid;
            } else {
                end = mid;
            }
        }
        return end <= x / end ? end : start;
    }
}

Approach 3: Recursion + Bit shifts
squrt(x) = 2 * squrt(x / 4)
Time complexity: O(logn)
Space complexity: O(logn)

class Solution {
  public int mySqrt(int x) {
    if (x < 2) {
        return x;
    }
    int left = mySqrt(x >> 2) << 1;
    int right = left + 1;
    return (long)right * right > x ? left : right;
  }
}

Approach 4: Newton's Method
Time complexity: O(logn) since the set coverages quadratically.
Space complexity: O(1)

class Solution {
  public int mySqrt(int x) {
    if (x < 2) {
        return x;
    }
    double x0 = x;
    double x1 = (x0 + x / x0) / 2.0;
    while (Math.abs(x0 - x1) >= 1) {
      x0 = x1;
      x1 = (x0 + x / x0) / 2.0;
    }
    return (int)x1;
  }
}
