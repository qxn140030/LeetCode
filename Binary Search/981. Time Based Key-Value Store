Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.
Implement the TimeMap class:
- TimeMap() Initializes the object of the data structure.
- void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.
- String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. 
If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns "".

Example 1:
Input
["TimeMap", "set", "get", "get", "set", "get", "get"]
[[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]]
Output
[null, null, "bar", "bar", null, "bar2", "bar2"]

Explanation
TimeMap timeMap = new TimeMap();
timeMap.set("foo", "bar", 1);  // store the key "foo" and value "bar" along with timestamp = 1.
timeMap.get("foo", 1);         // return "bar"
timeMap.get("foo", 3);         // return "bar", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is "bar".
timeMap.set("foo", "bar2", 4); // store the key "foo" and value "bar2" along with timestamp = 4.
timeMap.get("foo", 4);         // return "bar2"
timeMap.get("foo", 5);         // return "bar2"

Approach 1: Hashmap + Linear Search (Time Limit Exceeded)
If m is the number of set() calls, n is the number of get() calls, and k is average length of key and value strings.
- set(), in each call, we store a value at (key, timestamp) location, which takes O(k) time to hash the string.
Time complexity: O(m * k)
Space complexity: O(m * k), in each call we store one value string of length k, which takes O(k) space, for m calls we may store m unique values.

- get(), in each call, we iterate linearly from timestamp to 1 which takes O(timestamp) time and again to hash the string it takes O(k) time.
Time complexity: for n calls overall it will take, O(n * timestamp * k) time.
Space complexity: O(1)

class TimeMap {
    Map<String, Map<Integer, String>> map;
    public TimeMap() {
        map = new HashMap<>();
    }
    public void set(String key, String value, int timestamp) {
        map.computeIfAbsent(key, k -> new HashMap<>()).put(timestamp, value);
    }
    public String get(String key, int timestamp) {
        if (map.containsKey(key)) {
            for (int i = timestamp; i >= 1; i--) {
                if (map.get(key).containsKey(i)) {
                    return map.get(key).get(i);
                }
            }
        }
        return "";
    }
}
/**
 * Your TimeMap object will be instantiated and called as such:
 * TimeMap obj = new TimeMap();
 * obj.set(key,value,timestamp);
 * String param_2 = obj.get(key,timestamp);
 */

Approach 2: Sorted Map + Binary Search
- set(), in each call we store a value at (key, timestamp) location, which takes O(klogm) time as the internal implementation of sorted maps is some kind of balanced binary tree 
and in worst case we might have to compare logM nodes (height of tree) of length L each with our key.
Time complexity: O(k * m * logm)
Space complexity: O(m * k)

- get(), we will find correct key in our map, which can take O(klogm) time and then use binary search on that bucket which can have at most m elements, which takes O(logm) time.
Time complexity: O(n * (k * logm + logm))
Space complexity: O(1)

class TimeMap {
    Map<String, TreeMap<Integer, String>> map;
    public TimeMap() {
        map = new HashMap<>();
    }
    public void set(String key, String value, int timestamp) {
        map.putIfAbsent(key, new TreeMap<>());
        map.get(key).put(timestamp, value);
    } 
    public String get(String key, int timestamp) {
        if (map.containsKey(key)) {
            Integer floorKey = map.get(key).floorKey(timestamp);
            if (floorKey != null) {
                return map.get(key).get(floorKey);
            }
        }
        return "";
    }
}

Approach 3: Array + Binary Search
- set(), in each call we push a (timestamp, value) pair in the key bucket, which takes O(k) time to hash the string.
Time complexity: O(m * k)
Space complexity: O(m * k)

- get(), we will find correct key in our map, which can take O(klogm) time and then use binary search on that bucket which can have at most m elements, which takes O(logm) time.
Time complexity: O(n * k * logm)
Space complexity: O(1)

class TimeMap {
    Map<String, List<Pair<Integer, String>>> map;
    public TimeMap() {
        map = new HashMap<>();
    }
    public void set(String key, String value, int timestamp) {
        map.putIfAbsent(key, new ArrayList<>());
        map.get(key).add(new Pair<>(timestamp, value));
    }
    public String get(String key, int timestamp) {
        if (map.containsKey(key)) {
            int left = 0, right = map.get(key).size();
            while (left < right) {
                int mid = (left + right) / 2;
                if (map.get(key).get(mid).getKey() <= timestamp) {
                    left = mid + 1;
                } else {
                    right = mid;
                }
            }
            if (right > 0) {
                return map.get(key).get(right - 1).getValue();
            }
        }
        return "";
    }
}
