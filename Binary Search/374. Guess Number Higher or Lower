We are playing the Guess Game. The game is as follows:
I pick a number from 1 to n. You have to guess which number I picked.
Every time you guess wrong, I'll tell you whether the number is higher or lower.
You call a pre-defined API guess(int num) which returns 3 possible results (-1, 1, or 0):
-1 : My number is lower
 1 : My number is higher
 0 : Congrats! You got it!
Example: n = 10, I pick 6. Return 6.

Approach 1: Brute Force
Time complexity: O(n)
Space complexity: O(1)

/** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return 	     -1 if num is higher than the picked number
 *			            1 if num is lower than the picked number
 *               otherwise return 0
 * int guess(int num);
 */
public class Solution extends GuessGame {
    public int guessNumber(int n) {
        for (int i = 1; i < n; i++) {
            if (guess(i) == 0) {
                return i;
            }
        }
        return n;
    }
}

Approach 2: Binary Search
Time complexity: O(logn)
Space complexity: O(1)

public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int start = 1, end = n;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            int guess = guess(mid);
            if (guess < 0) {
                end = mid;
            } else {
                start = mid;
            }
        }
        if (guess(start) == 0) {
            return start;
        }
        return end;
    }
}
