You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.
You need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. 
The probability of picking an index i is w[i] / sum(w).
For example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), 
and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).
Example 1:
Input: ["Solution","pickIndex"]
       [[[1]],[]]
Output: [null,0]

Example 2:
Input: ["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]
       [[[1,3]],[],[],[],[],[]]
Output: [null,1,1,1,1,0]

Approach 1: Prefix Sums with Linear Search
Time complexity: O(n) for constructor function, O(n) for pickIndex(), since we did a linear search on the prefix sums.
Space complexity: O(n) for constructor function, O(1) for pickIndex().

class Solution {
    private int[] prefixSums;
    private int totalSum;
    public Solution(int[] w) {
        prefixSums = new int[w.length];
        totalSum = 0;
        for (int i = 0; i < w.length; i++) {
            totalSum += w[i];
            prefixSums[i] = totalSum;
        }
    }
    public int pickIndex() {
        double target = totalSum * Math.random();
        for (int i = 0; i < prefixSums.length; i++) {
            if (prefixSums[i] > target) {
                return i;
            }
        }
        return -1;
    }
}
/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(w);
 * int param_1 = obj.pickIndex();
 */
 
Approach 2: Prefix Sums with Binary Search
Time complexity: O(n) for constructor function, O(logn) for pickIndex(), since we did a linear search on the prefix sums.
Space complexity: O(n) for constructor function, O(1) for pickIndex().

class Solution {
    private int[] prefixSums;
    private int totalSum;
    public Solution(int[] w) {
        prefixSums = new int[w.length];
        totalSum = 0;
        for (int i = 0; i < w.length; i++) {
            totalSum += w[i];
            prefixSums[i] = totalSum;
        }
    }
    public int pickIndex() {
        double target = totalSum * Math.random();
        int low = 0, high = prefixSums.length;
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (target > prefixSums[mid]) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }
}
