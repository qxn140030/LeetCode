Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.
Example 1:
Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]
Output: 3
Explanation: The repeated subarray with maximum length is [3,2,1].

Example 2:
Input: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]
Output: 5
Explanation: The repeated subarray with maximum length is [0,0,0,0,0].

Approach 1: Brute Force
Time complexity: O(n^3)
Space complexity: O(1)

class Solution {
    public int findLength(int[] nums1, int[] nums2) {
        int max = 0;
        for (int i = 0; i < nums1.length; i++) {
            for (int j = 0; j < nums1.length; j++) {
                max = Math.max(max, helper(nums1, nums2, i, j));
            }
        }
        return max;
    }
    private int helper(int[] nums1, int[] nums2, int i, int j) {
        int p1 = i, p2 = j;
        while (p1 < nums1.length && p2 < nums2.length) {
            if (nums1[p1] != nums2[p2]) {
                break;
            }
            p1++;
            p2++;
        }
        return p1 - i;
    }
}

Approach 2: Brute Force with Initial Character Map
Time complexity: O(m * n * min(m, n))
Space complexity: O(n)

class Solution {
    public int findLength(int[] nums1, int[] nums2) {
        int ans = 0;
        Map<Integer, List<Integer>> start2 = new HashMap<>();
        for (int i = 0; i < nums2.length; i++) {
            start2.computeIfAbsent(nums2[i], x -> new ArrayList<>()).add(i);
        }
        for (int i = 0; i < nums1.length; i++) {
            if (start2.containsKey(nums1[i])) {
                for (int j : start2.get(nums1[i])) {
                    int k = 0;
                    while (i + k < nums1.length && j + k < nums2.length && nums1[i + k] == nums2[j + k]) {
                        k++;
                    }
                    ans = Math.max(ans, k);
                }
            }
        }
        return ans;
    }
}

Approach 3: Binary Search with Naive Check
Time complexity: O((m + n) * min(m, n) * log(min(m, n)))
Space complexity: O(m^2)

class Solution {
    public int findLength(int[] nums1, int[] nums2) {
        int lo = 0, hi = Math.min(nums1.length, nums2.length) + 1;
        while (lo < hi) {
            int mi = (lo + hi) / 2;
            if (check(mi, nums1, nums2)) {
                lo = mi + 1;
            } else {
                hi = mi;
            }
        }
        return lo - 1;
    }
    public boolean check(int len, int[] nums1, int[] nums2) {
        Set<String> seen = new HashSet<>();
        for (int i = 0; i + len <= nums1.length; i++) {
            seen.add(Arrays.toString(Arrays.copyOfRange(nums1, i, i + len)));
        }
        for (int i = 0; i + len <= nums2.length; i++) {
            if (seen.contains(Arrays.toString(Arrays.copyOfRange(nums2, i, i + len)))) {
                return true;
            }
        }
        return false;
    }
}

Approach 4: DP
Time Complexity: O(m * n)
Space Complexity: O(m * n)

class Solution {
    public int findLength(int[] nums1, int[] nums2) {
        int m = nums1.length, n = nums2.length, ans = 0;
        int[][] memo = new int[m + 1][n + 1];
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (nums1[i] == nums2[j]) {
                    memo[i][j] = memo[i + 1][j + 1] + 1;
                    if (ans < memo[i][j]) {
                        ans = memo[i][j];
                    }
                }
            }
        }
        return ans;
    }
}

Approach 4: Binary Search with Rolling Hash
Time Complexity: O((m + n) * log(min(m, n)))
Space Complexity: O(m)   

