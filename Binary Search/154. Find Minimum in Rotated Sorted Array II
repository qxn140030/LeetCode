Suppose a sorted array is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.
You must decrease the overall operation steps as much as possible.
Follow up:
What if duplicates are allowed?
Would this affect the run-time complexity? How and why?

Example 1:
Input: nums = [1,3,5]
Output: 1

Example 2:
Input: nums = [2,2,2,0,1]
Output: 0

Approach 1: Linear Search
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public int findMin(int[] nums) {
        int min = nums[0];
        for (int i : nums) {
            if (i < min) {
                min = i;
            }
        }
        return min;
    }
}

Approach 2: Binary Search
Time complexity: O(logn) on average, in the worst case where the array contains identical elements O(n).
Space complexity: O(1)

public class Solution {
    public int findMin(int[] nums) {
        int start = 0, end = nums.length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == nums[end]) {
                end--;
            } else if (nums[mid] < nums[end]) {
                end = mid;
            } else {
                start = mid;
            }
        }
        return Math.min(nums[start], nums[end]);
    }
}
