You are given an m x n binary matrix image where 0 represents a white pixel and 1 represents a black pixel.
The black pixels are connected (i.e., there is only one black region). Pixels are connected horizontally and vertically.
Given two integers x and y that represents the location of one of the black pixels, 
return the area of the smallest (axis-aligned) rectangle that encloses all black pixels.
You must write an algorithm with less than O(mn) runtime complexity
Example 1:
[
  ["0","0","1","0"]
  ["0","1","1","0"]
  ["0","1","0","0"]
]
Input: image = [["0","0","1","0"],["0","1","1","0"],["0","1","0","0"]], x = 0, y = 2
Output: 6

Example 2:
Input: image = [["1"]], x = 0, y = 0
Output: 1

Approach 1: Naive Linear Search
keep four boundaries of the rectangle. Note that left and top are inclusive while right and bottom are exclusive. 
We then traversal all the pixels and update the four boundaries accordingly.
Time complexity: O(m * n)
Space complexity: O(1)

class Solution {
    public int minArea(char[][] image, int x, int y) {
        int top = x, bottom = x;
        int left = y, right = y;
        for (x = 0; x < image.length; x++) {
            for (y = 0; y < image[0].length; y++) {
                if (image[x][y] == '1') {
                    top = Math.min(top, x);
                    bottom = Math.max(bottom, x + 1);
                    left = Math.min(left, y);
                    right = Math.max(right, y + 1);
                }
            }
        }
        return (right - left) * (bottom - top);
    }
}

Approach 2: DFS or BFS
The naive approach did not use the condition that all the black pixels are connected and that one of the black pixels is given.
do an exhaustive search starting from the given pixel. 
Time complexity: O(E) = O(B) = O(m * n)
E is the number of edges in the traversed graph. B is the total number of black pixels. 
Since each pixel have four edges at most, O(E) = O(B).
Space complexity: O(V) = O(B) = O(m * n)
V is the number of vertices in the traversed graph. In this problem O(V) = O(B).

class Solution {
    private int top, bottom, left, right;
    public int minArea(char[][] image, int x, int y) {
        top = bottom = x;
        left = right = y;
        dfs(image, x, y);
        return (right - left) * (bottom - top);
    }
    private void dfs(char[][] image, int x, int y){
        if(x < 0 || y < 0 || x >= image.length || y >= image[0].length || image[x][y] == '0') {
            return;
        }  
        image[x][y] = '0';                // mark visited black pixel as white
        top = Math.min(top, x);
        bottom = Math.max(bottom, x + 1);
        left = Math.min(left, y);
        right = Math.max(right, y + 1);
        dfs(image, x + 1, y);
        dfs(image, x - 1, y);
        dfs(image, x, y - 1);
        dfs(image, x, y + 1);
    }
}

Approach 3: Binary Search
Project the 2D image into a 1D array and use binary search to find the boundaries.
If a column has any black pixel it's projection is black otherwise white.
Similarly, we can do the same for the rows, and project the image into a 1D column vector.
Time complexity: O(mlogn + nlogm)
Space complexity: O(1)

class Solution {
    public int minArea(char[][] image, int x, int y) {
        int m = image.length, n = image[0].length;
        int left = searchColumns(image, 0, y, 0, m, true);
        int right = searchColumns(image, y + 1, n, 0, m, false);
        int top = searchRows(image, 0, x, left, right, true);
        int bottom = searchRows(image, x + 1, m, left, right, false);
        return (right - left) * (bottom - top);
    }
    private int searchColumns(char[][] image, int i, int j, int top, int bottom, boolean whiteToBlack) {
        while (i != j) {
            int k = top, mid = (i + j) / 2;
            while (k < bottom && image[k][mid] == '0') {
                k++;
            }
            if (k < bottom == whiteToBlack) {      // k < bottom means the column mid has black pixel
                j = mid;                           // search the boundary in the smaller half
            } else {
                i = mid + 1;
            }
        }
        return i;
    }
    private int searchRows(char[][] image, int i, int j, int left, int right, boolean whiteToBlack) {
        while (i != j) {
            int k = left, mid = (i + j) / 2;
            while (k < right && image[mid][k] == '0') {      // k < right means the row mid has black pixel
                k++;
            }
            if (k < right == whiteToBlack) {
                j = mid;
            } else {
                i = mid + 1;
            }
        }
        return i;
    }
}
