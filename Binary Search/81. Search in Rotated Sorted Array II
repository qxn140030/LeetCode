There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).
You must decrease the overall operation steps as much as possible.
Follow up: 
This problem is similar to Search in Rotated Sorted Array, but nums may contain duplicates. 
Would this affect the runtime complexity? How and why?
- by having duplicate elements in the array, we often miss the opportunity to apply binary search in certain search spaces.
Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true

Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false

Approach 1: Linear Search
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public boolean search(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == target) {
                return true;
            }
        }
        return false;
    }
}

Approach 2: Binary Search
Time complexity: O(n) worst case, O(logn) best case.
Space complexity: O(1)

public class Solution {
    public boolean search(int[] nums, int target) {
        int i = 0, j = nums.length - 1;
        while (i <= j) {
            int mid = (i + j) / 2;
            if (nums[mid] == target) {
                return true;
            } 
            if (nums[mid] == nums[i]) {
                i++;
            } else if (nums[mid] < nums[i]) {             // right half is sorted.
                if (nums[mid] < target && target <= nums[j]) {
                    i = mid + 1;
                } else {
                    j = mid - 1;
                }
            } else {                                      // left half is sorted.
                if (nums[i] <= target && target < nums[mid]) {
                    j = mid - 1;
                } else {
                    i = mid + 1;
                }
            }
        }
        return false;
    }
}
