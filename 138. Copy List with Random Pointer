A linked list is given such that each node contains an additional random pointer which could point to any node in the list
or null.
Return a deep copy of the list.

Solution 1: using a HashMap. map the old node to copy node.
Time complexity: O(n). Space complexity: O(n).
/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if (head == null) {
            return head;
        }
        RandomListNode dummy = new RandomListNode(0);
        Map<RandomListNode, RandomListNode> map = new HashMap<>();
        RandomListNode cur1 = head;
        RandomListNode cur2 = dummy;
        while (cur1 != null) {                                        // first loop, the normal linked list.
            RandomListNode copy = new RandomListNode(cur1.label);
            map.put(cur1, copy);
            cur2.next = copy;
            cur1 = cur1.next;
            cur2 = cur2.next;
        }
        cur1 = head;
        cur2 = dummy;
        while (cur1 != null) {                              // second loop, random pointers.
            cur2.next.random = map.get(cur1.random);
            cur1 = cur1.next;
            cur2 = cur2.next;
        }
        return dummy.next;
    }
}

Solution 2: step 1: copy every node and insert; step 2: copy random pointers; step 3: break the list.
Time complexity: O(n). Space complexity: O(1).
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if (head == null) {
            return head;
        }
        RandomListNode cur = head;
        while (cur != null) {                                        // step 1
            RandomListNode copy = new RandomListNode(cur.label);
            copy.next = cur.next;
            cur.next = copy;
            cur = copy.next;
        }
        cur = head;
        while (cur != null) {                                       // step 2
            if (cur.random != null) {                               // Note: check the random pointer first.
                cur.next.random = cur.random.next;
            }
            cur = cur.next.next;
        }
        RandomListNode dummy = new RandomListNode(0);
        cur = dummy;
        while (head != null) {                                     // step 3
            cur.next = head.next;
            head.next = head.next.next;
            head = head.next;
            cur = cur.next;
        }
        return dummy.next;
    }
}
