Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.
You must implement a solution with a linear runtime complexity and use only constant extra space.
Example 1:
Input: nums = [2,2,3,2]
Output: 3

Example 2:
Input: nums = [0,1,0,1,0,1,99]
Output: 99

Approach 1: HashSet
3×(a+b+c)−(a+a+a+b+b+b+c)=2c
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int singleNumber(int[] nums) {
        Set<Long> set = new HashSet<>();
        long sumSet = 0, sumArray = 0;
        for (int n : nums) {
            sumArray += n;
            set.add((long)n);
        }
        for (Long s : set) {
            sumSet += s;
        }
        return (int)((3 * sumSet - sumArray) / 2);
    }
}

Approach 2: HashMap
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        for (int k : map.keySet()) {
            if (map.get(k) == 1) {
                return k;
            }
        }
        return -1;
    }
}

Approach 3: Bitwise Operators
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int singleNumber(int[] nums) {
        int seenOnce = 0, seenTwice = 0;
        for (int num : nums) {
            // first appearence: add num to seen_once, don't add to seen_twice because of presence in seen_once
            // second appearance: remove num from seen_once, add num to seen_twice
            // third appearance: don't add to seen_once because of presence in seen_twice remove num from seen_twice
            seenOnce = ~seenTwice & (seenOnce ^ num);
            seenTwice = ~seenOnce & (seenTwice ^ num);
        }
        return seenOnce;
    }
}

public class Solution {
    public int singleNumber(int[] nums) {
        int rst = 0;
        for (int j = 0; j < 32; j++) {
            int tmp = 0;
            for (int i = 0; i < nums.length; i++) {
                tmp += (nums[i] >> j) & 1;
            }
            rst |= (tmp % 3) << j;
        }
        return rst;
    }
}
