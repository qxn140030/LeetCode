An n-bit gray code sequence is a sequence of 2^n integers where:
* Every integer is in the inclusive range [0, 2^n - 1],
* The first integer is 0,
* An integer appears no more than once in the sequence,
* The binary representation of every pair of adjacent integers differs by exactly one bit, and
* The binary representation of the first and last integers differs by exactly one bit.
Given an integer n, return any valid n-bit gray code sequence.
For example, given n = 2, return [0,1,3,2] or [0,2,3,1]. Its gray code sequence is:
00 - 0         00 - 0
01 - 1   or    10 - 2
11 - 3         11 - 3
10 - 2         01 - 1 

Approach 1: Backtracking
Time complexity: O(n * 2^n)
Space complexity: O(2^n), HashSet isPresent which will contain at most 2^n numbers. 

class Solution {
    public List<Integer> grayCode(int n) {
        List<Integer> rst = new ArrayList<>();
        rst.add(0);
        Set<Integer> isPresent = new HashSet<>();     // Keeps track of the numbers present in the current sequence.
        isPresent.add(0);                             // All Gray code sequence starts with 0.
        helper(rst, n, isPresent);
        return rst;
    }
    private boolean helper(List<Integer> rst, int n, Set<Integer> isPresent) {
        if (rst.size() == (1 << n)) {
            return true;
        } 
        int cur = rst.get(rst.size() - 1);
        for (int i = 0; i < n; i++) {
            int next = cur ^ (1 << i);
            if (!isPresent.contains(next)) {
                isPresent.add(next);
                rst.add(next);
                if (helper(rst, n, isPresent)) {     // If valid sequence found no need to search any further.
                    return true;
                } 
                isPresent.remove(next);              // If no valid sequence found delete the last added number and continue the search.
                rst.remove(rst.size() - 1);
            }
        }
        return false;
    }
}

Approach 2: Recursion
Time complexity: O(2^n)
Space complexity: O(n)

class Solution {
    public List<Integer> grayCode(int n) {
        List<Integer> rst = new ArrayList<>();
        helper(rst, n);
        return rst;
    }
    private void helper(List<Integer> rst, int n) {
        if (n == 0) {
            rst.add(0);
            return;
        } 
        helper(rst, n - 1);                      // we derive the n bits sequence from the (n - 1) bits sequence.
        int size = rst.size();
        int mask = 1 << (n - 1);                 // Set the bit at position n - 1 (0 indexed) and assign it to mask.
        for (int i = size - 1; i >= 0; i--) {
            // mask is used to set the (n - 1)th bit from the least significant bit (LSB) of all the numbers present in the current sequence.
            rst.add(rst.get(i) | mask);
        }
    }
}

Approach 3: Recursion - Using a global variable
Time complexity: O(2^n)
Space complexity: O(n)

class Solution {
    int nextNum = 0;
    public List<Integer> grayCode(int n) {
        List<Integer> rst = new ArrayList<>();
        helper(rst, n);
        return rst;
    }
    private void helper(List<Integer> rst, int n) {
        if (n == 0) {
            rst.add(nextNum);
            return;
        }
        helper(rst, n - 1);
        nextNum ^= (1 << (n - 1));      // Flip the bit at (n - 1)th position from right
        helper(rst, n - 1);
    }
}

Approach 4: Iteration
Time complexity: O(2^n)
Space complexity: O(1)

public class Solution {
    public List<Integer> grayCode(int n) {
        List<Integer> rst = new ArrayList<>();
        rst.add(0);
        for (int i = 1; i <= n; i++) {
            int size = rst.size();
            for (int j = size - 1; j >= 0; j--) {
                rst.add((1 << (i - 1)) | rst.get(j));       // or (1 << (i - 1)) + rst.get(j)
            }
        }
        return rst;
    }
}

Approach 5: Iteration with a single loop
Time complexity: O(2^n)
Space complexity: O(1)

class Solution {
    public List<Integer> grayCode(int n) {
        List<Integer> rst = new ArrayList<>();
        int len = 1 << n;                       // there are 2^n numbers in the Gray code sequence.
        for (int i = 0; i < len; i++) {
            int num = i ^ (i >> 1);
            rst.add(num);
        }
        return rst;
    }
}
