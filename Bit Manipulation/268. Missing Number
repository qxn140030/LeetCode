Question: Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.
Follow up:
Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?

Example 1:
Input: nums = [3,0,1]
Output: 2

Example 2:
Input: nums = [0,1]
Output: 2

Example 3:
Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8

Approach 1: Sorting
Time complexity: O(nlogn)
Space complexity: O(1) or O(n)

class Solution {
    public int missingNumber(int[] nums) {
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != i) {
                return i;
            }
        } 
        return nums[nums.length - 1] + 1;
    }
}

Approach 2: HashSet
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int missingNumber(int[] nums) {
        Set<Integer> numSet = new HashSet<Integer>();
        for (int num : nums) {
            numSet.add(num);
        }
        int expectedCount = nums.length + 1;
        for (int i = 0; i < expectedCount; i++) {
            if (!numSet.contains(i)) {
                return i;
            }
        }
        return -1;
    }
}

Approach 3: Bit manipulation
harness the fact that XOR is its own inverse to find the missing element in linear time.
0 XOR 0 = 0
b XOR b = 0
a XOR 0 = a
a XOR b XOR b = a
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            n ^= i ^ nums[i];
        }
        return n;
    }
}

Approach 4: Gauss' Formula
sum = n * (n + 1) / 2
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int missingNumber(int[] nums) {
        int sum = nums.length * (nums.length + 1) / 2;
        for (int num : nums) {
            sum -= num;
        }
        return sum;
    }
}
