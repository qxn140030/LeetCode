Write a function that takes an unsigned integer and returns the number of ’1' bits it has (also known as the Hamming weight).
For example, the 32-bit integer ’11' has binary representation 00000000000000000000000000001011, so the function should
return 3.
Note:
in some languages, such as Java, there is no unsigned integer type. 

Follow up: 
If this function is called many times, how would you optimize it?

Approach 1: Loop and Flip
Time complexity: O(1) 
Space complexity is O(1)

public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int bits = 0, mask = 1;
        for (int i = 0; i < 32; i++) {
            if ((n & mask) != 0) {     
                bits++;
            }
            mask <<= 1;       
        }
        return bits;
    }
}

public class Solution {
    public int hammingWeight(int n) {
        int bits = 0;
        while (n != 0) {                   
            if ((n & 1) == 1) {
                bits++;
            }
            n >>>= 1;          
        }
        return bits;
    }
}

Approach 2: Bit Manipulation Trick (Brian Kernighan's Algorithm)
doing a bit-wise AND of n and n − 1 flips the least-significant 1-bit in n to 0.
Time complexity: O(1), the run time depends on the number of 1-bits in n. 
Space complexity is O(1)

public class Solution {
    public int hammingWeight(int n) {
        int bits = 0;
        while (n != 0) {
            bits++;
            n &= (n - 1);
        }
        return bits;
    }
}

Recursion:
public class Solution {
    public int hammingWeight(int n) {
        if (n == 0) {
            return 0;
        }
        if (n == 1) {
            return 1;
        }
        return hammingWeight(n & (n - 1)) + 1;
    }
}
