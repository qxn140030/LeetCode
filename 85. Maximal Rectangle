Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.
For example, given the following matrix:
1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0      Return 6.

public class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] height = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0) {
                    height[i][j] = matrix[i][j] == '1' ? 1 : 0;
                } else {
                    height[i][j] = matrix[i][j] == '1' ? height[i - 1][j] + 1 : 0;
                }
            }
        }
        int rst = 0;
        for (int i = 0; i < m; i++) {
            Stack<Integer> stack = new Stack<Integer>();  
            for (int j = 0; j <= n; j++) {
                int cur = j == n ? -1 : height[i][j];
                while (!stack.empty() && cur <= height[i][stack.peek()]) {
                    int h = height[i][stack.pop()];
                    int w = stack.empty() ? j : j - stack.peek() - 1;
                    rst = Math.max(rst, w * h);
                }
                stack.push(j);
            }
        }
        return rst;
    }
}
