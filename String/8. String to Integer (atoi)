Implement atoi to convert a string to a 32-bit signed integer.
- Read in and ignore any leading whitespace.
- Check if the next character is '-' or '+'
- Read in the next character until the next non-digit character or the end of the input is reached. The rest of the string is ignored.
- If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer to -2^31 or 2^31 - 1.

Example 1:
Input: s = "42"
Output: 42
Explanation: The underlined characters are what is read in, the caret is the current reader position.
Step 1: "42" (no characters read because there is no leading whitespace)
         ^
Step 2: "42" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "42" ("42" is read in)
           ^
The parsed integer is 42.
Since 42 is in the range [-2^31, 2^31 - 1], the final result is 42.

Example 2:
Input: s = "   -42"
Output: -42
Explanation:
Step 1: "   -42" (leading whitespace is read and ignored)
            ^
Step 2: "   -42" ('-' is read, so the result should be negative)
             ^
Step 3: "   -42" ("42" is read in)
               ^

Example 3:
Input: s = "4193 with words"
Output: 4193
Explanation:
Step 1: "4193 with words" (no characters read because there is no leading whitespace)
         ^
Step 2: "4193 with words" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "4193 with words" ("4193" is read in; reading stops because the next character is a non-digit)
             ^

Approach 1: Follow the rules
Time complexity: O(n), n is the length of string. 
Space complexity: O(1)

class Solution {
    public int myAtoi(String s) {
        int n = s.length();
        int i = 0, rst = 0, sign = 1;
        while (i < n && s.charAt(i) == ' ') {
            i++;
        }
        if (i < n && (s.charAt(i) == '-' || s.charAt(i) == '+')) {
            if (s.charAt(i) == '-') {
                sign = -1;
            }
            i++;
        }
        while (i < n && Character.isDigit(s.charAt(i))) {
            int digit = s.charAt(i) - '0';
            int tmp = rst * 10 + digit;
            if (tmp / 10 != rst) {                                         // check overflow or underflow
                return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
            }
            rst = tmp;
            i++;
        }
        return rst * sign;
    }
}

Approach 2: Deterministic Finite Automaton (DFA)
a more generalized approach that can be applied to similar problems that would require writing many nested if else conditions.
