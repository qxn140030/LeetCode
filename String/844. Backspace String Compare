Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.
Note that after backspacing an empty text, the text will continue empty.
Example 1:
Input: s = "ab#c", t = "ad#c"
Output: true
Explanation: Both s and t become "ac".

Example 2:
Input: s = "ab##", t = "c#d#"
Output: true
Explanation: Both s and t become "".

Example 3:
Input: s = "a#c", t = "b"
Output: false
Explanation: s becomes "c" while t becomes "b".

Follow up: Can you solve it in O(n) time and O(1) space?

Approach 1: Use Stack to Build String 
Time Complexity: O(m + n)
Space Complexity: O(m + n)

class Solution {
    public boolean backspaceCompare(String s, String t) {
        return helper(s).equals(helper(t));
    }
    private String helper(String s) {
        Stack<Character> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (c != '#') {
                stack.push(c);
            } else if (!stack.empty()) {
                stack.pop();
            }
        }
        return String.valueOf(stack);
    }
}

class Solution {
    public boolean backspaceCompare(String s, String t) {
        return helper(s).equals(helper(t));
    }
    private String helper(String s) {
        StringBuilder sb = new StringBuilder(s);
        while (sb.indexOf("#") != -1) {
            int idx = sb.indexOf("#");
            sb.delete(Math.max(idx - 1, 0), idx + 1);
        }
        return sb.toString();
    }
}

Approach 2: Two Pointer
Iterate through the string in reverse. If we see a backspace character, the next non-backspace character is skipped. 
Time Complexity: O(m + n)
Space Complexity: O(1)

class Solution {
    public boolean backspaceCompare(String s, String t) {
        int i = s.length() - 1, j = t.length() - 1;
        int skipS = 0, skipT = 0;
        while (i >= 0 || j >= 0) {             // Note.
            while (i >= 0) {                   // Find position of next possible char in s.
                if (s.charAt(i) == '#') {
                    skipS++; 
                    i--;
                } else if (skipS > 0) {
                    skipS--; 
                    i--;
                } else {
                    break;
                }
            }
            while (j >= 0) { 
                if (t.charAt(j) == '#') {
                    skipT++; 
                    j--;
                } else if (skipT > 0) {
                    skipT--; 
                    j--;
                } else {
                    break;
                }
            }
            if ((i >= 0) != (j >= 0)) {             // If expecting to compare char vs nothing.
                return false;
            }
            if (i >= 0 && j >= 0 && s.charAt(i) != t.charAt(j)) {
                return false;
            } 
            i--; 
            j--;
        }
        return true;
    }
}
