Write a function to find the longest common prefix string amongst an array of strings.
Example 1:
Input: strs = ["flower","flow","flight"]
Output: "fl"

Example 2:
Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.

Approach 1: Horizontal Scanning
iterates through the strings, finding at each iteration the longest common prefix of strings.
Time complexity: O(m * n), m is the length of string, n is array length. 
Space complexity: O(1)

public class Solution {
    public String longestCommonPrefix(String[] strs) {
        String prefix = strs[0];
        for (int i = 1; i < strs.length; i++) {
            while (strs[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) {
                    return "";
                }
            }
        }
        return prefix;
    }
}

Approach 2: Vertical Scanning
if common prefix is very short, we can use vertical scanning to do less comparisons.
compare characters from top to bottom on the same column (same character index of the strings) before moving to the next column.
Time complexity: O(m * n), m is the length of string, n is array length. 
in the best case there are at most n * minLen.
Space complexity: O(1)

public class Solution {
    public String longestCommonPrefix(String[] strs) {
        for (int i = 0; i < strs[0].length(); i++) {
            for (int j = 1; j < strs.length; j++) {
                if (strs[j].length() <= i || strs[j].charAt(i) != strs[0].charAt(i)) {
                    return strs[0].substring(0, i);
                }
            }
        }
        return strs[0];
    }
}

Approach 3: Divide and Conquer
Time complexity: O(m * n), where m * n is the number of all characters in the array.
Space complexity: O(mlogn), where n is the length of array.
there is a memory overhead since we store recursive calls in the execution stack.

class Solution {
    public String longestCommonPrefix(String[] strs) {
        return longestCommonPrefix(strs, 0, strs.length - 1);
    }
    private String longestCommonPrefix(String[] strs, int left, int right) {
        if (left == right) {
            return strs[left];
        }
        int mid = (left + right) / 2;
        String leftCommonPrefix = longestCommonPrefix(strs, left, mid);
        String rightCommonPrefix = longestCommonPrefix(strs, mid + 1, right);
        return compare(leftCommonPrefix, rightCommonPrefix);
    }
    private String compare(String left, String right) {
        int minLen = Math.min(left.length(), right.length());
        for (int i = 0; i < minLen; i++) {
            if (left.charAt(i) != right.charAt(i)) {
                return left.substring(0, i);
            }
        }
        return left.substring(0, minLen);
    }
}

Approach 4: Binary search
Time complexity: O(mnlogm), where m * n is the number of all characters in the array. The algorithm makes logm iterations.
Space complexity: O(1)

public String longestCommonPrefix(String[] strs) {
    int minLen = Integer.MAX_VALUE;
    for (String str : strs) {
        minLen = Math.min(minLen, str.length());
    }
    int low = 0, high = minLen;
    while (low <= high) {
        int middle = (low + high) / 2;
        if (isCommonPrefix(strs, middle)) {
            low = middle + 1;
        } else {
            high = middle - 1;
        }
    }
    return strs[0].substring(0, (low + high) / 2);
}
private boolean isCommonPrefix(String[] strs, int len) {
    String str1 = strs[0].substring(0,len);
    for (int i = 1; i < strs.length; i++) {
        if (!strs[i].startsWith(str1)) {
            return false;
        }
    }
    return true;
}
