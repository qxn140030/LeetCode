The count-and-say sequence is the sequence of integers beginning as follows: 1, 11, 21, 1211, 111221, ...
1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.
Given an integer n, generate the nth sequence.
Note: The sequence of integers will be represented as a string.

Approach 1: Straightforward
Time complexity: O(m * n), m is the length of string.
Space complexity: O(m)
Time/Space complexity: O(4^(n/3)). 
each 3 iterations a single digit becomes 4 digits. If we treat every three iterations as a recursion, 
since we have n iterations, we then have n/3 such recursions. during each recursion a digit becomes fourfold.

public class Solution {
    public String countAndSay(int n) {
        String str = "1";
        while (--n > 0) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < str.length(); i++) {
                int count = 1;
                while (i < str.length() - 1 && str.charAt(i + 1) == str.charAt(i)) {
                    count++;
                    i++;
                } 
                sb.append(count).append(str.charAt(i));
            }
            str = sb.toString();
        }
        return str;
    }
}

Approach 2: Regular Expression
Time complexity: O(4^(n/3))
Space complexity: O(4^(n/3))

import java.util.regex.Matcher;
import java.util.regex.Pattern;

class Solution {
    public String countAndSay(int n) {
        String currentString = "1";
        // pattern to match the repetitive digits
        Pattern pattern = Pattern.compile("(.)\\1*");
        for (int i = 1; i < n; ++i) {
            Matcher m = pattern.matcher(currentString);
            StringBuffer nextString = new StringBuffer();
            // each group contains identical and adjacent digits
            while (m.find()) {
                nextString.append(m.group().length() + String.valueOf(m.group().charAt(0)));
            }
            // prepare for the next iteration
            currentString = nextString.toString();
        }
        return currentString;
    }
}
