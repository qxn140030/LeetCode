Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.
Example 1:
Input: s = "abab"
Output: true
Explanation: It is the substring "ab" twice.

Example 2:
Input: s = "aba"
Output: false

Example 3:
Input: s = "abcabcabcabc"
Output: true
Explanation: It is the substring "abc" four times or the substring "abcabc" twice.

Approach 1: Naive
Time complexity: O(n^2)
Space complexity: O(n)

class Solution {
    public boolean repeatedSubstringPattern(String s) {
        outer:
        for (int i = 1; i <= s.length() / 2; i++) {
            String sub = s.substring(0, i);
            int len = i, j = i; 
            for (; j + len <= s.length(); j += len) {
                if (!s.substring(j, j + len).equals(sub)) {
                    continue outer;
                }
            }
            if (j == s.length()) {
                return true;
            }
        }
        return false;
    }
}

Approach 2: Using Divisors
it is impossible to construct s by repeating substrings whose length is not a divisor of the length of s.
Time complexity: O(n * sqrt(n)), a number n can have a maximum of 2 * sqrt(n) number of divisors.
Space complexity: O(n)

class Solution {
    public boolean repeatedSubstringPattern(String s) {
        int n = s.length();
        for (int i = 1; i <= n / 2; i++) {
            if (n % i == 0) {
                StringBuilder pattern = new StringBuilder();
                for (int j = 0; j < n / i; j++) {               // concatenate the prefix n / i times to generate another string.
                    pattern.append(s.substring(0, i));
                }
                if (s.equals(pattern.toString())) {
                    return true;
                }
            }
        }
        return false;
    }
}

Approach 3: String Concatenation (very advanced approach)
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public boolean repeatedSubstringPattern(String s) {
        String t = s + s;
        if (t.substring(1, t.length() - 1).contains(s)) {
            return true;
        }
        return false;
    }
}
