You are given a string s and a positive integer k.
Select a set of non-overlapping substrings from the string s that satisfy the following conditions:
- The length of each substring is at least k.
- Each substring is a palindrome.
Return the maximum number of substrings in an optimal selection.
A substring is a contiguous sequence of characters within a string.

Example 1:
Input: s = "abaccdbbd", k = 3
Output: 2
Explanation: We can select the substrings underlined in s = "abaccdbbd". Both "aba" and "dbbd" are palindromes and have a length of at least k = 3.
It can be shown that we cannot find a selection with more than two valid substrings.

Example 2:
Input: s = "adbcda", k = 2
Output: 0
Explanation: There is no palindrome substring of length at least 2 in the string.

Approach 1:
Time complexity: O(n * k)
Space complexity: O(1)

class Solution {
    public int maxPalindromes(String s, int k) {
        int n = s.length(), ans = 0, start = 0;
        for (int center = 0; center < 2 * n; center++) {
            int left = center / 2, right = left + center % 2;
            while (left >= start && right < n && s.charAt(left) == s.charAt(right)) {
                if (right + 1 - left >= k) {
                    ans++;
                    start = right + 1;
                    break;
                }
                left--; 
                right++;
            }
        }
        return ans;
    }
}
