The API: int read4(char *buf) reads 4 characters at a time from a file.
The return value is the actual number of characters read. For example, it returns 3 if there is only 3 characters left in the file.
By using the read4 API, implement the function int read(char *buf, int n) that reads n characters from the file.
Note:
The read function may be called multiple times.


/**
 * The read4 API is defined in the parent class Reader4.
 *     int read4(char[] buf4); 
 */
public class Solution extends Reader4 {
    char[] locBuf = new char[4];
    int buffPtr = 0, buffCnt = 0;           // store the data received in previous calls.
    /**
     * @param buf Destination buffer
     * @param n   Number of characters to read
     * @return    The number of actual characters read
     */
    public int read(char[] buf, int n) {
        int i = 0;
        while (i < n) {
            if (buffPtr == 0) {
                buffCnt = read4(locBuf);
            }
            if (buffCnt == 0) {
                break;
            }
            while (i < n && buffPtr < buffCnt) {
                buf[i++] = locBuf[buffPtr++];
            }
            if (buffPtr == buffCnt) {       // if buffPtr reaches current buffCnt, it will be set as zero to be ready to read new data.
                buffPtr = 0;
            }
        }
        return i;
    }
}

public class Solution extends Reader4 {
    Queue<Character> q = new LinkedList<>();
    public int read(char[] buf, int n) {
        char[] tmp = new char[4];
        while (q.size() < n) {
            int cur = read4(tmp);
            if (cur == 0) {
                break;
            }
            for (int i = 0; i < cur; i++) {
                q.offer(tmp[i]);
            }
        }
        int num = Math.min(q.size(), n);
        int idx = 0;
        for (int i = 0; i < num; i++) {
            buf[idx++] = q.poll();
        }
        return idx;
    }
}
