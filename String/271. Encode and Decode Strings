Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is
decoded back to the original list of strings.
Machine 1 (sender) has the function:
string encode(vector<string> strs) {
  // ... your code
  return encoded_string;
}
Machine 2 (receiver) has the function:
vector<string> decode(string s) {
  //... your code
  return strs;
}
So Machine 1 does:
string encoded_string = encode(strs);
and Machine 2 does:
vector<string> strs2 = decode(encoded_string);
strs2 in Machine 2 should be the same as strs in Machine 1.
Implement the encode and decode methods.
Note:
The string may contain any possible characters out of 256 valid ascii characters. Your algorithm should be generalized
enough to work on any possible characters.
Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.
Do not rely on any library method such as eval or serialize methods. You should implement your own encode/decode algorithm.

Approach 1: Non-ASCII delimiter
Time complexity: O(n), where n denote the total number of characters across all strings in the input list.
                 both encoding and decoding processes iterate over every character in the input.
Space complexity: O(k), where k denote the number of strings, for each word, we are using some space for the delimiter.

public class Codec {
    public String encode(List<String> strs) {
        StringBuilder sb = new StringBuilder();
        for (String s : strs) {
            sb.append(s).append("π");
        }
        sb.deleteCharAt(sb.length() - 1);
        return sb.toString();
    }
    public List<String> decode(String s) {
        String[] str = s.split("π", -1);               // Note: use -1 as the limit parameter to ensure trailing empty strings are included.
        return new ArrayList<>(Arrays.asList(str));
    }
}

Approach 2: Escaping
The strings might contain any possible character, including our chosen delimiter.
we select /: as the delimiter, choose the slash character / as our escape character.
Time complexity: O(n)
Space complexity: O(k)

public class Codec {
    public String encode(List<String> strs) {
        StringBuilder sb = new StringBuilder();
        for (String s: strs) {
            sb.append(s.replace("/", "//")).append("/:");
        }
        return sb.toString();
    }
    public List<String> decode(String s) {
        List<String> decoded = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (i < s.length()) {
            if (i + 1 < s.length() && s.charAt(i) == '/' && s.charAt(i + 1) == ':') {
                decoded.add(sb.toString());
                sb = new StringBuilder();
                i += 2;
            } else if (i + 1 < s.length() && s.charAt(i) == '/' && s.charAt(i + 1) == '/') {
                sb.append('/');
                i += 2;
            } else {
                sb.append(s.charAt(i));
                i++;
            }
        }
        return decoded;
    }
}

Approach 3: Chunked Transfer Encoding
Time complexity: O(n)
Space complexity: O(k)

public class Codec {
    public String encode(List<String> strs) {
        StringBuilder sb = new StringBuilder();
        for (String s: strs) {
            sb.append(s.length()).append("/:").append(s);        // length + delimiter + original string.
        }
        return sb.toString();
    }
    public List<String> decode(String s) {
        List<String> decoded = new ArrayList<>();
        int i = 0;
        while (i < s.length()) {
            int delim = s.indexOf("/:", i);
            int len = Integer.parseInt(s.substring(i, delim));
            String str = s.substring(delim + 2, delim + 2 + len);
            decoded.add(str);
            i = delim + 2 + len;
        }
        return decoded;
    }
}

public class Codec {
    // Encodes a list of strings to a single string.
    public String encode(List<String> strs) {
        StringBuilder sb = new StringBuilder();
        for (String s : strs) {
            sb.append(s.length()).append("#").append(s);           // length of string + # + original string.
        }
        return sb.toString();
    }
    // Decodes a single string to a list of strings.
    public List<String> decode(String s) {
        List<String> rst = new ArrayList<String>();
        int start = 0;
        while (start < s.length()) {
            int index = s.indexOf('#', start);                     // get the first '#' after start pointer.
            int len = Integer.valueOf(s.substring(start, index));
            rst.add(s.substring(index + 1, index + 1 + len));
            start = index + 1 + len;
        }
        return rst;
    }
}
// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.decode(codec.encode(strs));
