Given a string s consisting of words and spaces, return the length of last word in the string.
Note: A word is defined as a character sequence consists of non-space characters only.
Example 1:
Input: s = "Hello World"
Output: 5

Example 2:
Input: s = "   fly me   to   the moon  "
Output: 4

Example 3:
Input: s = "luffy is still joyboy"
Output: 6

Approach 1: String index manipulation
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int lengthOfLastWord(String s) {
        int i = s.length() - 1, length = 0;
        while (i >= 0 && s.charAt(i) == ' ') {
            i--;
        }
        while (i >= 0 && s.charAt(i--) != ' ') {
            length++;
        }
        return length;
    }
}

Approach 2: One-loop iteration
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int lengthOfLastWord(String s) {
        int i = s.length() - 1, len = 0;
        while (i >= 0) {
            if (s.charAt(i--) != ' ') {
                len++;
            } else if (len > 0) {
                return len;
            }
        }
        return len;
    }
}

Approach 3: Built-in string functions
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int lengthOfLastWord(String s) {
    	s = s.trim();                     // String.trim() returns a copy of the string, with the leading and trailing whitespaces trimmed.
        return s.length() - s.lastIndexOf(" ") - 1;
    }
}
