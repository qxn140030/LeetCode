A password is considered strong if the below conditions are all met:
- It has at least 6 characters and at most 20 characters.
- It contains at least one lowercase letter, at least one uppercase letter, and at least one digit.
- It does not contain three repeating characters in a row (i.e., "Baaabb0" is weak, but "Baaba0" is strong).
Given a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.
In one step, you can:
- Insert one character to password,
- Delete one character from password, or
- Replace one character of password with another character.
 
Example 1:
Input: password = "a"
Output: 5

Example 2:
Input: password = "aA1"
Output: 3

Example 3:
Input: password = "1337C0d3"
Output: 0

Approach 1:

class Solution {
    public int strongPasswordChecker(String password) {
        int res = 0, a = 1, A = 1, d = 1;
        char[] carr = password.toCharArray();
        int[] arr = new int[carr.length];   
        for (int i = 0; i < arr.length;) {
            if (Character.isLowerCase(carr[i])) {
                a = 0;
            } else if (Character.isUpperCase(carr[i])) {
                A = 0;
            } else if (Character.isDigit(carr[i])) {
                d = 0;
            }
            int j = i;
            while (i < carr.length && carr[i] == carr[j]) {
                i++;
            }
            arr[j] = i - j;                    // store the length of continuous repeated characters in the password.
        }
        int totalMissing = a + A + d;
        if (arr.length < 6) {
            return totalMissing + Math.max(0, 6 - (arr.length + totalMissing));
        } 
        int overLen = Math.max(arr.length - 20, 0), leftOver = 0;
        res += overLen;
        for (int j = 1; j < 3; j++) {
            for (int i = 0; i < arr.length && overLen > 0; i++) {
                if (arr[i] >= 3 && arr[i] % 3 == j - 1) {
                    arr[i] -= Math.min(overLen, j);
                    overLen -= j;
                }
            }
        }
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] >= 3 && overLen > 0) {
                int need = arr[i] - 2;
                arr[i] -= overLen;
                overLen -= need;
            }
            if (arr[i] >= 3) {
                leftOver += arr[i] / 3;
            }
        }
        res += Math.max(totalMissing, leftOver);
        return res;
    }
}
