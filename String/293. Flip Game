You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, you and
your friend take turns to flip two consecutive "++" into "--". The game ends when a person can no longer make a move and therefore
the other person will be the winner.
Write a function to compute all possible states of the string after one valid move.
For example, given s = "++++", after one move, it may become one of the following states:
[
  "--++",
  "+--+",
  "++--"
]
If there is no valid move, return an empty list [].

Approach 1: Naive
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public List<String> generatePossibleNextMoves(String currentState) {
        List<String> rst = new ArrayList<>();
        for (int i = 1; i < currentState.length(); i++) {
            if (currentState.charAt(i) == '+' && currentState.charAt(i - 1) == '+') {
                rst.add(currentState.substring(0, i - 1) + "--" + currentState.substring(i + 1));
            }
        }
        return rst;
    }
}
