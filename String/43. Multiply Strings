Given two numbers represented as strings, return multiplication of the numbers as a string.
Note: 
The numbers can be arbitrarily large and are non-negative.
Converting the input string to integer is NOT allowed.
You should NOT use internal library such as BigInteger.

Approach 1: Elementary Math
Time Complexity: O(m * (m + n)), where n and m are the number of digits in num1 and num2 respectively.
Space complexity: O(m * (m + n))

class Solution {
    public String multiply(String num1, String num2) {
        if (num1.equals("0") || num2.equals("0")) {
            return "0";
        }
        StringBuilder first = new StringBuilder(num1).reverse();
        StringBuilder second = new StringBuilder(num2).reverse(); 
        List<List<Integer>> rst = new ArrayList<>();
        for (int i = 0; i < second.length(); i++) {                    // For each digit in second, multipy the digit by first
            rst.add(multiplyOneDigit(first, second.charAt(i), i));     // store the multiplication result (reversed) in results.
        }
        return sumResults(rst).reverse().toString();
    }
    private StringBuilder sumResults(List<List<Integer>> results) {
        List<Integer> answer = new ArrayList<>(results.get(results.size() - 1));    // Initialize answer as a number from results.
        List<Integer> newAnswer = new ArrayList<>();
        for (int j = 0; j < results.size() - 1; j++) {
            List<Integer> result = new ArrayList<>(results.get(j));
            newAnswer = new ArrayList<>();
            int carry = 0;
            for (int i = 0; i < answer.size() || i < result.size(); i++) {
                int digit1 = i < result.size() ? result.get(i) : 0;
                int digit2 = i < answer.size() ? answer.get(i) : 0;
                int sum = digit1 + digit2 + carry;
                carry = sum / 10;
                newAnswer.add(sum % 10);
            }
            if (carry > 0) {
                newAnswer.add(carry);
            }
            answer = newAnswer;
        }
        StringBuilder finalAnswer = new StringBuilder(); 
        for (int digit : answer) {
            finalAnswer.append(digit);
        }
        return finalAnswer;
    }
    private List<Integer> multiplyOneDigit(StringBuilder first, char secondNumDigit, int numZeros) {
        List<Integer> cur = new ArrayList<>();
        for (int i = 0; i < numZeros; i++) {
            cur.add(0);                                // Insert zeros at the beginning based on the current digit's place.
        }    
        int carry = 0;
        for (int i = 0; i < first.length(); i++) {     // Multiply firstNumber with the current digit of secondNumber.
            char firstNumDigit = first.charAt(i);
            int mult = (secondNumDigit - '0') * (firstNumDigit - '0') + carry;
            carry = mult / 10;
            cur.add(mult % 10);
        }
        if (carry > 0) {
            cur.add(carry);
        }
        return cur;
    }
}

Approach 2: Elementary math using less intermediate space
Time Complexity: O(m * (m + n))
Space complexity: O(m + n)

class Solution {
    public String multiply(String num1, String num2) {
        if (num1.equals("0") || num2.equals("0")) {
            return "0";
        }
        StringBuilder first = new StringBuilder(num1).reverse();
        StringBuilder second = new StringBuilder(num2).reverse();   
        int n = first.length() + second.length();    // To store the multiplication result of each digit of second with first.
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < n; i++) {       
            ans.add(0);
        }
        for (int i = 0; i < second.length(); i++) {
            ans = addStrings(multiplyOneDigit(first, second.charAt(i), i), ans);
        }
        if (ans.get(ans.size() - 1) == 0) {     // Pop excess 0 from the rear of ans.
            ans.remove(ans.size() - 1);
        }
        StringBuilder answer = new StringBuilder();
        for (int i = ans.size() - 1; i >= 0; i--) {
            answer.append(ans.get(i));
        }
        return answer.toString();
    }
    private List<Integer> addStrings(List<Integer> num1, List<Integer> num2) {
        List<Integer> ans = new ArrayList<>();
        int carry = 0; 
        for (int i = 0; i < num1.size() || i < num2.size(); i++) {
            int digit1 = i < num1.size() ? num1.get(i) : 0;
            int digit2 = i < num2.size() ? num2.get(i) : 0;   
            int sum = digit1 + digit2 + carry;
            carry = sum / 10;
            ans.add(sum % 10);
        }  
        if (carry > 0) {
            ans.add(carry);
        }
        return ans;
    }
    List<Integer> multiplyOneDigit(StringBuilder first, char secondNumDigit, int numZeros) {
        List<Integer> cur = new ArrayList<>();
        for (int i = 0; i < numZeros; i++) {
            cur.add(0);
        }
        int carry = 0;
        for (int i = 0; i < first.length(); i++) {
            char firstNumDigit = first.charAt(i);
            int mult = (secondNumDigit - '0') * (firstNumDigit - '0') + carry;
            carry = mult / 10;
            cur.add(mult % 10);
        }
        if (carry > 0) {
            cur.add(carry);
        }
        return cur;
    }
}

Approach 3: Sum the products from all pairs of digits
Time Complexity: O(m * n)
Space complexity: O(m + n)

public class Solution {
    public String multiply(String num1, String num2) {
        num1 = new StringBuilder(num1).reverse().toString();      // reverse the numbers first.
        num2 = new StringBuilder(num2).reverse().toString();
        int[] digits = new int[num1.length() + num2.length()];
        for (int i = 0; i < num1.length(); i++) {                 // multiply each digit and sum at the corresponding positions.
            int a = num1.charAt(i) - '0';
            for (int j = 0; j < num2.length(); j++) {
                int b = num2.charAt(j) - '0';
                digits[i + j] += a * b;
            }
        }
        StringBuilder sb = new StringBuilder();
        int carry = 0;
        for (int i = 0; i < digits.length; i++) {
            int digit = digits[i] + carry;
            carry = digit / 10;
            sb.insert(0, digit % 10);                            // StringBuilder.insert(int, int);
        }
        while (sb.charAt(0) == '0' && sb.length() > 1) {         // remove front 0's.
            sb.deleteCharAt(0);
        }
        return sb.toString();
    }
}
