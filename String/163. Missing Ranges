Question: Given a sorted integer array where the range of elements are [lower, upper] inclusive, return its missing ranges.
For example, given [0, 1, 3, 50, 75], lower = 0 and upper = 99, return ["2", "4->49", "51->74", "76->99"].

Approach 1: Linear scan
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public List<String> findMissingRanges(int[] nums, int lower, int upper) {
        List<String> rst = new ArrayList<String>();
        for (int i = 0; i <= nums.length; i++) {
            int start = i == 0 ? lower : nums[i - 1] + 1;
            int end = i == nums.length ? upper : nums[i] - 1;
            if (start == end) {
                rst.add(String.valueOf(start));
            } else if (start < end) {
                rst.add(start + "->" + end);
            }
        }
        return rst;
    }
}
