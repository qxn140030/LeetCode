You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of
substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.
Example 1:
Input: s = "barfoothefoobarman", words = ["foo","bar"]
Output: [0,9]

Example 2:
Input: s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]
Output: [6,9,12]

Approach 1: Check All Indices Using a Hash Table
Time complexity: O(n * a * b - (a * b)^2)
n is the length of s, a is the length of words, b is the length of each word.
Space complexity: O(a + b)






public class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> rst = new ArrayList<>();
        int len = words[0].length();        
        Map<String, Integer> map = new HashMap<>();
        for (String word : words) {
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        for (int i = 0; i < len; i++) {
            int start = i, count = 0;
            Map<String, Integer> cur = new HashMap<>();
            for (int j = i; j <= s.length() - len; j += len) {
                String word = s.substring(j, j + len);
                if (!map.containsKey(word)) {
                    start = j + len;
                    count = 0;
                    cur = new HashMap<>();
                } else {
                    cur.put(word, cur.getOrDefault(word, 0) + 1);
                    count++;
                    while (cur.get(word) > map.get(word)) {                        
                        String left = s.substring(start, start + len);
                        cur.put(left, cur.get(left) - 1);
                        count--;
                        start += len;
                    }
                    if (count == words.length) {
                        rst.add(start);                       
                        String left = s.substring(start, start + len);
                        cur.put(left, cur.get(left) - 1);
                        count--;
                        start += len;
                    }                   
                }
            }
        }
        return rst;
    }
}

Approach 2: Sliding Window

// wrong!
public class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> rst = new ArrayList<Integer>();
        int size = 1;
        for (String word : words) {
            s = s.replaceAll(word, "" + size);
            size++;
        }
        size--;
        for (int i = 0; i < s.length() - size; i++) {
            String str = s.substring(i, i + size);
            List<Character> list = new ArrayList<>();
            for (char c : str.toCharArray()) {
                if (list.contains(c)) {
                    break;
                }
                if (c > '0' && c <= '9') {
                    list.add(c);
                }
            }
            if (list.size() == size) {
                rst.add(i);
            }
        }
        return rst;
    }
}
