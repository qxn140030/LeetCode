Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.
Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].
For example, swapping at indices 0 and 2 in "abcd" results in "cbad".

Example 1:
Input: s = "ab", goal = "ba"
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'b' to get "ba", which is equal to goal.

Example 2:
Input: s = "ab", goal = "ab"
Output: false
Explanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in "ba" != goal.

Example 3:
Input: s = "aa", goal = "aa"
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'a' to get "aa", which is equal to goal.

Approach 1:
Time complexity: O(n)
Space complexity: O(1)

public boolean buddyStrings(String s, String goal) {
    if (s.length() != goal.length()) {
        return false;
    }
    if (s.equals(goal)) {
        int[] frequency = new int[26];
        for (char ch : s.toCharArray()) {
            frequency[ch - 'a']++;
            if (frequency[ch - 'a'] == 2) {     // If we have 2 same characters in string 's', we can swap them and still the strings will remain equal.
                return true;
            }
        }
        return false;
    }
    int firstIdx = 0, secondIdx = 0, numDiffs = 0;
    for (int i = 0; i < s.length(); i++) {
        if (s.charAt(i) != goal.charAt(i)) {
            numDiffs++;
            if (numDiffs > 2) {
                return false;
            } else if (numDiffs == 1) {
                firstIdx = i;
            } else {
                secondIdx = i;
            }
        }
    }
    return s.charAt(firstIdx) == goal.charAt(secondIdx) && s.charAt(secondIdx) == goal.charAt(firstIdx);
}
