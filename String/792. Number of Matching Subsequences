Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.
A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
For example, "ace" is a subsequence of "abcde".
Example 1:
Input: s = "abcde", words = ["a","bb","acd","ace"]
Output: 3
Explanation: There are three strings in words that are a subsequence of s: "a", "acd", "ace".

Example 2:
Input: s = "dsahjpjauf", words = ["ahjpjau","ja","ahbwzgqnuk","tnmlanowax"]
Output: 2

Approach 1: Brute Force [Time Limit Exceeded]

class Solution {
    char[] ca, cb;
    public int numMatchingSubseq(String s, String[] words) {
        int ans = 0;
        ca = s.toCharArray();
        for (String word : words) {
            if (subseq(word)) {
                ans++;
            }
        }
        return ans;
    }
    private boolean subseq(String word) {
        int i = 0;
        cb = word.toCharArray();
        for (char c : ca) {
            if (i < cb.length && c == cb[i]) {
                i++;
            }
        }
        return i == cb.length;
    }
}

Approach 2: Hash Map

class Solution {
    public int numMatchingSubseq(String s, String[] words) {
        Map<String, Integer> map = new HashMap<>();
        for (String word : words) {
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        int ans = 0;
        char ch[] = s.toCharArray();
        for (String str : map.keySet()) {
            char temp[] = str.toCharArray();
            int i = 0, j = 0; 
            while (i < ch.length && j < temp.length) {
                if (ch[i] == temp[j]) {
                    j++;
                } 
                i++;
            }
            if (j == temp.length) {
                ans += map.get(str);
            } 
        }
        return ans; 
    }
}
