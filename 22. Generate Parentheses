Question: Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
          For example, given n = 3, a solution set is: "((()))", "(()())", "(())()", "()(())", "()()()"

DFS. Time complexity: exponential. Space complexity: exponential.

public class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> rst = new ArrayList<String>();
        StringBuilder sb = new StringBuilder();
        helper(rst, sb, n, n);
        return rst;
    }
    private void helper(List<String> rst, StringBuilder sb, int left, int right) {
        if (left == 0 && right == 0) {
            rst.add(sb.toString());
            return;
        }
        if (left > right) {
            return;
        }
        if (left > 0) {
            sb.append('(');
            helper(rst, sb, left - 1, right);
            sb.deleteCharAt(sb.length() - 1);
        }
        if (right > 0) {
            sb.append(')');
            helper(rst, sb, left, right - 1);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
