Find the contiguous subarray within an array (containing at least one number) which has the largest product.
For example, given the array [2,3,-2,4], the contiguous subarray [2,3] has the largest product = 6.

each element has two possibilities: positive or negative. We need to track a minimum value, so that when a negative number
is given, it can also find the maximum value. We define two local variables, one tracks the maximum and the other tracks
the minimum.
public class Solution {
    public int maxProduct(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int max_local = nums[0];
        int min_local = nums[0];
        int global = nums[0];
        for (int i = 1; i < nums.length; i++) {
            int max_copy = max_local;                 // Note.
            max_local = Math.max(Math.max(nums[i], nums[i] * max_local), nums[i] * min_local);
            min_local = Math.min(Math.min(nums[i], nums[i] * max_copy), nums[i] * min_local);
            global = Math.max(global, max_local);
        }
        return global;
    }
}
