Write a program to find the node at which the intersection of two singly linked lists begins.
For example, the following two linked lists:
A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
begin to intersect at node c1.
Notes:
If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.

Solution 1:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if (headA == null || headB == null) {
            return null;
        }
        int lenA = 1;
        ListNode tailA = headA;
        while (tailA.next != null) {
            lenA++;
            tailA = tailA.next;
        }
        int lenB = 1;
        ListNode tailB = headB;
        while (tailB.next != null) {
            lenB++;
            tailB = tailB.next;
        }
        if (tailA != tailB) {
            return null;
        }
        if (lenA < lenB) {
            for (int i = 0; i < lenB - lenA; i++) {
                headB = headB.next;
            }
        } else {
            for (int i = 0; i < lenA - lenB; i++) {
                headA = headA.next;
            }
        }
        while (headA != headB) {
            headA = headA.next;
            headB = headB.next;
        }
        return headA;
    }
}

Solution 2: Maintain two pointers pA and pB initialized at the head of A and B, respectively. Then let them both traverse through the
lists, one node at a time. When pA reaches the end of a list, then redirect it to the head of B (yes, B, that's right.); similarly
when pB reaches the end of a list, redirect it the head of A. If at any point pA meets pB, then pA/pB is the intersection node. when
pA/pB reaches the end of a list, record the last element of A/B respectively. If the two last elements are not the same one, then the
two lists have no intersections.
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if (headA == null || headB == null) {
            return null;
        }
        ListNode nodeA = headA;
        ListNode nodeB = headB;
        ListNode tailA = null;
        ListNode tailB = null;
        while (true) {
             if (nodeA == null) {
                 nodeA = headB;
             }
             if (nodeB == null) {
                 nodeB = headA;
             }
             if (nodeA.next == null) {
                 tailA = nodeA;
             }
             if (nodeB.next == null) {
                 tailB = nodeB;
             }
             if (tailA != null && tailB != null && tailA != tailB) {
                 return null;
             }
             if (nodeA == nodeB) {
                 return nodeA;
             }
             nodeA = nodeA.next;
             nodeB = nodeB.next;
        }
    }
}
