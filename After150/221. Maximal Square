Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.
For example, given the following matrix:
1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0    Return 4.

Solution 1: Brute force. 
Time complexity: O((m * n) ^ 2). In worst case, we need to traverse the complete matrix for every 1.
Space complexity: O(1).
public class Solution {
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0) {
            return 0;
        }
        if (matrix[0] == null || matrix[0].length == 0) {
            return 0;
        }
        int rst = 0;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] == '1') {
                    boolean flag = true;
                    int delta = 1;
                    while (i + delta < matrix.length && j + delta < matrix[0].length && flag) {
                        for (int k = j; k <= j + delta; k++) {
                            if (matrix[i + delta][k] == '0') {
                                flag = false;
                                break;
                            }
                        }
                        for (int k = i; k <= i + delta; k++) {
                            if (matrix[k][j + delta] == '0') {
                                flag = false;
                                break;
                            }
                        }
                        if (flag) {
                            delta++;
                        }
                    }
                    if (delta > rst) {
                        rst = delta;
                    }
                }
            }
        }
        return rst * rst;
    }
}

Solution 2: DP.
Time complexity: O(m * n). Space complexity: O(m * n).
public class Solution {
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0) {
            return 0;
        }
        if (matrix[0] == null || matrix[0].length == 0) {
            return 0;
        }
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m + 1][n + 1];
        int rst = 0;
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (matrix[i - 1][j - 1] == '1') {
                    dp[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i][j - 1], dp[i - 1][j])) + 1;     // Note.
                    rst = Math.max(rst, dp[i][j]);
                }
            }
        }
        return rst * rst;
    }
}
