Compare two version numbers version1 and version2.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.
You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the
second first-level revision.
Here is an example of version numbers ordering: 0.1 < 1.1 < 1.2 < 13.37

The tricky part of the problem is to handle cases like 1.0 and 1. They should be equal. 2.15 > 2.5
public class Solution {
    public int compareVersion(String version1, String version2) {
        String[] v1 = version1.split("\\.");
        String[] v2 = version2.split("\\.");
        int i = 0;
        int j = 0;
        while (i < v1.length || j < v2.length) {
            int val1 = i < v1.length ? Integer.valueOf(v1[i]) : 0;
            int val2 = j < v2.length ? Integer.valueOf(v2[j]) : 0;
            if (val1 > val2) {
                return 1;
            }
            if (val1 < val2) {
                return -1;
            }
            i++;
            j++;
        }
        return 0;
    }
}
