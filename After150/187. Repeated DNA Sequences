All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: "ACGAATTCCG". When studying DNA,
it is sometimes useful to identify repeated sequences within the DNA.
Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.
For example, Given s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT",
Return: ["AAAAACCCCC", "CCCCCAAAAA"].

Solution 1: Brute force.
public class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        List<String> rst = new ArrayList<String>();
        if (s == null || s.length() <= 10) {
            return rst;
        }
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length() - 10 + 1; i++) {
            String sub = s.substring(i, i + 10);
            if (map.containsKey(sub)) {
                if (map.get(sub) == 1) {
                    rst.add(sub);
                }
                map.put(sub, map.get(sub) + 1);
            } else {
                map.put(sub, 1);
            }
        }
        return rst;
    }
}

Solution 2: each of the 4 nucleotides can be stored in 2 bits. A - 00, C - 01; G - 10; T - 11.
So the 10-letter-long sequence can be converted to 20-bits-long integer. 
public class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        List<String> rst = new ArrayList<String>();
        if (s == null || s.length() <= 10) {
            return rst;
        }
        Map<Character, Integer> map = new HashMap<>();
        map.put('A', 0);
        map.put('C', 1);
        map.put('G', 2);
        map.put('T', 3);
        Set<Integer> hs = new HashSet<>();
        Set<Integer> dna = new HashSet<>();
        int num = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i < 9) {
                num = (num << 2) + map.get(s.charAt(i));         // each ACGT fit 2 bits, so left shift 2.
            } else {
                num = (num << 2) + map.get(s.charAt(i));
                num = (num & ((1 << 20) - 1));                   // make length of num to be 20.
                if (hs.contains(num) && !dna.contains(num)) {
                    rst.add(s.substring(i - 9, i + 1));
                    dna.add(num);
                } else {
                    hs.add(num);
                }
            }
        }
        return rst;
    }
}
