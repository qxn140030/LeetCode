Reverse bits of a given 32 bits unsigned integer.
For example, given input 43261596 (represented in binary as 00000010100101000001111010011100), return 964176192 (represented
in binary as 00111001011110000010100101000000).
Follow up:
If this function is called many times, how would you optimize it?

public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int rst = 0;
        for (int i = 0; i < 32; i++) {
            rst = (rst << 1) | (n & 1);
            n >>= 1;
        }
        return rst;
    }
}

Follow up:
public class Solution {
    // you need treat n as an unsigned value
    Map<Byte, Integer> cache = new HashMap<Byte, Integer>();
    public int reverseBits(int n) {
        byte[] bytes = new byte[4];
        for (int i = 0; i < 4; i++) {      // convert int into 4 bytes
            bytes[i] = (byte)((n >>> 8 * i) & 0xFF);
        }
        int result = 0;
        for (int i = 0; i < 4; i++) {
            result += reverseByte(bytes[i]);      // reverse per byte
            if (i < 3) {
                result <<= 8;
            }
        }
        return result;
    }
    private int reverseByte(byte b) {
        if (cache.containsKey(b)) {        // first look up from cache
            return cache.get(b);
        }
        int value = 0;        
        for (int i = 0; i < 8; i++) {     // reverse by bit
            value += ((b >>> i) & 1);
            if (i < 7) {
                value <<= 1;
            }
        }
        cache.put(b, value);
        return value;
    }
}
