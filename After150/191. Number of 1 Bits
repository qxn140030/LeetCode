Write a function that takes an unsigned integer and returns the number of ’1' bits it has (also known as the Hamming weight).
For example, the 32-bit integer ’11' has binary representation 00000000000000000000000000001011, so the function should
return 3.

Solution 1: Loop and Flip.
The run time depends on the number of bits in n. Because n in this piece of code is a 32-bit integer, the time complexity
is O(1). The space complexity is O(1).
public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int bits = 0;
        int mask = 1;
        for (int i = 0; i < 32; i++) {
            if ((n & mask) != 0) {            // Note.
                bits++;
            }
            mask <<= 1;                       // mask.
        }
        return bits;
    }
}
public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int bits = 0;
        while (n != 0) {                      // Note.
            if ((n & 1) == 1) {
                bits++;
            }
            n >>>= 1;                         // >>>
        }
        return bits;
    }
}

Solution 2: Bit Manipulation Trick.
doing a bit-wise AND of n and n − 1 flips the least-significant 1-bit in n to 0.
public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int bits = 0;
        while (n != 0) {
            bits++;
            n &= (n - 1);
        }
        return bits;
    }
}
