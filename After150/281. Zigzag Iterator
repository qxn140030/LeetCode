Given two 1d vectors, implement an iterator to return their elements alternately.
For example, given two 1d vectors:
v1 = [1, 2]
v2 = [3, 4, 5, 6]
By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1, 3, 2, 4, 5, 6].
Follow up: What if you are given k 1d vectors? How well can your code be extended to such cases?
The "Zigzag" order is not clearly defined and is ambiguous for k > 2 cases. If "Zigzag" does not look right to you, replace
"Zigzag" with "Cyclic". For example, given the following input:
[1,2,3]
[4,5,6,7]
[8,9]
It should return [1,4,8,2,5,9,3,6,7].

Solution 1: two.
public class ZigzagIterator {
    Iterator<Integer> it1;
    Iterator<Integer> it2;
    int turn;
    public ZigzagIterator(List<Integer> v1, List<Integer> v2) {
        this.it1 = v1.iterator();
        this.it2 = v2.iterator();
        turn = 0;
    }
    public int next() {
        if (!hasNext()) {
            return 0;
        }
        turn++;
        if (turn % 2 == 1 && it1.hasNext() || !it2.hasNext()) {
            return it1.next();
        }
        if (turn % 2 == 0 && it2.hasNext() || !it1.hasNext()) {
            return it2.next();
        }
        return 0;
    }
    public boolean hasNext() {
        return it1.hasNext() || it2.hasNext();
    }
}
/**
 * Your ZigzagIterator object will be instantiated and called as such:
 * ZigzagIterator i = new ZigzagIterator(v1, v2);
 * while (i.hasNext()) v[f()] = i.next();
 */

Solution 2: for many.
public class ZigzagIterator {
    List<Iterator> list;
    int turn;
    public ZigzagIterator(List<Integer> v1, List<Integer> v2) {
        list = new LinkedList<>();
        if (!v1.isEmpty()) {
            list.add(v1.iterator());
        }
        if (!v2.isEmpty()) {
            list.add(v2.iterator());
        }
        turn = 0;
    }
    public int next() {
        if (!hasNext()) {
            return 0;
        }
        int rst = 0;
        int pos = turn % list.size();
        Iterator<Integer> cur = list.get(pos);
        rst = cur.next();
        if (!cur.hasNext()) {
            list.remove(pos);
            turn = pos - 1;
        }
        turn++;
        return rst;
    }
    public boolean hasNext() {
        return !list.isEmpty();
    }
}
