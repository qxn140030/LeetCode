Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements
of nums except nums[i]. Solve it without division and in O(n).
For example, given [1,2,3,4], return [24,12,8,6].
Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space
complexity analysis.)

Sloution 1: Time complexity: O(n). Space complexity: O(n).
public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] left = new int[n];
        left[0] = 1;
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] * nums[i - 1];
        }
        int[] right = new int[n];
        right[n - 1] = 1;
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] * nums[i + 1];
        }
        int[] rst = new int[n];
        for (int i = 0; i < n; i++) {
            rst[i] = left[i] * right[i];
        }
        return rst;
    }
}

Sloution 2: Time complexity: O(n). Space complexity: O(1).
public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] rst = new int[n];
        rst[n - 1] = 1;
        for (int i = n - 2; i >= 0; i--) {
            rst[i] = rst[i + 1] * nums[i + 1];
        }
        int left = 1;                         // Note.
        for (int i = 0; i < n; i++) {
            rst[i] *= left;
            left *= nums[i];
        }
        return rst;
    }
}
