Rotate an array of n elements to the right by k steps.
For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].
Note:
Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
Hint:
Could you do it in-place with O(1) extra space?

Solution 1: Brute Force [Time Limit Exceeded]
Time complexity: O(n * k). All the numbers are shifted by one step(O(n)) k times(O(k)). Space complexity: O(1).
public class Solution {
    public void rotate(int[] nums, int k) {
        k %= nums.length;
        for (int j = 0; j < k; j++) {
            for (int i = nums.length - 1; i > 0; i--) {
                int tmp = nums[i];
                nums[i] = nums[i - 1];
                nums[i - 1] = tmp;
            }
        }
    }
}

Solution 2: Using Extra Array.
Time complexity: O(n). One pass is used to put the numbers in the new array. And another pass to copy the new array to
the original one. Space complexity: O(n). Another array of the same size is used.
public class Solution {
    public void rotate(int[] nums, int k) {
        k %= nums.length;
        int[] tmp = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            tmp[(i + k) % nums.length] = nums[i];
        }
        for (int i = 0; i < nums.length; i++) {
            nums[i] = tmp[i];
        }
    }
}

Solution 3: Using Reverse.
Time complexity: O(n). n elements are reversed a total of three times. Space complexity: O(1).
public class Solution {
    public void rotate(int[] nums, int k) {
        k %= nums.length;
        reverse(nums, 0, nums.length - 1);
        reverse(nums, 0, k - 1);
        reverse(nums, k, nums.length - 1);
    }
    private void reverse(int[] nums, int left, int right) {
        for (int i = left, j = right; i < j; i++, j--) {
            int tmp = nums[i];
            nums[i] = nums[j];
            nums[j] = tmp;
        }
    }
}
