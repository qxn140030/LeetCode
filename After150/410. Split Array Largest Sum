Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty
continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.
Note:
Given m satisfies the following constraint: 1 ≤ m ≤ length(nums) ≤ 14,000.
Examples:
Input: nums = [7,2,5,10,8], m = 2
Output: 18
Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.

Binary Search. if (m == 1) return the max value of the array; if (m == length) return the sum of the array.
So the range: [max, sum]. Use greedy to narrow down left and right boundaries.
public class Solution {
    public int splitArray(int[] nums, int m) {
        int l = 0;
        int r = 0;
        for (int i : nums) {
            l = Math.max(l, i);
            r += i;
        }
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (canSplit(nums, mid, m)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
    private boolean canSplit(int[] nums, int mid, int m) {
        int count = 1;
        int curSum = 0;
        for (int i : nums) {
            curSum += i;
            if (curSum > mid) {
                curSum = i;
                count++;
                if (count > m) {
                    return false;
                }
            }
        }
        return true;
    }
}
