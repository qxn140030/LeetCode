Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.
You may assume that the array is non-empty and the majority element always exist in the array.

Solution 1:
Sorting array takes nlog(n). So the time complexity of this solution is nlog(n). Space complexity: O(1).
public class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length / 2];
    }
}

Solution 2: Linear time majority vote algorithm.
public class Solution {
    public int majorityElement(int[] nums) {
        int num = nums[0];
        int count = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == num) {
                count++;
            } else if (count > 0) {
                count--;
            } else {
                num = nums[i];
                count = 1;
            }
        }
        return num;
    }
}
