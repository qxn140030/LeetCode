Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.
Note: The input string may contain letters other than the parentheses ( and ).
Examples:
"()())()" -> ["()()()", "(())()"]
"(a)())()" -> ["(a)()()", "(a())()"]
")(" -> [""]

public class Solution {
    int max = 0;
    List<String> rst = new ArrayList<String>();
    public List<String> removeInvalidParentheses(String s) {
        helper(s, "", 0, 0);
        if (rst.size() == 0) {
            rst.add("");
        }
        return rst;
    }
    private void helper(String left, String right, int leftCount, int leftMax) {
        if (left.length() == 0) {
            if (leftCount == 0 && right.length() > 0) {
                if (leftMax > max) {
                    max = leftMax;
                }   
                if (leftMax == max && !rst.contains(right)) {         // Note
                    rst.add(right);
                }
            }
            return;
        }
        if (left.charAt(0) == '(') {    // note the order of two sentences, to make sure we can get the longest one at first.
            helper(left.substring(1), right + '(', leftCount + 1, leftMax + 1);     // keep '('
            helper(left.substring(1), right, leftCount, leftMax);                   // drop '('
        } else if (left.charAt(0) == ')') {
            if (leftCount > 0) {
                helper(left.substring(1), right + ')', leftCount - 1, leftMax);
            }
            helper(left.substring(1), right, leftCount, leftMax);
        } else {                                                               // letters other than the parentheses
            helper(left.substring(1), right + left.charAt(0), leftCount, leftMax);
        }
    }
}
