Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and
each combination should be a unique set of numbers.
Example 1: 
Input: k = 3, n = 7, Output: [[1,2,4]]
Example 2: 
Input: k = 3, n = 9, Output: [[1,2,6], [1,3,5], [2,3,4]]
          
public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> rst = new ArrayList<List<Integer>>();
        List<Integer> path = new ArrayList<Integer>();
        helper(k, n, rst, path, 1);
        return rst;
    }
    private void helper(int k, int n, List<List<Integer>> rst, List<Integer> path, int pos) {
        if (k == 0 && n == 0) {
            rst.add(new ArrayList<Integer>(path));
            return;
        }
        for (int i = pos; i <= 9; i++) {
            if (i > n) {
                return;
            }
            path.add(i);
            helper(k - 1, n - i, rst, path, i + 1);
            path.remove(path.size() - 1);
        }
    }
}
