Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct
element.
For example, Given [3,2,1,5,6,4] and k = 2, return 5.
Note: 
You may assume k is always valid, 1 ≤ k ≤ array's length.

Solution 1: Sort. Time complexity: O(nlogn). Space complexity: O(1).
public class Solution {
    public int findKthLargest(int[] nums, int k) {
        Arrays.sort(nums);
        return nums[nums.length - k];
    }
}

Solution 2: use a min heap. The heap stores the top k elements. Whenever the size is greater than k, delete the min.
Time complexity is O(nlog(k)). Space complexity is O(k) for storing the top k numbers.
public class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> q = new PriorityQueue<>(k);
        for (int i : nums) {
            q.offer(i);
            if (q.size() > k) {
                q.poll();
            }
        }
        return q.poll();
    }
}
