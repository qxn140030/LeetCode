Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum â‰¥ s.
If there isn't one, return 0 instead.
For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.
More practice:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).

Solution 1: O(n).
public class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        int start = 0;
        int len = nums.length + 1;
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            while (sum >= s) {
                len = Math.min(len, i - start + 1);
                sum -= nums[start++];
            }
        }
        return len == nums.length + 1 ? 0 : len;
    }
}

Solution 2: O(nlogn).
when meet an element, for example sum[i] is larger or equal to s, then find the largest element that smaller than sum[i] - 
target + 1 by using binary search. If find, the index j to index i - 1 is the subarray. length = i - j
public class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        int[] sum = new int[nums.length + 1];
        int len = nums.length + 1;
        for (int i = 0; i < nums.length; i++) {
            sum[i + 1] = sum[i] + nums[i];
            if (sum[i + 1] >= s) {
                int cur = search(sum, 0, i + 1, sum[i + 1] - s);      // find the rightmost sum that <= current sum - target.
                len = Math.min(len, i + 1 - cur);
            }
        }
        return len == nums.length + 1 ? 0 : len;
    }
    private int search(int[] sum, int start, int end, int target) {
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (sum[mid] <= target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (sum[end] <= target) {
            return end;
        } 
        return start;
    }
}
