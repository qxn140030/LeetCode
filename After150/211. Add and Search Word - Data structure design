Design a data structure that supports the following two operations:
void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can
represent any one letter.
For example:
addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.
You should be familiar with how a Trie works. If not, please work on this problem: Implement Trie (Prefix Tree) first.

// wrong answer
public class WordDictionary {
    TrieNode root = new TrieNode();
    // Adds a word into the data structure.
    public void addWord(String word) {
        TrieNode node = root;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (node.links[c - 'a'] == null) {
                TrieNode tmp = new TrieNode();
                node.links[c - 'a'] = tmp;
                node = tmp;
            } else {
                node = node.links[c - 'a'];
            }
        }
        node.isEnd = true;
    }

    // Returns if the word is in the data structure. A word could
    // contain the dot character '.' to represent any one letter.
    public boolean search(String word) {
        return search(root, word, 0);
    }
    private boolean search(TrieNode node, String word, int start) {
        if (node.isEnd && start == word.length()) {
            return true;
        }
        if (start >= word.length()) {
            return false;
        }
        char c = word.charAt(start);
        if (c == '.') {
            boolean flag = false;
            for (int i = 0; i < 26; i++) {
                if (node.links[i] != null) {
                    if (search(node.links[i], word, start + 1)) {
                        flag = true;
                        break;
                    }
                }
            }
            if (flag) {
                return true;
            }
        } else {
            if (node.links[c - 'a'] != null) {
                return search(node.links[c - 'a'], word, start + 1);
            } else {
                return false;
            }
        }
        return false;
    }
}
class TrieNode {
    TrieNode[] links;
    final int size = 26;
    boolean isEnd;
    public TrieNode() {
        links = new TrieNode[size];
    }
}
// Your WordDictionary object will be instantiated and called as such:
// WordDictionary wordDictionary = new WordDictionary();
// wordDictionary.addWord("word");
// wordDictionary.search("pattern");
