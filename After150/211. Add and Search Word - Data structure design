Design a data structure that supports the following two operations:
void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent
any one letter.
For example:
addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.
You should be familiar with how a Trie works. If not, please work on this problem: Implement Trie (Prefix Tree) first.

Solution 1: using HashMap.
public class WordDictionary {
    private TrieNode root;
    public WordDictionary(){
        root = new TrieNode();
    }
    // Adds a word into the data structure.
    public void addWord(String word) {
        Map<Character, TrieNode> children = root.children;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            TrieNode t = null;
            if (!children.containsKey(c)) {
                t = new TrieNode(c);
                children.put(c, t);
            }
            t = children.get(c);
            children = t.children;
            if (i == word.length() - 1) {
                t.isLeaf = true;
            }
        }
    }
    // Returns if the word is in the data structure. A word could
    // contain the dot character '.' to represent any one letter.
    public boolean search(String word) {
        return dfsSearch(root.children, word, 0);
    }    
    public boolean dfsSearch(Map<Character, TrieNode> children, String word, int start) {
        if (start == word.length()) {
            if (children.size() == 0) {          // why?
                return true; 
            }
            return false;
        }
        char c = word.charAt(start);    
        if (children.containsKey(c)) {
            if (start == word.length() - 1 && children.get(c).isLeaf){
                return true;
            }
            return dfsSearch(children.get(c).children, word, start + 1);
        } else if (c == '.') {
            boolean result = false;
            for (Map.Entry<Character, TrieNode> child : children.entrySet()) {
                if (start == word.length() - 1 && child.getValue().isLeaf) {
                    return true;
                } 
                //if any path is true, set result to be true; 
                if (dfsSearch(child.getValue().children, word, start + 1)){
                    result = true;
                }
            }
            return result;
        } else {
            return false;
        }
    }
}
class TrieNode{
    char c;
    Map<Character, TrieNode> children = new HashMap<>();
    boolean isLeaf;
    public TrieNode() {}
    public TrieNode(char c){
        this.c = c;
    }
}
// Your WordDictionary object will be instantiated and called as such:
// WordDictionary wordDictionary = new WordDictionary();
// wordDictionary.addWord("word");
// wordDictionary.search("pattern");

Solution 2: using Array.
public class WordDictionary {
    private TrieNode root; 
    public WordDictionary(){
        root = new TrieNode();
    }
    // Adds a word into the data structure.
    public void addWord(String word) {
        TrieNode p = root;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            int idx = c - 'a';
            TrieNode t = null;
            if (p.children[idx] == null) {
                TrieNode tmp = new TrieNode();
                p.children[idx] = tmp;
            }
            p = p.children[idx];
        }
        p.isWord = true;
    }
    // Returns if the word is in the data structure. A word could
    // contain the dot character '.' to represent any one letter.
    public boolean search(String word) {
        return dfsSearch(root, word, 0);
    }    
    public boolean dfsSearch(TrieNode p, String word, int start) {
        if (start == word.length() && p.isWord) {
            return true; 
        }
        if (start == word.length()) {
            return false;
        }
        char c = word.charAt(start);  
        if (c == '.') {
            boolean result = false;
            for (int j = 0; j < 26; j++) {
				if (p.children[j] != null) {
					if (dfsSearch(p.children[j], word, start + 1)) {
						result = true;
						break;
					}
				}
			}
            return result;
        } else {
            int idx = c - 'a';
            if (p.children[idx] != null) {
				return dfsSearch(p.children[idx], word, start + 1);
			} else {
				return false;
			}
        }
    }
}
class TrieNode{
    TrieNode[] children;
    boolean isWord;
    public TrieNode() {
        children = new TrieNode[26];
    }
}
