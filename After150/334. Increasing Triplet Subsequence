Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.
Formally the function should:
Return true if there exists i, j, k 
such that arr[i] < arr[j] < arr[k] given 0 ≤ i < j < k ≤ n-1 else return false.
Your algorithm should run in O(n) time complexity and O(1) space complexity.
Examples:
Given [1, 2, 3, 4, 5], return true.
Given [5, 4, 3, 2, 1], return false.

public class Solution {
    public boolean increasingTriplet(int[] nums) {
        if (nums == null || nums.length < 3) {
            return false;
        }
        int p1 = Integer.MAX_VALUE;                   // the smallest
        int p2 = Integer.MAX_VALUE;                   // second smallest
        for (int i = 0; i < nums.length; i++) {
            if (p1 >= nums[i]) {
                p1 = nums[i];
            } else if (p2 >= nums[i]) {
                p2 = nums[i];
            } else {
                return true;
            }
        }
        return false;
    }
}
