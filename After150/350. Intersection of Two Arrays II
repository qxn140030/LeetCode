Given two arrays, write a function to compute their intersection.
Example: Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].
Note:
Each element in the result should appear as many times as it shows in both arrays.
The result can be in any order.
Follow up:
What if the given array is already sorted? How would you optimize your algorithm?     use two pointers.
What if nums1's size is small compared to nums2's size? Which algorithm is better?
for each element in nums1, do binary search in nums2, so that the complexity is O(mlgn).
What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the
memory at once?
If only nums2 cannot fit in memory, put all elements of nums1 into a HashMap, read chunks of array that fit into the memory,
and record the intersections.
If both nums1 and nums2 are so huge that neither fit into the memory, sort them individually (external sort), read 2G of each
into memory and then using the 2 pointer technique, then read 2G more from the array that has been exhausted.

public class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i = 0;
        int j = 0;
        List<Integer> tmp = new ArrayList<>();
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] == nums2[j]) {
                tmp.add(nums1[i]);
                i++;
                j++;
            } else if (nums1[i] < nums2[j]) {
                i++;
            } else {
                j++;
            }
        }
        int[] rst = new int[tmp.size()];
        for (int k = 0; k < rst.length; k++) {
            rst[k] = tmp.get(k);
        }
        return rst;
    }
}

public class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : nums1) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i) + 1);
            } else {
                map.put(i, 1);
            }
        } 
        List<Integer> tmp = new ArrayList<>();
        for (int i : nums2) {
            if (map.containsKey(i) && map.get(i) > 0) {
                tmp.add(i);
                map.put(i, map.get(i) - 1);
            }
        }
        int[] rst = new int[tmp.size()];
        for (int i = 0; i < rst.length; i++) {
            rst[i] = tmp.get(i);
        }
        return rst;
    }
}
