Given an unsorted array of integers, find the length of longest increasing subsequence.
For example,
Given [10, 9, 2, 5, 3, 7, 101, 18],
The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4.
Note that there may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n^2) complexity.
Follow up: 
Could you improve it to O(n log n) time complexity?

Solution 1: Naive. DP.
Time complexity: O(n^2). Space complexity: O(n).
public class Solution {
    public int lengthOfLIS(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int max = 0;
        int[] rst = new int[nums.length];      // rst[i] represent the length of the longest increasing subsequence so far.
        for (int i = 0; i < nums.length; i++) {
            rst[i] = 1;               
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {             // If any element before i is smaller than nums[i]. 
                    rst[i] = Math.max(rst[i], rst[j] + 1);     // then rst[i] = max(rst[i], rst[j] + 1).
                }
            }
            max = Math.max(max, rst[i]);
        }
        return max;
    }
}

Solution 2: Binary Search.
Time complexity: O(nlogn). Space complexity: O(m). m is the length of the longest increasing subsequence.
public class Solution {
    public int lengthOfLIS(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        List<Integer> rst = new ArrayList<>();
        for (int num : nums) {
            if (rst.size() == 0 || num > rst.get(rst.size() - 1)) {
                rst.add(num);
            } else {
                int i = 0; 
                int j = rst.size() - 1;
                while (i < j) {
                    int mid = (i + j) / 2;
                    if (rst.get(mid) >= num) {
                        j = mid;
                    } else {
                        i = mid + 1;
                    }
                }
                rst.set(j, num);
            }
        }
        return rst.size();    // the rst is not the correct longest increasing subsequence, it just has the same length with it.
    }
}
