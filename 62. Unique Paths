A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).
How many possible unique paths are there?
Note: m and n will be at most 100.

Solution 1: DP. Time complexity: O(m * n). Space complexity: O(m * n).
public class Solution {
    public int uniquePaths(int m, int n) {
        if (m == 0 || n == 0) {
            return 0;
        }
        int[][] rst = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || j == 0) {
                    rst[i][j] = 1;
                } else {
                    rst[i][j] = rst[i - 1][j] + rst[i][j - 1];
                }
            }
        }
        return rst[m - 1][n - 1];
    }
}

Solution 2: DP. Time complexity: O(m * n). Space complexity: O(n).
public class Solution {
    public int uniquePaths(int m, int n) {
        int[] rst = new int[n];
        rst[0] = 1;
        for (int i = 0; i < m; i++) {
            for (int j = 1; j < n; j++) {
                rst[j] += rst[j - 1];
            }
        }
        return rst[n - 1];
    }
}
