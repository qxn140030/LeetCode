Given an m x n board of characters and a list of strings words, return all words on the board.
Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

Example 1:
Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]

Example 2:
Input: board = [["a","b"],["c","d"]], words = ["abcb"]
Output: []

Approach 1: DFS
do a full DFS search from every board cell for every word in the word list.
Time Complexity: O(m * n * w * L), where w is the number of eords, L is average word length.

Approach 2: Backtracking with Trie

Set<String> res = new HashSet<>();
public List<String> findWords(char[][] board, String[] words) {
    Trie trie = buildTrie(words);
    for (int i = 0; i < board.length; i++) {
        for (int j = 0; j < board[0].length; j++) {
            dfs(board, trie, i, j);
        }
    }
    return new ArrayList<>(res);
}
void dfs(char[][] board, Trie node, int i, int j) {
    if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || 
        board[i][j] == '#' || node.next[board[i][j] - 'a'] == null) {
            return;
    }
    node = node.next[board[i][j] - 'a'];
    if (node.word != null) {
        res.add(node.word);
    }
    char c = board[i][j];
    board[i][j] = '#';
    dfs(board, node, i - 1, j);
    dfs(board, node, i + 1, j);
    dfs(board, node, i, j - 1);
    dfs(board, node, i, j + 1);
    board[i][j] = c;
}
Trie buildTrie(String[] words) {
    Trie root = new Trie();
    for (String w : words) {
        Trie p = root;
        for (char c : w.toCharArray()) {
            if (p.next[c - 'a'] == null) {
                p.next[c - 'a'] = new Trie();
            }
            p = p.next[c - 'a'];
        }
        p.word = w;
    }
    return root;
}
class Trie {
    Trie[] next;
    String word;
    Trie() {
        next = new Trie[26];
        word = null;
    }
}
