A trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. 
There are various applications of this data structure, such as autocomplete and spellchecker.
Implement the Trie class:
- Trie() Initializes the trie object.
- void insert(String word) Inserts the string word into the trie.
- int countWordsEqualTo(String word) Returns the number of instances of the string word in the trie.
- int countWordsStartingWith(String prefix) Returns the number of strings in the trie that have the string prefix as a prefix.
- void erase(String word) Erases the string word from the trie.
 
Example 1:
Input
["Trie", "insert", "insert", "countWordsEqualTo", "countWordsStartingWith", "erase", "countWordsEqualTo", "countWordsStartingWith", "erase", "countWordsStartingWith"]
[[], ["apple"], ["apple"], ["apple"], ["app"], ["apple"], ["apple"], ["app"], ["apple"], ["app"]]
Output
[null, null, null, 2, 2, null, 1, 1, null, 0]

Explanation
Trie trie = new Trie();
trie.insert("apple");               // Inserts "apple".
trie.insert("apple");               // Inserts another "apple".
trie.countWordsEqualTo("apple");    // There are two instances of "apple" so return 2.
trie.countWordsStartingWith("app"); // "app" is a prefix of "apple" so return 2.
trie.erase("apple");                // Erases one "apple".
trie.countWordsEqualTo("apple");    // Now there is only one instance of "apple" so return 1.
trie.countWordsStartingWith("app"); // return 1
trie.erase("apple");                // Erases "apple". Now the trie is empty.
trie.countWordsStartingWith("app"); // return 0

Approach 1: Using Array

class Trie {
    class Node {
        Node[] children;
        int cnt, end;
        public Node() {
            children = new Node[26];
        }
    }
    Node head;
    public Trie() {
        head = new Node();
    }
    public void insert(String word) {
        Node p = head;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            int idx = c - 'a';
            if (p.children[idx] == null) {
                p.children[idx] = new Node();
            }
            p = p.children[idx];
            p.cnt++;
        }
        p.end++;
    }
    public int countWordsEqualTo(String word) {
        Node p = searchHelper(word);
        if (p == null) {
            return 0;
        }
        return p.end;
    }
    public int countWordsStartingWith(String prefix) {
        Node p = searchHelper(prefix);
        if (p == null) {
            return 0;
        }
        return p.cnt;
    }
    public void erase(String word) {
        Node p = head;
        Stack<Node> stack = new Stack<>();
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            int idx = c - 'a';
            if (p.children[idx] == null) {
                return;
            }
            p = p.children[idx];
            stack.push(p);
        }
        if (p.end <= 0) {
            return;
        }
        p.end--;
        while (!stack.isEmpty()) {
            p = stack.pop();
            p.cnt--;
        }
    }
    public Node searchHelper(String word) {
        Node p = head;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            int idx = c - 'a';
            if (p.children[idx] == null) {
                return null;
            }
            p = p.children[idx];
        }
        return p;
    }
}
/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * int param_2 = obj.countWordsEqualTo(word);
 * int param_3 = obj.countWordsStartingWith(prefix);
 * obj.erase(word);
 */
