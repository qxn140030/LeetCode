Given a string s, return the number of distinct substrings of s.
A substring of a string is obtained by deleting any number of characters (possibly zero) from the front of the string and any number (possibly zero) from the back of the string.
Example 1:
Input: s = "aabbaba"
Output: 21
Explanation: The set of distinct strings is ["a","b","aa","bb","ab","ba","aab","abb","bab","bba","aba","aabb","abba","bbab","baba","aabba","abbab","bbaba","aabbab","abbaba","aabbaba"]

Example 2:
Input: s = "abcdefg"
Output: 28

Follow up: 
Can you solve this problem in O(n) time complexity?

Approach 1: Trie
Time complexity: 
Space complexity: O()

class Node{
    Node[] links;
    Node() {
        links = new Node[26];
    }
    boolean containskey(char ch){
        return links[ch - 'a'] != null;
    }
    void put(char c, Node node) {
        links[c - 'a'] = node;
    }
    Node get(char c){
        return links[c -'a'];
    }
}
class Solution {
    Node root;
    public int countDistinct(String s) {
        root = new Node();
        int count = 0, n = s.length();
        if (s == null || n == 0) {
            return 0;
        }
        for (int i = 0; i < n; i++) {
            Node node = root;
            for (int j = i; j < n; j++) {
                if (!node.containskey(s.charAt(j))) {   
                    node.put(s.charAt(j), new Node());
                    count++;
                }
                node = node.get(s.charAt(j));  
            }    
        }
        return count;
    }
}
