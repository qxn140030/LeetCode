You are asked to design a file system that allows you to create new paths and associate them with different values.
The format of a path is one or more concatenated strings of the form: / followed by one or more lowercase English letters. 
For example, "/leetcode" and "/leetcode/problems" are valid paths while an empty string "" and "/" are not.
Implement the FileSystem class:
- bool createPath(string path, int value) Creates a new path and associates a value to it if possible and returns true. Returns false if the path already exists or its parent path doesn't exist.
- int get(string path) Returns the value associated with path or returns -1 if the path doesn't exist.
 
Example 1:
Input: 
["FileSystem","createPath","get"]
[[],["/a",1],["/a"]]
Output: 
[null,true,1]
Explanation: 
FileSystem fileSystem = new FileSystem();

fileSystem.createPath("/a", 1); // return true
fileSystem.get("/a"); // return 1

Example 2:
Input: 
["FileSystem","createPath","createPath","get","createPath","get"]
[[],["/leet",1],["/leet/code",2],["/leet/code"],["/c/d",1],["/c"]]
Output: 
[null,true,true,2,false,-1]
Explanation: 
FileSystem fileSystem = new FileSystem();

fileSystem.createPath("/leet", 1); // return true
fileSystem.createPath("/leet/code", 2); // return true
fileSystem.get("/leet/code"); // return 2
fileSystem.createPath("/c/d", 1); // return false because the parent path "/c" doesn't exist.
fileSystem.get("/c"); // return -1 because this path doesn't exist.

Approach 1: Dictionary for storing paths
Time Complexity: O(m), where m is the length of path.
Space Complexity: O(k), where k represents the number of unique paths that we add.

class FileSystem {
    Map<String, Integer> paths;
    public FileSystem() {
        paths = new HashMap<>();
    }
    public boolean createPath(String path, int value) {
        if (path.isEmpty() || (path.length() == 1 && path.equals("/")) || paths.containsKey(path)) {
            return false;
        }
        int delimIndex = path.lastIndexOf("/");
        String parent = path.substring(0, delimIndex);
        if (parent.length() > 1 && !paths.containsKey(parent)) {     // if the parent doesn't exist. Note that "/" is a valid parent.
            return false;
        }
        paths.put(path, value);                                      // add this new path and return true.
        return true;
    }  
    public int get(String path) {
        return paths.getOrDefault(path, -1);
    }
}
/**
 * Your FileSystem object will be instantiated and called as such:
 * FileSystem obj = new FileSystem();
 * boolean param_1 = obj.createPath(path,value);
 * int param_2 = obj.get(path);
 */

Approach 2: Trie

class FileSystem {
    class TrieNode {
        String name;
        int val;
        Map<String, TrieNode> children;
        TrieNode (String name) {
            this.name = name;
            this.val = -1;
            children = new HashMap<>();
        }
    }
    TrieNode root;
    public FileSystem() {
        this.root = new TrieNode("");
    }
    public boolean createPath(String path, int value) {
        String[] comp = path.split("/");
        TrieNode cur = root;
        for (int i = 1; i < comp.length; i++) {
            String curComp = comp[i];
            if (!cur.children.containsKey(curComp)) {
                if (i == comp.length - 1) {
                    cur.children.put(curComp, new TrieNode(curComp));
                } else {
                    return false;
                }  
            }
            cur = cur.children.get(curComp);
        }
        if (cur.val != -1) {
            return false;
        } 
        cur.val = value;
        return true; 
    } 
    public int get(String path) {
        String[] comp = path.split("/");
        TrieNode cur = root;
        for (int i = 1; i < comp.length; i++) {
            String curComp = comp[i];
            if (!cur.children.containsKey(curComp)) {
                return -1;   
            }
            cur = cur.children.get(curComp);
        }
        return cur.val;
    }
}
