Given two objects o1 and o2, check if they are deeply equal.
For two objects to be deeply equal, they must contain the same keys, and the associated values must also be deeply equal. Two objects are also considered deeply equal if they pass the === equality check.
You may assume both objects are the output of JSON.parse. In other words, they are valid JSON.
Please solve it without using lodash's _.isEqual() function.

Example 1:
Input: o1 = {"x":1,"y":2}, o2 = {"x":1,"y":2}
Output: true
Explanation: The keys and values match exactly.

Example 2:
Input: o1 = {"y":2,"x":1}, o2 = {"x":1,"y":2}
Output: true
Explanation: Although the keys are in a different order, they still match exactly.

Example 3:
Input: o1 = {"x":null,"L":[1,2,3]}, o2 = {"x":null,"L":["1","2","3"]}
Output: false
Explanation: The array of numbers is different from the array of strings.

Example 4:
Input: o1 = true, o2 = false
Output: false
Explanation: true !== false

Use cases:
1. Caching and Memoization
Deep equality checks can aid in determining whether or not the input has changed, allowing you to reuse previously cached results or initiate a fresh calculation.
Without deep equality checks, the cache would not work correctly, and passing seemingly identical objects would result in cache misses. 
Deep equality ensures that the cache operates based on the actual content and structure of the input objects, rather than their references or surface-level comparison.
2. State Comparison in UI Frameworks
UI frameworks like React and Angular frequently need to compare the prior state with the new state to detect if any changes have happened and to update the user interface accordingly.
3. Testing and assertions
When developing unit tests, you may need to compare the expected output of a function or module to the actual output.
4. Data Synchronization
if you have two versions of a user profile object from different systems, based on the comparison result, you can determine if synchronization is required to update one system's data with the changes from the other.
5. JSON Diffing
Deep equality checks in JSON diffing methods can be used to compare two JSON items and determine the particular changes between them.
important in situations such as version control systems and data migration operations.

Approach 1: Comparative Recursion
the string representation of an object contains all the information about its keys and values.
By converting the objects to strings, we can compare the strings directly using the strict equality check (===).
If the strings are equal, it implies that the objects have the same keys and values.

Time Complexity: O(N), where N is the total number of values in the objects being compared recursively.
Space Complexity: O(D), where D is the maximum depth of recursion.

/**  JavaScript
 * @param {any} o1                          
 * @param {any} o2
 * @return {boolean}
 */
var areDeeplyEqual = function(o1, o2) {
    if (o1 === o2) {
        return true;
    }
    if (o1 === null || o2 === null) {     
        return false;
    }
    if (String(o1) !== String(o2)) {                               // If the types of o1 and o2 are different.
        return false;
    }
    if (typeof o1 !== 'object') {                                  // Check if either o1 or o2 is not an object.
        return o1 === o2;
    }
    if (Array.isArray(o1)) {                                       // If o1 and o2 are arrays, they are compared element by element.
        if (o1.length !== o2.length) {
            return false;
        }
        for (let i = 0; i < o1.length; i++) {
            if (!areDeeplyEqual(o1[i], o2[i])) {
                return false;
            }
        }
        return true;
    }
    if (Object.keys(o1).length !== Object.keys(o2).length) {       // If o1 and o2 are objects, they are compared based on their properties.
        return false;
    }
    for (const key in o1) {
        if (!areDeeplyEqual(o1[key], o2[key])) {
            return false;
        }
    }
    return true;
};

function areDeeplyEqual(o1: any, o2: any): boolean {              // TypeScript.
    if (o1 === o2) {
        return true;
    }
    if (o1 === null || o2 === null) {
        return false;
    }
    if (String(o1) !== String(o2)) {
        return false;
    }
    if (typeof o1 !== 'object') {
        return o1 === o2;
    }
    if (Array.isArray(o1)) {
        if (o1.length !== o2.length) {
            return false;
        }
        for (let i = 0; i < o1.length; i++) {
            if (!areDeeplyEqual(o1[i], o2[i])) {
                return false;
            }
        }
        return true;
    }
    if (Object.keys(o1).length !== Object.keys(o2).length) {
        return false;
    }
    for (const key in o1) {
        if (!areDeeplyEqual(o1[key], o2[key])) {
            return false;
        }
    }
    return true;
};

Approach 2: Iterative Solution
use a stack by explicitly tracking and processing nested objects iteratively, which eliminates the need for recursive function calls.
Time Complexity: O(N), where N is the total number of values in the objects being compared recursively.
Space Complexity: O(D), where D is the maximum depth of the nested objects.

/**  JavaScript
 * @param {any} o1
 * @param {any} o2
 * @return {boolean}
 */
var areDeeplyEqual = function(o1, o2) {
    var objs = [[o1, o2]];              // Initialize a stack called objs with an array containing the initial objects o1 and o2. The stack will store pairs of objects to be compared.
    while (objs.length) {
        [o1, o2] = objs.pop();          // pops the top pair of objects o1 and o2 from the stack.
        if (o1 === o2) {
            continue;
        }
        if (typeof o1 !== 'object' || typeof o2 !== 'object') {
            return false;
        }
        if (Array.isArray(o1) !== Array.isArray(o2)) {
            return false;
        }
        const keys1 = Object.keys(o1);
        const keys2 = Object.keys(o2);
        if (keys1.length !== keys2.length) {
            return false;
        }
        for (const key of keys1) {
            if (!(key in o2)) {
                return false;
            }
            objs.push([o1[key], o2[key]]);
        }
    }
    return true;
};

function areDeeplyEqual(o1: any, o2: any): boolean {        // TypeScript.
    const objs: [any, any][] = [[o1, o2]];
    while (objs.length) {
        [o1, o2] = objs.pop()!;
        if (o1 === o2) {
            continue;
        }
        if (typeof o1 !== 'object' || typeof o2 !== 'object') {
            return false;
        }
        if (Array.isArray(o1) !== Array.isArray(o2)) {
            return false;
        }
        const keys1 = Object.keys(o1);
        const keys2 = Object.keys(o2);
        if (keys1.length !== keys2.length) {
            return false;
        }
        for (const key of keys1) {
            if (!(key in o2)) {
                return false;
            }
            objs.push([o1[key], o2[key]]);
        }
    }
    return true;
};
