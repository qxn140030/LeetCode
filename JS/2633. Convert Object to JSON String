Given an object, return a valid JSON string of that object. You may assume the object only includes strings, integers, arrays, objects, booleans, and null. 
The returned string should not include extra spaces. The order of keys should be the same as the order returned by Object.keys().
Please solve it without using the built-in JSON.stringify method.

Example 1:
Input: object = {"y":1,"x":2}
Output: {"y":1,"x":2}
Explanation: 
Return the JSON representation. Note that the order of keys should be the same as the order returned by Object.keys().

Example 2:
Input: object = {"a":"str","b":-12,"c":true,"d":null}
Output: {"a":"str","b":-12,"c":true,"d":null}
Explanation:
The primitives of JSON are strings, numbers, booleans, and null.

Example 3:
Input: object = {"key":{"a":1,"b":[{},null,"Hello"]}}
Output: {"key":{"a":1,"b":[{},null,"Hello"]}}
Explanation:
Objects and arrays can include other objects and arrays.

Example 4:
Input: object = true
Output: true
Explanation:
Primitive types are valid inputs.

Use Cases:
1. API Data Serialization
When building web applications that communicate with APIs, objects often need to be converted to JSON strings before sending them as data in HTTP requests. 
This allows the data to be properly serialized and transmitted in a format that APIs understand.
2. Local Storage
In web development, the localStorage or sessionStorage APIs are commonly used to store data locally within the browser. 
Since these APIs only accept string values, converting objects to JSON strings is necessary to store complex data structures and retrieve them later.
3. Logging
provides a structured and readable format for storing logs. It allows for easy analysis, searching, and processing of log data.
4. Configuration Files
JSON is commonly used for configuration files in various applications. 
Converting objects to JSON strings allows for easy storage and retrieval of configuration settings, enabling customization and flexibility in application behavior.

Approach 1: Using JSON-like String Concatenation
