Given a collection of integers that might contain duplicates, nums, return all possible subsets.
Note: The solution set must not contain duplicate subsets.
For example, If nums = [1,2,2], a solution is:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]

Time complexity: exponential. Space complexity: exponential.
public class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> rst = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0) {
            return rst;
        }
        Arrays.sort(nums);
        List<Integer> path = new ArrayList<Integer>();
        dfs(nums, rst, path, 0);
        return rst;
    }
    private void dfs(int[] nums, List<List<Integer>> rst, List<Integer> path, int pos) {
        rst.add(new ArrayList<Integer>(path));
        for (int i = pos; i < nums.length; i++) {
            if (i > pos && nums[i] == nums[i - 1]) {
                continue;
            }
            path.add(nums[i]);
            dfs(nums, rst, path, i + 1);
            path.remove(path.size() - 1);
        }
    }
}
