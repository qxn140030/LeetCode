Given a binary search tree and a node in it, find the in-order successor of that node in the BST.
If the given node has no in-order successor in the tree, return null.
The successor of a node p is the node with the smallest key greater than p.val.
Example 1:
            2
           / \
          1   3
Input: root = [2,1,3], p = 1
Output: 2

Example 2:
              5
             / \
            3   6
           / \
          2   4
         /
        1
Input: root = [5,3,6,2,4,null,null,1], p = 6
Output: null

Approach 1: Without using BST properties
Time complexity: O(n)
Space complexity: O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private TreeNode prev;
    private TreeNode next;
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        if (p.right != null) {  
            TreeNode leftmost = p.right;
            while (leftmost.left != null) {
                leftmost = leftmost.left;
            }
            return leftmost;
        } 
        helper(root, p);
        return next;
    }
    private void helper(TreeNode node, TreeNode p) { 
        if (node == null) {
            return;
        }
        helper(node.left, p);
        if (prev == p && next == null) {
            next = node;
            return;
        }
        prev = node;
        helper(node.right, p);
    }
}

Approach 2: Using BST properties
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        TreeNode successor = null;
        while (root != null) {
            if (p.val >= root.val) {
                root = root.right;
            } else {
                successor = root;
                root = root.left;
            }
        }      
        return successor;
    }
}

public class Solution {
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        TreeNode successor = null;
        while (root != null && root.val != p.val) {
            if (root.val > p.val) {
                successor = root;
                root = root.left;
            } else {
                root = root.right;
            }
        }
        if (root == null) {
            return null;
        }
        if (root.right == null) {
            return successor;
        }
        root = root.right;
        while (root.left != null) {
            root = root.left;
        }
        return root;
    }
}
