Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.
It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.
A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.
A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.
Example 1:
              8
             / \
            5   10
           / \    \
          1   7    12
Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

Example 2:
Input: preorder = [1,3]
Output: [1,null,3]

Approach 1: Construct from preorder and inorder traversal
Time complexity: O(nlog‚Å°n)
Space complexity: O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int preIdx = 0;
    int[] preorder;
    Map<Integer, Integer> map = new HashMap<>();
    public TreeNode bstFromPreorder(int[] preorder) {
        this.preorder = preorder;
        int[] inorder = Arrays.copyOf(preorder, preorder.length);
        Arrays.sort(inorder);
        int idx = 0;
        for (Integer val : inorder) {
            map.put(val, idx++);
        }
        return helper(0, inorder.length);
    }
    private TreeNode helper(int left, int right) {
        if (left == right) {                        // if there is no elements to construct subtrees.
            return null;
        }
        int val = preorder[preIdx++];               // pick up preIdx element as a root.
        TreeNode root = new TreeNode(val);
        int index = map.get(val);
        root.left = helper(left, index);
        root.right = helper(index + 1, right);
        return root;
    }
}

Approach 2: Recursion
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    int[] preorder;
    int n, idx = 0;
    public TreeNode bstFromPreorder(int[] preorder) {
        this.preorder = preorder;
        n = preorder.length;
        return helper(Integer.MIN_VALUE, Integer.MAX_VALUE);
    }
    private TreeNode helper(int left, int right) {
        if (idx == n) {
            return null;
        }
        int val = preorder[idx];
        if (val < left || val > right) {
            return null;
        }
        idx++;
        TreeNode root = new TreeNode(val);
        root.left = helper(left, val);
        root.right = helper(val, right);
        return root;
    }
}

Approach 3: Iteration
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        int n = preorder.length;
        if (n == 0) {
            return null;
        }
        TreeNode root = new TreeNode(preorder[0]);
        Deque<TreeNode> deque = new ArrayDeque<>();
        deque.push(root);
        for (int i = 1; i < n; i++) {
            TreeNode node = deque.peek();
            TreeNode child = new TreeNode(preorder[i]);
            while (!deque.isEmpty() && deque.peek().val < child.val) {   // adjust the parent.
                node = deque.pop();
            }
            if (node.val < child.val) {     // follow BST logic to create a parent-child link.
                node.right = child;
            } else {
                node.left = child;
            }
            deque.push(child);              // add the child into deque.
        }
        return root;
    }
}
