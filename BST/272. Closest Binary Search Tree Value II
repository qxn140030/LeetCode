Given the root of a binary search tree, a target value, and an integer k, return the k values in the BST that are closest to the target. 
You may return the answer in any order.
You are guaranteed to have only one unique set of k values in the BST that are closest to the target.
Follow up: 
Assume that the BST is balanced. Could you solve it in less than O(n) runtime (where n = total nodes)?
Example 1:
           4
          / \
         2   5
        / \
       1   3
Input: root = [4,2,5,1,3], target = 3.714286, k = 2
Output: [4,3]

Approach 1: Recursive Inorder + Sort
Time complexity: O(nlogn)
Space complexity: O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> closestKValues(TreeNode root, double target, int k) {
        List<Integer> nums = new ArrayList<>();
        inorder(root, nums);
        Collections.sort(nums, new Comparator<Integer>() {
            @Override
            public int compare(Integer a, Integer b) {
                return Math.abs(a - target) < Math.abs(b - target) ? -1 : 1;
            }
        });
        return nums.subList(0, k);
    }
    private void inorder(TreeNode root, List<Integer> nums) {
        if (root == null) {
            return;
        }
        inorder(root.left, nums);
        nums.add(root.val);
        inorder(root.right, nums);
    }
}

Approach 2: Recursive Inorder + Heap
Time complexity: O(nlogk)
Space complexity: O(k + h)

class Solution {
    public List<Integer> closestKValues(TreeNode root, double target, int k) {
        List<Integer> nums = new ArrayList<>();
        Queue<Integer> heap = new PriorityQueue<>((a, b) -> Math.abs(a - target) > Math.abs(b - target) ? -1 : 1);
        inorder(root, nums, heap, k);
        return new ArrayList<>(heap);
    }
    private void inorder(TreeNode root, List<Integer> nums, Queue<Integer> heap, int k) {
        if (root == null) {
            return;
        }         
        inorder(root.left, nums, heap, k);
        heap.add(root.val);
        if (heap.size() > k) {
            heap.remove();
        }
        inorder(root.right, nums, heap, k);
    }
}

Approach 3: QuickSelect
Time complexity: O(n), O(n^2) in the worst case.
Space complexity: O(n)

