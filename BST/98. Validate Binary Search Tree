Given a binary tree, determine if it is a valid binary search tree (BST).
Assume a BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:
    2
   / \
  1   3     Binary tree [2,1,3], return true.

Example 2:
    1
   / \
  2   3.    Binary tree [1,2,3], return false.

Approach 1: Recursive Traversal with Valid Range
Time complexity: O(n)
Space complexity: O(n) since we keep up to the entire tree.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        return check(root, null, null);
    }
    private boolean check(TreeNode root, Integer low, Integer high) {
        if (root == null) {
            return true;
        }
        if (low != null && root.val <= low || high != null && root.val >= high) {
            return false;
        }
        return check(root.left, low, root.val) && check(root.right, root.val, high);
    }
}

class Solution {
    public boolean isValidBST(TreeNode root) {
        return check(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    private boolean check(TreeNode root, long low, long high) {
        if (root == null) {
            return true;
        }
        if (root.val <= low || root.val >= high) {
            return false;
        }
        return check(root.left, low, root.val) && check(root.right, root.val, high);
    }
}

Approach 2: Iterative Traversal with Valid Range
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    private Stack<TreeNode> stack = new Stack<>();
    private Stack<Integer> upperLimits = new Stack<>();  
    private Stack<Integer> lowerLimits = new Stack<>();
    public boolean isValidBST(TreeNode root) {
        Integer low = null, high = null, val;
        update(root, low, high);
        while (!stack.isEmpty()) {
            root = stack.pop();
            low = lowerLimits.pop();
            high = upperLimits.pop();
            if (root == null) {
                continue;
            }
            val = root.val;
            if ((low != null && val <= low) || (high != null && val >= high)) {
                return false;
            }
            update(root.right, val, high);
            update(root.left, low, val);
        }
        return true;
    }
    private void update(TreeNode root, Integer low, Integer high) {
        stack.push(root);
        lowerLimits.push(low);
        upperLimits.push(high);
    }
}

Approach 3: Recursive Inorder Traversal
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    private Integer pre = null;                  // use Integer instead of int as it supports a null value.
    public boolean isValidBST(TreeNode root) {
        return inorder(root);
    }
    private boolean inorder(TreeNode root) {
        if (root == null) {
            return true;
        }
        if (!inorder(root.left) || (pre != null && root.val <= pre)) {
            return false;
        }
        pre = root.val;
        return inorder(root.right);
    }
}

Approach 4: Iterative Inorder Traversal
Time complexity: O(n)
Space complexity: O(n)

public class Solution {
    public boolean isValidBST(TreeNode root) {
        long pre = Long.MIN_VALUE;
        Deque<TreeNode> stack = new ArrayDeque<>();
        while (root != null || !stack.isEmpty()) {
            while (root != null) {
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            if (pre >= root.val) {
                return false;
            }
            pre = root.val;
            root = root.right;
        }
        return true;
    }
}
