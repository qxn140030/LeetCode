Given the root of a binary search tree and the lowest and highest boundaries as low and high, 
trim the tree so that all its elements lies in [low, high]. 
Trimming the tree should not change the relative structure of the elements that will remain in the tree. 
It can be proven that there is a unique answer.
Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.

Example 2: low = 1, high = 3
           3                3
          / \              /
         0   4     ->     2
          \              /
           2            1
          /
         1

Approach 1: Recursion
Time complexity: O(n)
Space complexity: O(logn) -> O(n) in the worst case.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        if (root == null) {
            return root;
        }
        if (root.val < low) {
            return trimBST(root.right, low, high);
        }
        if (root.val > high) {
            return trimBST(root.left, low, high);
        }
        root.left = trimBST(root.left, low, high);
        root.right = trimBST(root.right, low, high);
        return root;
    }
}

Approach 2: Iteration
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        TreeNode parent = null;
        TreeNode current = root;
        while (current != null) { 
            if (current.val > low) {
                parent = current;
                current = current.left;
            } else if (current.val < low) {
                if (parent == null) {
                    root = root.right;
                    current = root;
                } else {
                    parent.left = current.right;
                    current = parent.left;
                }
            } else {
                current.left = null;
                break;
            }
            
        } 
        current = root;
        parent = null;
        while (current != null) {   
            if (current.val < high) {
                parent = current;
                current = current.right;
            } else if (current.val > high) {
                if (parent == null) {
                    root = root.left;
                    current = root;
                } else {
                    parent.right = current.left;
                    current = parent.right;
                }
            } else {
                current.right = null;
                break;
            }       
        }  
        return root;
    }
}
