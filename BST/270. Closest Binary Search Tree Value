Question: Given the root of a binary search tree and a target value, return the value in the BST that is closest to the target.

Example 1:
        4
       / \
      2   5
     / \
    1   3
Input: root = [4,2,5,1,3], target = 3.714286
Output: 4

Example 2:
Input: root = [1], target = 4.428571
Output: 1

Approach 1: Revursive inorder + linear search
Time complexity: O(n)
Space complexity: O(n) to keep inorder traversal

class Solution {
    public int closestValue(TreeNode root, double target) {
        List<Integer> nums = new ArrayList<>();
        inorder(root, nums);
        return Collections.min(nums, new Comparator<Integer>() {
            public int compare(Integer i, Integer j) {
                return Math.abs(i - target) < Math.abs(j - target) ? -1 : 1;
            }
        });
    }
    public void inorder(TreeNode root, List<Integer> nums) {
        if (root == null) {
            return;
        }
        inorder(root.left, nums);
        nums.add(root.val);
        inorder(root.right, nums);
    }
}

Approach 2: Iterative inorder
To build an inorder traversal iteratively, go left as far as you can and add all nodes on the way into stack.
Time complexity: O(k) in the average case (balanced tree) and O(h + K) in the worst case, where k is the index of closest element.
Space complexity: up to O(h) to keep the stack in the case of non-balanced tree.

class Solution {
    public int closestValue(TreeNode root, double target) {
        Stack<TreeNode> stack = new Stack<>();
        int pred = Integer.MIN_VALUE;
        while (!stack.isEmpty() || root != null) {
            while (root != null) {
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            if (pred <= target && target < root.val) {
                return Math.abs(pred - target) < Math.abs(root.val - target) ? pred : root.val;
            }
            pred = root.val;
            root = root.right;
        }
        return pred;
    }
}

Approach 3: Binary search
Time complexity: O(h)
Space complexity: O(1)

class Solution {
    public int closestValue(TreeNode root, double target) {
        int closest = root.val;
        while (root != null) {
            closest = Math.abs(root.val - target) < Math.abs(closest - target) ? root.val : closest;
            root = target < root.val ? root.left : root.right;
        }
        return closest;
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    private double diff = Double.MAX_VALUE;                  
    private int rst;
    public int closestValue(TreeNode root, double target) {
        helper(root, target);
        return rst;
    }
    private void helper(TreeNode root, double target) {
        if (root == null) {
            return;
        }
        if (Math.abs(root.val - target) < diff) {
            diff = Math.abs(root.val - target);
            rst = root.val;
        }
        if (root.val > target) {
            helper(root.left, target);
        } else {
            helper(root.right, target);
        }
    }
}

public class Solution {
    private double diff = Double.MAX_VALUE;
    private int rst;
    public int closestValue(TreeNode root, double target) {
        while (root != null) {
            if (root.val > target) {
                if (root.val - target < diff) {
                    diff = root.val - target;
                    rst = root.val;
                }
                root = root.left;
            } else if (root.val < target) {
                if (target - root.val < diff) {
                    diff = target - root.val;
                    rst = root.val;
                }
                root = root.right;
            } else {
                return root.val;
            }
        }
        return rst;
    }
}
