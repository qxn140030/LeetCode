Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.
Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.
Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? 
How would you optimize the kthSmallest routine?
- without any optimisation insert/delete + search of kth element has O(2h + k) complexity.
- use the same logic as for LRU cache design, and combine an indexing structure (we could keep BST here) with a double linked list.
- Such a structure would provide:
-- O(h) time for the insert and delete.
-- O(k) for the search of kth smallest.
- The overall time complexity for insert/delete + search of kth smallest is O(h + k) instead of O(2h + k).
Hint:
Try to utilize the property of a BST.
What if you could modify the BST node's structure?
The optimal runtime complexity is O(height of BST).

Approach 1: Recursive Inorder Traversal
Time complexity: O(n)
Space complexity: O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        List<Integer> nums = inorder(root, new ArrayList<>());
        return nums.get(k - 1);
    }
    private List<Integer> inorder(TreeNode root, List<Integer> arr) {
        if (root == null) {
            return arr;
        }
        inorder(root.left, arr);
        arr.add(root.val);
        inorder(root.right, arr);
        return arr;
    }
}

Approach 2: Iterative Inorder Traversal
Time complexity: O(n)
defined by the stack, which contains at least h + k elements, since before starting to pop out one has to go down to a leaf. 
Space complexity: O(h)

class Solution {
    public int kthSmallest(TreeNode root, int k) {
        Deque<TreeNode> stack = new ArrayDeque<>();
        while (true) {
            while (root != null) {
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            if (--k == 0) {
                return root.val;
            }
            root = root.right;
        }
    }
}

Approach 3: Binary Search
Time complexity: O(n)
Space complexity: O(h)

class Solution {
    public int kthSmallest(TreeNode root, int k) {
        if (root == null) {
            return 0;
        }
        int left = countNodes(root.left);    
        if (k == left + 1) {
            return root.val;
        } else if (k > left + 1) {
            return kthSmallest(root.right, k - left - 1);
        } else {
            return kthSmallest(root.left, k);
        }
    }
    private int countNodes(TreeNode root) {       
        if (root == null) {
            return 0;
        }
        return countNodes(root.left) + countNodes(root.right) + 1;
    }
}
