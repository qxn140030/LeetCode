Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.
As a reminder, a binary search tree is a tree that satisfies these constraints:
- The left subtree of a node contains only nodes with keys less than the node's key.
- The right subtree of a node contains only nodes with keys greater than the node's key.
- Both the left and right subtrees must also be binary search trees.

Example 1:
                4
              /   \
             1     6
           /  \   /  \
          0   2  5    7
               \       \
                3       8
Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]

Example 2:
Input: root = [0,null,1]
Output: [1,null,1]

Approach 1: Adjust Post order traversal 
Time complexity: O(n)
Space complexity: O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode convertBST(TreeNode root) {
        Stack<Pair<TreeNode, Boolean>> stack = new Stack<>();
        stack.push(new Pair(root, false));
        int sum = 0;
        while (!stack.isEmpty()) {
            Pair<TreeNode, Boolean> pair = stack.pop();
            TreeNode cur = pair.getKey();
            boolean visit = pair.getValue();
            if (cur != null) {
                if (visit) {
                    sum += cur.val;
                    cur.val = sum;
                    stack.push(new Pair(cur.left, false));       // this is the modification, we visit node, then push left child node to stack.
                } else {
                    stack.push(new Pair(cur, true));
                    stack.push(new Pair(cur.right, false));      // original was after this line.
                }
            }
        }
        return root;
    }
}

Approach 2: Recursive
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    int sum = 0;
    public TreeNode convertBST(TreeNode root) {
        if (root == null) {
            return null;
        }
        convertBST(root.right);
        sum += root.val;
        root.val = sum;
        convertBST(root.left);
        return root;
    }
}
