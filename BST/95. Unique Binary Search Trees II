Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1...n.
For example, Given n = 3, your program should return all 5 unique BST's shown below.
   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

Approach 1: Recursion
Time complexity: exponential
Space complexity: exponential

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> generateTrees(int n) {
        return helper(1, n);  
    }
    List<TreeNode> helper(int start, int end) {
        List<TreeNode> rst = new ArrayList<>();
        if (start > end) {
            rst.add(null);          
            return rst;
        }
        for (int i = start; i <= end; i++) {
            List<TreeNode> left = helper(start, i - 1);        
            List<TreeNode> right = helper(i + 1, end);
            for (TreeNode l : left) {
                for (TreeNode r : right) {
                    TreeNode node = new TreeNode(i, l, r);
                    rst.add(node);
                }
            }
        }
        return rst;
    }
}

Approach 2: with Memoization
Time complexity: exponential
Space complexity: exponential

class Solution {
    Map<Pair<Integer, Integer>, List<TreeNode>> memo = new HashMap<>();
    public List<TreeNode> generateTrees(int n) {
        return helper(1, n);
    }
    List<TreeNode> helper(int start, int end) {
        List<TreeNode> list = new ArrayList<>();
        if (start > end) {
            list.add(null);
            return list;
        }
        Pair<Integer, Integer> pair = new Pair(start, end);
        if (memo.containsKey(pair)) {
            return memo.get(pair);
        }
        for (int i = start; i <= end; i++) {
            for (TreeNode left : helper(start, i - 1)) {
                for (TreeNode right : helper(i + 1, end)) {
                    list.add(new TreeNode(i, left, right));
                }
            }     
        }
        memo.put(pair, list);
        return list;
    }
}
