Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.
Example 1:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]

Example 2:
Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 
Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)

Approach 1: Left and Right product lists
Time complexity: O(n)
Space complexity: O(n)

public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] left = new int[n];
        left[0] = 1;
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] * nums[i - 1];
        }
        int[] right = new int[n];
        right[n - 1] = 1;
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] * nums[i + 1];
        }
        int[] rst = new int[n];
        for (int i = 0; i < n; i++) {
            rst[i] = left[i] * right[i];
        }
        return rst;
    }
}

Approach 2: O(1) space
Time complexity: O(n)
Space complexity: O(1)

public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] rst = new int[n];
        rst[n - 1] = 1;
        for (int i = n - 2; i >= 0; i--) {
            rst[i] = rst[i + 1] * nums[i + 1];
        }
        int left = 1;                            // Note.
        for (int i = 0; i < n; i++) {
            rst[i] *= left;
            left *= nums[i];
        }
        return rst;
    }
}
