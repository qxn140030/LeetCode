Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.
A subarray is a contiguous non-empty sequence of elements within an array.
Example 1:
Input: nums = [1,1,1], k = 2
Output: 2

Example 2:
Input: nums = [1,2,3], k = 3
Output: 2

Approach 1: Brute Force (TLE)
Time complexity: O(n^3)
Space complexity: O(1)

class Solution {
    public int subarraySum(int[] nums, int k) {
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j <= nums.length; j++) {
                int sum = 0;
                for (int m = i; m < j; m++) {
                    sum += nums[m];
                }  
                if (sum == k) {
                    count++;
                }   
            }
        }
        return count;
    }
}

Approach 2: Using Cumulative Sum
Time complexity: O(n^2)
Space complexity: O(n)

class Solution {
    public int subarraySum(int[] nums, int k) {
        int n = nums.length, count = 0;
        int[] sum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }     
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j <= n; j++) {
                if (sum[j] - sum[i] == k) {
                    count++;
                }     
            }
        }
        return count;
    }
}

Approach 3: Using Cumulative Sum Without Space
Time complexity: O(n^2)
Space complexity: O(1)

class Solution {
    public int subarraySum(int[] nums, int k) {
        int n = nums.length, count = 0;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += nums[j];
                if (sum == k) {
                    count++;
                }
            }
        }
        return count;
    }
}

Approach 4: Using Hashmap
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int subarraySum(int[] nums, int k) {
        int count = 0, sum = 0;
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (map.containsKey(sum - k)) {
                count += map.get(sum - k);
            }
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;
    }
}
