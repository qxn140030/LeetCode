Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower
right corner (row2, col2).
Example:
Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]
sumRegion(2, 1, 4, 3) -> 8
sumRegion(1, 1, 2, 2) -> 11
sumRegion(1, 2, 2, 4) -> 12
Note:
You may assume that the matrix does not change.
There are many calls to sumRegion function.
You may assume that row1 ≤ row2 and col1 ≤ col2.

Approach 1: Brute Force
Time complexity: O(m * n) per query. 
Space complexity: O(1). sum is a reference to matrix, not a copy of it.

Approach 2: Caching (Memory Limit Exceeded)
trade in extra space for speed by pre-calculating all possible rectangular region sum and store them in a hash table.
Time complexity: O(1) per query, O(m^2 * n^2) pre-computation.
Space complexity: O(m^2 * n^2)

Approach 3: Caching Rows
Try to see the 2D matrix as m rows of 1D arrays. To find the region sum, we just accumulate the sum in the region row by row.
Time complexity: O(m) per query, O(m * n) pre-computation.
Space complexity: O(m * n)

class NumMatrix {
    int[][] sum;
    public NumMatrix(int[][] matrix) {
        int m = matrix.length, n = matrix[0].length;
        sum = new int[m][n + 1];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                sum[i][j + 1] = sum[i][j] + matrix[i][j];
            }
        }
    }
    public int sumRegion(int row1, int col1, int row2, int col2) {
        int rst = 0;
        for (int i = row1; i <= row2; i++) {
            rst += sum[i][col2 + 1] - sum[i][col1];
        }
        return rst;
    }
}
/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * int param_1 = obj.sumRegion(row1,col1,row2,col2);
 */

Approach 4: Caching smarter
Time complexity: O(1) per query, O(m * n) pre-computation.
Space complexity: O(m * n)

class NumMatrix {
    int[][] sum;
    public NumMatrix(int[][] matrix) {
        int m = matrix.length, n = matrix[0].length;
        sum = new int[m + 1][n + 1];
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + matrix[i - 1][j - 1];
            }
        }
    }
    public int sumRegion(int row1, int col1, int row2, int col2) {
        return sum[row2 + 1][col2 + 1] - sum[row2 + 1][col1] - sum[row1][col2 + 1] + sum[row1][col1];
    }
}
