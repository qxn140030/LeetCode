Question: Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right,
          level by level from leaf to root).
For example:
          Given binary tree [3,9,20,null,null,15,7],
              3
             / \
            9  20
              /  \
             15   7
          return its bottom-up level order traversal as:
          [
            [15,7],
            [9,20],
            [3]
          ]

Time complexity: O(n), n is the number of nodes. Space complexity: O(n).          
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> rst = new ArrayList<List<Integer>>();
        if (root == null) {
            return rst;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()) {
            int size = q.size();
            List<Integer> level = new ArrayList<Integer>();
            for (int i = 0; i < size; i++) {
                root = q.remove();
                level.add(root.val);
                if (root.left != null) {
                    q.add(root.left);
                }
                if (root.right != null) {
                    q.add(root.right);
                }
            }
            rst.add(level);
        }
        Collections.reverse(rst);
        return rst;
    }
}
