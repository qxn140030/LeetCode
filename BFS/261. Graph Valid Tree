Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to
check whether these edges make up a valid tree.
For example:
Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.
Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.
Hint:
Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], what should your return? Is this case a valid tree?
According to the definition of tree on Wikipedia: “a tree is an undirected graph in which any two vertices are connected
by exactly one path. In other words, any connected graph without simple cycles is a tree.”
Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as
[1, 0] and thus will not appear together in edges.

Approach 1: DFS
Time complexity: O(n)
Space complexity: O(n)

Map<Integer, List<Integer>> adj = new HashMap<>();
public boolean validTree(int n, int[][] edges) {
    for (int i = 0; i < n; i++) {
        adj.put(i, new ArrayList<>());                                   // Step 1: Create the adjacency list.
    }
    for (int[] edge : edges) {                                           // Step 2: Build the graph.
        adj.get(edge[0]).add(edge[1]);
        adj.get(edge[1]).add(edge[0]);
    }
    boolean[] visited = new boolean[n];                                  // Step 3: Array to track visited nodes.
    if (isCyclic(0, -1, visited)) {                                      // Step 4: If DFS detects a cycle.
        return false;
    }
    for (boolean b : visited) {                                          // Step 5: Check if all nodes were visited
        if (!b) {                                                        // to ensure the graph is connected.
            return false;
        }
    }
    return true;
}
boolean isCyclic(int cur, int parent, boolean[] visited) {
    if (visited[cur]) {                                                   // Step 1: If the current node is already visited,
        return true;                                                      // a cycle is detected.
    }
    visited[cur] = true;
    for (int neighbor : adj.get(cur)) {                                  // Skip the parent node to avoid revisiting.
        if (neighbor != parent && isCyclic(neighbor, cur, visited)) {       
            return true;
        }
    }
    return false;
}

Approach 2: BFS
Time complexity: O(V + E)
Space complexity: O(V + E)

class Solution {
    public boolean validTree(int n, int[][] edges) {
        List<List<Integer>> adj = new ArrayList<>(); 
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        boolean[] visited = new boolean[n];
        Queue<Integer> q = new LinkedList<>();
        q.offer(0);
        while (!q.isEmpty()) {
            int num = q.poll();
            if (visited[num]) {
                return false;
            }
            visited[num] = true;
            for (int i : adj.get(num)) {
                if (!visited[i]) {
                    q.offer(i);
                }
            }
        }
        for (boolean b : visited) {
            if (!b) {
                return false;
            }
        }
        return true;
    }
}
