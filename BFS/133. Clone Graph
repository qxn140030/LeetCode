Given a reference of a node in a connected undirected graph.
Return a deep copy (clone) of the graph.
Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.
class Node {
    public int val;
    public List<Node> neighbors;
}
Test case format:
For simplicity, each node's value is the same as the node's index (1-indexed). 
For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.
An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.
The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.

Approach 1: DFS
Time complexity: O(V + E)
Space complexity: O(V)

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/
class Solution {
    private Map<Node, Node> visited = new HashMap<>();
    public Node cloneGraph(Node node) {
        if (node == null) {
            return node;
        }
        if (visited.containsKey(node)) {                            // If the node was already visited before, 
            return visited.get(node);                               // return the clone from the visited dictionary.
        }
        Node cloneNode = new Node(node.val, new ArrayList<>());     // Create a clone. Note that we don't have cloned neighbors as of now.
        visited.put(node, cloneNode);
        for (Node neighbor: node.neighbors) {                       // Iterate through the neighbors.
            cloneNode.neighbors.add(cloneGraph(neighbor));          // to generate their clones and prepare a list of cloned neighbors to be added.
        }
        return cloneNode;
    }
}

Approach 2: BFS
Time complexity: O(V + E)
Space complexity: O(V)

class Solution {
    public Node cloneGraph(Node node) {
        if (node == null) {
            return null;
        }
        Node newHead = new Node(node.val);
        Queue<Node> q = new LinkedList<>();
        Map<Node, Node> map = new HashMap<>();
        map.put(node, newHead);
        q.add(node);
        while (!q.isEmpty()) {
            node = q.remove();
            for (Node neighbor : node.neighbors) {
                if (!map.containsKey(neighbor)) {
                    Node copy = new Node(neighbor.val);
                    map.put(neighbor, copy);
                    q.add(neighbor);
                } 
                map.get(node).neighbors.add(map.get(neighbor));
            }
        }
        return newHead;
    }
}
