An n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\', or blank space ' '. These characters divide the square into contiguous regions.

Given the grid grid represented as a string array, return the number of regions.

Note that backslash characters are escaped, so a '\' is represented as '\\'.

Example 1:
Input: grid = [" /","/ "]
Output: 2

Example 2:
Input: grid = [" /","  "]
Output: 1

Example 3:
Input: grid = ["/\\","\\/"]
Output: 5
Explanation: Recall that because \ characters are escaped, "\\/" refers to \/, and "/\\" refers to /\.

int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
public int regionsBySlashes(String[] grid) {
    int n = grid.length;
    int[][] expandGrid = new int[n * 3][n * 3];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            int baseRow = i * 3, baseCol = j * 3;
            char c = grid[i].charAt(j);
            if (c == '\\') {
                expandGrid[baseRow][baseCol] = 1;
                expandGrid[baseRow + 1][baseCol + 1] = 1;
                expandGrid[baseRow + 2][baseCol + 2] = 1;
            } else if (c == '/') {
                expandGrid[baseRow][baseCol + 2] = 1;
                expandGrid[baseRow + 1][baseCol + 1] = 1;
                expandGrid[baseRow + 2][baseCol] = 1;
            }
        }
    }
    int count = 0;
    for (int i = 0; i < n * 3; i++) {
        for (int j = 0; j < n * 3; j++) {
            if (expandGrid[i][j] == 0) {
                floodFill(expandGrid, i, j);
                count++;
            }
        }
    }
    return count;
}
void floodFill(int[][] grid, int i, int j) {
    Queue<int[]> q = new LinkedList<>();
    grid[i][j] = 1;
    q.offer(new int[]{i, j});
    while (!q.isEmpty()) {
        int[] cur = q.poll();
        for (int[] d : directions) {
            int nextRow = d[0] + cur[0], nextCol = d[1] + cur[1];
            if (isValid(grid, nextRow, nextCol)) {
                grid[nextRow][nextCol] = 1;
                q.offer(new int[]{nextRow, nextCol});
            }
        }
    }
}
boolean isValid(int[][] grid, int i, int j) {
    return i >= 0 && i < grid.length && j >= 0 && j < grid.length && grid[i][j] == 0;
}
