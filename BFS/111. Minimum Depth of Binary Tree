Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Approach 1: Recursion (DFS)
Time complexity: O(n)
Space complexity: O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int minDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        if (root.left == null) {
            return minDepth(root.right) + 1;
        }
        if (root.right == null) {
            return minDepth(root.left) + 1;
        }
        return Math.min(minDepth(root.left), minDepth(root.right)) + 1;
    }
}

public class Solution {
    public int minDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        return getMin(root);
    }
    private int getMin(TreeNode root) {
        if (root == null) {
            return Integer.MAX_VALUE;
        }
        if (root.left == null && root.right == null) {
            return 1;
        }
        return Math.min(getMin(root.left), getMin(root.right)) + 1;
    }
}

Approach 2: Iteration (DFS)
Time complexity: O(n)
Space complexity: O(logn) or O(n)

class Solution {
    public int minDepth(TreeNode root) {
        LinkedList<Pair<TreeNode, Integer>> queue = new LinkedList<>();
        if (root == null) {
            return 0;
        }
        queue.add(new Pair(root, 1));
        int minDepth = Integer.MAX_VALUE;
        while (!queue.isEmpty()) {
            Pair<TreeNode, Integer> cur = queue.pollLast();
            root = cur.getKey();
            int curDepth = cur.getValue();
            if (root.left == null && root.right == null) {
                minDepth = Math.min(minDepth, curDepth);
            }
            if (root.left != null) {
                queue.add(new Pair(root.left, curDepth + 1));
            }
            if (root.right != null) {
                queue.add(new Pair(root.right, curDepth + 1));
            }
        }
        return minDepth;
    }
}

class Solution {
    public int minDepth(TreeNode root) {
        Deque<Pair<TreeNode, Integer>> stack = new ArrayDeque<>();
        if (root == null) {
            return 0;
        }
        stack.push(new Pair(root, 1));
        int minDepth = Integer.MAX_VALUE;
        while (!stack.isEmpty()) {
            Pair<TreeNode, Integer> cur = stack.pop();
            root = cur.getKey();
            int curDepth = cur.getValue();
            if (root.left == null && root.right == null) {
                minDepth = Math.min(minDepth, curDepth);
            }
            if (root.left != null) {
                stack.push(new Pair(root.left, curDepth + 1));
            }
            if (root.right != null) {
                stack.push(new Pair(root.right, curDepth + 1));
            }
        }
        return minDepth;
    }
}

Approach 3: BFS Iteration
The drawback of the DFS approach is that all nodes should be visited to ensure that the minimum depth would be found.
Time complexity: O(n)
Space complexity: O(logn) or O(n)

public class Solution {
    public int minDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        Queue<TreeNode> q = new LinkedList<>();
        int depth = 0;
        q.offer(root);
        while (!q.isEmpty()) {
            depth++;
            int size = q.size();
            for (int i = 0; i < size; i++) {
                root = q.poll();
                if (root.left == null && root.right == null) {
                    return depth;
                }
                if (root.left != null) {
                    q.offer(root.left);
                }
                if (root.right != null) {
                    q.offer(root.right);
                }
            }
        }
        return depth;
    }
}
