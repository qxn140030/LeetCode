Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).
Example 1:     1
              / \
             3   2
            / \   \
           5   3   9       Output: [1,3,9]

Approach 1: BFS
Time complexity: O(n)
Space complexity: O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> rst = new ArrayList<>();
        if (root == null) {
            return rst;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            int size = queue.size();
            int max = Integer.MIN_VALUE;
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                if (node.left != null) {
                    queue.add(node.left);
                }
                if (node.right != null) {
                    queue.add(node.right);
                }
                max = Math.max(max, node.val);
            }
            rst.add(max);
        }
        return rst;
    }
}

Approach 2: Pre Order DFS
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> rst = new ArrayList<>();
        helper(root, rst, 0);
        return rst;
    }
    public static void helper(TreeNode root, List<Integer> list, int level) {
        if (root == null) {
            return;
        }
        if (level == list.size()) {
            list.add(root.val);
        } else {
            list.set(level, Math.max(list.get(level), root.val));
        }
        helper(root.left, list, level + 1);
        helper(root.right, list, level + 1);
    }
}
