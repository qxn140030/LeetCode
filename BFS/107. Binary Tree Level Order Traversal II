Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).
For example:
Given binary tree [3,9,20,null,null,15,7]
              3
             / \
            9  20
              /  \
             15   7
return its bottom-up level order traversal as:
          [
            [15,7],
            [9,20],
            [3]
          ]

Approach 1: Recursion (DFS Preorder Traversal)
Time complexity: O(n)
Space complexity: O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> rst = new ArrayList<>();
        helper(root, rst, 0);
        Collections.reverse(rst);
        return rst;
    }
    private void helper(TreeNode root, List<List<Integer>> rst, int level) {
        if (root == null) {
            return;
        }
        if (rst.size() <= level) {      
            rst.add(new ArrayList<>());
        }
        rst.get(level).add(root.val);
        helper(root.left, rst, level + 1);
        helper(root.right, rst, level + 1);
    }
}

Approach 2: BFS (Iteration)
Time complexity: O(n) 
Space complexity: O(n)

public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> rst = new ArrayList<>();
        if (root == null) {
            return rst;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while (!q.isEmpty()) {
            int size = q.size();
            List<Integer> level = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                root = q.poll();
                level.add(root.val);
                if (root.left != null) {
                    q.offer(root.left);
                }
                if (root.right != null) {
                    q.offer(root.right);
                }
            }
            rst.add(0, level);
        }
        return rst;
    }
}
