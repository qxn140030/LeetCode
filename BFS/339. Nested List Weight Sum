Given a nested list of integers, return the sum of all integers in the list weighted by their depth.
Each element is either an integer, or a list -- whose elements may also be integers or other lists.
Example 1:
Given the list [[1,1],2,[1,1]], return 10. (four 1's at depth 2, one 2 at depth 1)
Example 2:
Given the list [1,[4,[6]]], return 27. (one 1 at depth 1, one 4 at depth 2, and one 6 at depth 3; 1 + 4*2 + 6*3 = 27)

Approach 1: Recursive
Time complexity: O()
Space complexity: O()

/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    public int depthSum(List<NestedInteger> nestedList) {
        return helper(nestedList, 1);
    }
    private int helper(List<NestedInteger> nestedList, int depth) {
        if (nestedList == null || nestedList.size() == 0) {
            return 0;
        }
        int rst = 0;                         // Note.
        for (NestedInteger n : nestedList) {
            if (n.isInteger()) {
                rst += n.getInteger() * depth;
            } else {
                rst += helper(n.getList(), depth + 1);     // n.getList().
            }
        }
        return rst;
    }
}

Approach 2: Iterative. using two queues.
Time complexity: O()
Space complexity: O()

public class Solution {
    public int depthSum(List<NestedInteger> nestedList) {
        if (nestedList == null || nestedList.size() == 0) {
            return 0;
        }
        int rst = 0;
        Queue<NestedInteger> q = new LinkedList<>();
        Queue<Integer> depth = new LinkedList<>();
        for (NestedInteger n : nestedList) {
            q.offer(n);
            depth.offer(1);
        }
        while (!q.isEmpty()) {
            NestedInteger n = q.poll();
            int d = depth.poll();
            if (n.isInteger()) {
                rst += n.getInteger() * d;
            } else {
                for (NestedInteger ni : n.getList()) {
                    q.offer(ni);
                    depth.offer(d + 1);
                }
            }
        }
        return rst;
    }
}
