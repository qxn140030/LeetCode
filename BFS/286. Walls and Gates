You are given a m x n 2D grid initialized with these three possible values.
-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 2^31 - 1 = 2147483647 to represent INF as you may assume that the
distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.
For example, given the 2D grid:
INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:
  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4

Approach 1: BFS
Time complexity: O(m * n)
Space complexity: O(m * n)

public void wallsAndGates(int[][] rooms) {
    int m = rooms.length, n = rooms[0].length;
    Queue<int[]> q = new LinkedList<>();
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (rooms[i][j] == 0) {
                q.offer(new int[]{i, j});
            }
        }
    }
    int[][] dir = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    while (!q.isEmpty()) {
        int[] cur = q.poll();
        for (int[] d : dir) {
            int r = cur[0] + d[0], c = cur[1] + d[1];
            if (r >= 0 && c >= 0 && r < m && c < n && rooms[r][c] != -1 && rooms[cur[0]][cur[1]] + 1 < rooms[r][c]) {
                rooms[r][c] = rooms[cur[0]][cur[1]] + 1;
                q.offer(new int[]{r, c});
            } 
        }
    }
}

Approach 2: DFS (TLE)
Time complexity: O()
Space complexity: O()

public class Solution {
    public void wallsAndGates(int[][] rooms) {
        int m = rooms.length, n = rooms[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (rooms[i][j] == 0) {
                    helper(rooms, i, j, 0);
                }
            }
        }
    }
    private void helper(int[][] rooms, int i, int j, int step) {
        int m = rooms.length, n = rooms[0].length;
        if (i < 0 || i >= m || j < 0 || j >= n || rooms[i][j] < step) {
            return;
        }
        rooms[i][j] = step;
        helper(rooms, i + 1, j, step + 1);
        helper(rooms, i - 1, j, step + 1);
        helper(rooms, i, j + 1, step + 1);
        helper(rooms, i, j - 1, step + 1);
    }
}
