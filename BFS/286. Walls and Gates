You are given a m x n 2D grid initialized with these three possible values.
-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 2^31 - 1 = 2147483647 to represent INF as you may assume that the
distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.
For example, given the 2D grid:
INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:
  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4

Approach 1: DFS (TLE)

public class Solution {
    public void wallsAndGates(int[][] rooms) {
        int m = rooms.length, n = rooms[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (rooms[i][j] == 0) {
                    helper(rooms, i, j, 0);
                }
            }
        }
    }
    private void helper(int[][] rooms, int i, int j, int step) {
        int m = rooms.length, n = rooms[0].length;
        if (i < 0 || i >= m || j < 0 || j >= n || rooms[i][j] < step) {
            return;
        }
        rooms[i][j] = step;
        helper(rooms, i + 1, j, step + 1);
        helper(rooms, i - 1, j, step + 1);
        helper(rooms, i, j + 1, step + 1);
        helper(rooms, i, j - 1, step + 1);
    }
}

Approach 2: BFS

public class Solution {
    public void wallsAndGates(int[][] rooms) {
        int m = rooms.length, n = rooms[0].length;
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (rooms[i][j] == 0) {
                    q.offer(i * n + j);
                }
            }
        }
        while (!q.isEmpty()) {
            int code = q.poll();
            int row = code / n, col = code % n;
            if (row > 0 && rooms[row - 1][col] == Integer.MAX_VALUE) {
                q.offer((row - 1) * n + col);
                rooms[row - 1][col] = rooms[row][col] + 1;
            }
            if (row < m - 1 && rooms[row + 1][col] == Integer.MAX_VALUE) {
                q.offer((row + 1) * n + col);
                rooms[row + 1][col] = rooms[row][col] + 1;
            }
            if (col > 0 && rooms[row][col - 1] == Integer.MAX_VALUE) {
                q.offer(row * n + col - 1);
                rooms[row][col - 1] = rooms[row][col] + 1;
            }
            if (col < n - 1 && rooms[row][col + 1] == Integer.MAX_VALUE) {
                q.offer(row * n + col + 1);
                rooms[row][col + 1] = rooms[row][col] + 1;
            }
        }
    }
}
