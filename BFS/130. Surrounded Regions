Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.
A region is captured by flipping all 'O's into 'X's in that surrounded region.
For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:
X X X X
X X X X
X X X X
X O X X
Explanation: Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.

Approach 1: DFS
The goal of this problem is to mark those captured cells.
enumerate all those candidate cells (i.e. the ones filled with O), and check one by one if they are captured or not.
Time complexity: O(m * n)
Space complexity: O(m * n)

public class Solution {
    public void solve(char[][] board) {
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || i == m - 1 || j == 0 || j == n - 1) {   // Step 1). select all the cells that are located on the borders of the board.
                    search(board, i, j);                              // Step 2). Start from each of the selected cell, perform the DFS traversal.
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if (board[i][j] == '#') {
                    board[i][j] = 'O';
                }
            }
        }
    }
    private void search(char[][] board, int i, int j) {
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != 'O') {
            return;
        }
        board[i][j] = '#';                // mark out all those connected O cells that is originated from the border.
        search(board, i - 1, j);
        search(board, i + 1, j);
        search(board, i, j - 1);
        search(board, i, j + 1);
    }
}

Approach 2: BFS
Time complexity: O(m * n). Use "Flood fill" algorithm for the four edges. because only 'O' will be replaced.
Space complexity: O(m * n)

public class Solution {
    public void solve(char[][] board) {
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || i == m - 1 || j == 0 || j == n - 1) {
                    search(board, i, j);
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if (board[i][j] == '#') {
                    board[i][j] = 'O';
                }
            }
        }
    }
    private void search(char[][] board, int i, int j) {
        if (board[i][j] != 'O') {
            return;
        }
        board[i][j] = '#';
        int m = board.length, n = board[0].length;
        Queue<Integer> q = new LinkedList<>();
        q.add(n * i + j);
        while (!q.isEmpty()) {
            int code = q.remove();
            int row = code / n, col = code % n;
            if (row > 0 && board[row - 1][col] == 'O') {
                q.add((row - 1) * n + col);
                board[row - 1][col] = '#';                    // Note: change to '#' here is important.
            }
            if (row < m - 1 && board[row + 1][col] == 'O') {
                q.add((row + 1) * n + col);
                board[row + 1][col] = '#';
            }
            if (col > 0 && board[row][col - 1] == 'O') {
                q.add(row * n + col - 1);
                board[row][col - 1] = '#';
            }
            if (col < n - 1 && board[row][col + 1] == 'O') {
                q.add(row * n + col + 1);
                board[row][col + 1] = '#';
            }
        }
    }
}
