You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] 
and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.
You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.
Return the answers to all queries. If a single answer cannot be determined, return -1.0.
Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.
Example 1:
Input: equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]

Example 2:
Input: equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
Output: [3.75000,0.40000,5.00000,0.20000]

Example 3:
Input: equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
Output: [0.50000,2.00000,-1.00000,-1.00000]

Approach 1: Path Search in Graph
Each division implies the reverse of the division. While by chaining up equations, we could obtain new equations.
We could reformulate the equations with the graph data structure, where each variable can be represented as a node in the graph,
and the division relationship between variables can be modeled as edge with direction and weight.
The direction of edge indicates the order of division, and the weight of edge indicates the result of division.
we can reinterpret the problem as "given two nodes, we are asked to check if there exists a path between them. 
If so, we should return the cumulative products along the path as the result.

1. DFS
class Solution {
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        HashMap<String, HashMap<String, Double>> graph = new HashMap<>();
        for (int i = 0; i < equations.size(); i++) {                       // Step 1). build the graph from the equations.
            List<String> equation = equations.get(i);
            String dividend = equation.get(0), divisor = equation.get(1);
            double quotient = values[i];
            if (!graph.containsKey(dividend)) {
                graph.put(dividend, new HashMap<String, Double>());
            }
            if (!graph.containsKey(divisor)) {
                graph.put(divisor, new HashMap<String, Double>());
            }
            graph.get(dividend).put(divisor, quotient);
            graph.get(divisor).put(dividend, 1 / quotient);
        }
        double[] results = new double[queries.size()];
        for (int i = 0; i < queries.size(); i++) {            // Step 2). verifying if there exists a path from dividend to divisor via bactracking (DFS)
            List<String> query = queries.get(i);
            String dividend = query.get(0), divisor = query.get(1);
            if (!graph.containsKey(dividend) || !graph.containsKey(divisor)) {
                results[i] = -1.0;
            } else if (dividend == divisor) {
                results[i] = 1.0;
            } else {
                HashSet<String> visited = new HashSet<>();
                results[i] = backtrackEvaluate(graph, dividend, divisor, 1, visited);
            }
        }
        return results;
    }
    private double backtrackEvaluate(HashMap<String, HashMap<String, Double>> graph, String currNode, String targetNode, double accProduct, Set<String> visited) {
        visited.add(currNode);
        double ret = -1.0;
        Map<String, Double> neighbors = graph.get(currNode);
        if (neighbors.containsKey(targetNode)) {
            ret = accProduct * neighbors.get(targetNode);
        } else {
            for (Map.Entry<String, Double> pair : neighbors.entrySet()) {
                String nextNode = pair.getKey();
                if (visited.contains(nextNode)) {
                    continue;
                }
                ret = backtrackEvaluate(graph, nextNode, targetNode, accProduct * pair.getValue(), visited);
                if (ret != -1.0) {
                    break;
                }  
            }
        }
        visited.remove(currNode);      // unmark the visit, for the next backtracking.
        return ret;
    }
}

2. BFS
class Solution {
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        Map<String, Map<String, Double>> graph = new HashMap<>();
        for (int i = 0; i < equations.size(); i++) {
            List<String> equation = equations.get(i);
            buildGraph(graph, equation.get(0), equation.get(1), values[i]);
            buildGraph(graph, equation.get(1), equation.get(0), 1.0 / values[i]);
        }
        double[] results = new double[queries.size()];
        for (int i = 0; i < queries.size(); i++) {
            List<String> query = queries.get(i);
            results[i] = calculate(graph, query.get(0), query.get(1));
        }
        return results;
    }
    private double calculate(Map<String, Map<String, Double>> graph, String first, String second) {
        if (!graph.containsKey(first) || !graph.containsKey(second)) {
            return -1.0;
        }
        Queue<String> q = new LinkedList<>();
        Map<String, Double> val = new HashMap<>();
        q.offer(first);
        val.put(first, 1.0);
        while (!q.isEmpty()) {
            String cur = q.poll();
            if (cur.equals(second)) {
                return val.get(cur);  
            }
            for (Map.Entry<String, Double> entry : graph.get(cur).entrySet()) {
                String next = entry.getKey();
                if (!vals.containsKey(next)) {
                    vals.put(next, vals.get(cur) * entry.getValue());
                    q.offer(next);
                }
            }
        }
        return -1.0;
    }
    private void buildGraph(Map<String, Map<String, Double>> graph, String first, String second, double val) {
        Map<String, Double> edges = graph.getOrDefault(first, new HashMap<>());
        edges.put(second, val);
        graph.put(first, edges);
    }
}
