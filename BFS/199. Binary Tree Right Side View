Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered
from top to bottom.
For example: Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].

Approach 1: BFS (Two Queues)
Time complexity: O(n)
Space complexity: O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> rst = new ArrayList<>();
        if (root == null) {
            return rst;
        }
        ArrayDeque<TreeNode> nextLevel = new ArrayDeque<>() {{ 
            offer(root); 
        }};
        Deque<TreeNode> currLevel = new ArrayDeque<>(); 
        TreeNode node = null; 
        while (!nextLevel.isEmpty()) {
            currLevel = nextLevel.clone();
            nextLevel.clear();
            while (!currLevel.isEmpty()) {
                node = currLevel.poll();
                if (node.left != null)  {
                    nextLevel.offer(node.left); 
                }       
                if (node.right != null) {
                    nextLevel.offer(node.right);
                } 
            }
            if (currLevel.isEmpty()) {
                rst.add(node.val);
            } 
        }
        return rst;
    }
}

Approach 2: BFS (One Queue + Sentinel)
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> rst = new ArrayList<>();
        if (root == null) {
            return rst;
        }                                                // ArrayDeque in Java doesn't support null elements,
        Queue<TreeNode> queue = new LinkedList<>() {{    // hence the data structure to use here is LinkedList.
            offer(root); 
            offer(null);                                 // Add null sentinel to mark the end of the first level.
        }};
        TreeNode prev, curr = root;
        while (!queue.isEmpty()) {
            prev = curr;
            curr = queue.poll();
            while (curr != null) {                       // Add first left and then right child node into the queue.
                if (curr.left != null)  {             
                    queue.offer(curr.left);
                }       
                if (curr.right != null) {
                    queue.offer(curr.right);
                } 
                prev = curr;
                curr = queue.poll();
            }                                            // Now the current node is null, i.e. we reached the end of the current level. 
            rst.add(prev.val);                           // Hence the previous node is the rightmost one.
            if (!queue.isEmpty()) {
                queue.offer(null);
            } 
        }
        return rst;
    }
}

Approach 3: BFS (One Queue + Level Size Measurements)
Time complexity: O(n)
Space complexity: O(n)

public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> rst = new ArrayList<>();
        if (root == null) {
            return rst;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                root = q.poll();
                if (i == 0) {
                    rst.add(root.val);
                }
                if (root.right != null) {            // add right child to queue before left child.
                    q.offer(root.right);
                }
                if (root.left != null) {
                    q.offer(root.left);
                }
            }
        }
        return rst;
    }
}

Approach 4: Recursive DFS
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> rst = new ArrayList<>();
        if (root == null) {
            return rst;
        }
        helper(root, 0, rst);
        return rst;
    }
    private void helper(TreeNode node, int level, List<Integer> rst) {
        if (level == rst.size()) {
            rst.add(node.val);
        }
        if (node.right != null) {
            helper(node.right, level + 1, rst);
        }  
        if (node.left != null) {
            helper(node.left, level + 1, rst);
        }
    }    
}
