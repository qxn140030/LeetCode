There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.
You are given a list of strings words from the alien language's dictionary, where the strings in words are sorted lexicographically by the rules of this new language.
Return a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language's rules. 
If there is no solution, return "". If there are multiple solutions, return any of them.
Example 1:
Input: words = ["wrt","wrf","er","ett","rftt"]
Output: "wertf"

Example 2:
Input: words = ["z","x"]
Output: "zx"

Example 3:
Input: words = ["z","x","z"]
Output: ""
Explanation: The order is invalid, so return "".

Approach 1: BFS
Time complexity: O(c), where c is the total length of all the words in the input list.
Space complexity : O(1)

class Solution {
    public String alienOrder(String[] words) {
        Map<Character, List<Character>> adjList = new HashMap<>();     // each character maps to a list of characters that come after it
        Map<Character, Integer> indegree = new HashMap<>();            // count of incoming edges for each character
        for (String word : words) {  
            for (char c : word.toCharArray()) {                        // Step 0: Create data structures and find all unique letters.
                indegree.put(c, 0);
                adjList.put(c, new ArrayList<>());
            }
        } 
        for (int i = 0; i < words.length - 1; i++) { 
            String word1 = words[i], word2 = words[i + 1];
            if (word1.length() > word2.length() && word1.startsWith(word2)) {   // Edge case: prefix conflict (e.g., "abc", "ab")   
                return "";
            }
            int len = Math.min(word1.length(), word2.length());
            for (int j = 0; j < len; j++) {
                char c1 = word1.charAt(j), c2 = word2.charAt(j);
                if (c1 != c2) {                                       // Find the first non match and insert the corresponding relation.
                    adjList.get(c1).add(c2);
                    indegree.put(c2, indegree.get(c2) + 1);
                    break;                                            // Only first differing character matters
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        Queue<Character> queue = new LinkedList<>();                 // Topological sort using BFS (Kahn's Algorithm)
        for (Character c : indegree.keySet()) {
            if (indegree.get(c) == 0) {
                queue.add(c);
            }
        }
        while (!queue.isEmpty()) {           
            Character c = queue.remove();
            sb.append(c);
            for (Character next : adjList.get(c)) {
                indegree.put(next, indegree.get(next) - 1);
                if (indegree.get(next) == 0) {
                    queue.add(next);
                }
            }
        }
        return sb.length() == indegree.size() ? sb.toString() : "";    // If result doesn't contain all characters, there's a cycle
    }
}
