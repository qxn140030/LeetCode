The diameter of a tree is the number of edges in the longest path in that tree.
There is an undirected tree of n nodes labeled from 0 to n - 1. You are given a 2D array edges where edges.
length == n - 1 and edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the tree.
Return the diameter of the tree.
Example 1:
            0
           / \
          2   1
Input: edges = [[0,1],[0,2]]
Output: 2
Explanation: The longest path of the tree is the path 1 - 0 - 2.

Example 2:
            1
          / | \
         0  2  4
            |  |
            3  5
Input: edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]
Output: 4
Explanation: The longest path of the tree is the path 3 - 2 - 1 - 4 - 5.

Approach 1: Farthest Nodes via BFS
Time Complexity: O(n)
Space Complexity: O(n)

class Solution {
    public int treeDiameter(int[][] edges) {
        List<Set<Integer>> graph = new ArrayList<>();
        for (int i = 0; i <= edges.length; i++) {
            graph.add(new HashSet<>());
        }
        for (int[] e : edges) {
            graph.get(e[0]).add(e[1]);
            graph.get(e[1]).add(e[0]);
        }
        int[] nodeDistance = bfs(0, graph);            // find one of the farthest nodes.
        nodeDistance = bfs(nodeDistance[0], graph);    // find the other farthest node.
        return nodeDistance[1];
    }
    private int[] bfs(int start, List<Set<Integer>> graph) {
        boolean[] visited = new boolean[graph.size()];
        visited[start] = true;
        Queue<Integer> q = new LinkedList<>();
        q.offer(start);
        int lastNode = start, distance = -1;
        while (!q.isEmpty()) {
            Queue<Integer> nextQueue = new LinkedList<>();
            while (!q.isEmpty()) {
                int nextNode = q.poll();
                for (int neighbor : graph.get(nextNode)) {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        nextQueue.offer(neighbor);
                        lastNode = neighbor;
                    }
                }
            }
            distance++;
            q = nextQueue;
        }
        return new int[]{lastNode, distance};
    }
}

Approach 2: Centroids of Graph via BFS
Time Complexity: O(n)
Space Complexity: O(n)

class Solution {
    public int treeDiameter(int[][] edges) {
        List<Set<Integer>> graph = new ArrayList<>();
        for (int i = 0; i <= edges.length; i++) {
            graph.add(new HashSet<>());
        }
        for (int[] e : edges) {
            graph.get(e[0]).add(e[1]);
            graph.get(e[1]).add(e[0]);
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < graph.size(); i++) {
            if (graph.get(i).size() == 1) {           // find the outer most nodes, i.e. leaf nodes.
                q.add(i);
            }
        }
        int layers = 0, vertexLeft = edges.length + 1;       // "peel" the graph layer by layer,
        while (vertexLeft > 2) {                             // until we have the centroids left.
            vertexLeft -= q.size();
            Queue<Integer> nextLevel = new LinkedList<>();
            while (!q.isEmpty()) {
                int nextNode = q.poll();
                for (int neighbor : graph.get(nextNode)) {
                    graph.get(neighbor).remove(nextNode);
                    if (graph.get(neighbor).size() == 1) {
                        nextLevel.add(neighbor);
                    }
                }
            }
            layers++;
            q = nextLevel;
        }
        return vertexLeft == 1 ? layers * 2 : layers * 2 + 1;
    }
}

Approach 3: DFS
Time Complexity: O(n)
Space Complexity: O(n)

class Solution {
    private List<List<Integer>> graph;
    private int diameter = 0;
    public int treeDiameter(int[][] edges) {
        graph = new ArrayList<>();
        boolean[] visited = new boolean[edges.length + 1];
        for (int i = 0; i <= edges.length; i++) {
            graph.add(new ArrayList<Integer>());
            visited[i] = false;
        }
        for (int[] e : edges) {
            graph.get(e[0]).add(e[1]);
            graph.get(e[1]).add(e[0]);
        }
        dfs(0, visited);
        return diameter;
    }
    private int dfs(int curr, boolean[] visited) {
        int topDist1 = 0, topDist2 = 0;             // the top 2 distance starting from this node.
        visited[curr] = true;
        for (int neighbor : graph.get(curr)) {
            int dist = 0;
            if (!visited[neighbor]) {
                dist = 1 + dfs(neighbor, visited);
            }
            if (dist > topDist1) {
                topDist2 = topDist1;
                topDist1 = dist;
            } else if (dist > topDist2) {
                topDist2 = dist;
            }
        }
        diameter = Math.max(diameter, topDist1 + topDist2);
        return topDist1;
    }
}
