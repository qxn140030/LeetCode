Given a root of an N-ary tree, return a deep copy (clone) of the tree.
Each node in the n-ary tree contains a val (int) and a list (List[Node]) of its children.
class Node {
    public int val;
    public List<Node> children;
}
Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).
Example 1:
               1
             / | \
            3  2  4
           / \
          5   6
Input: root = [1,null,3,2,4,null,5,6]
Output: [1,null,3,2,4,null,5,6]

Example 2:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]

Follow up: 
Can your solution work for the graph problem?

Approach 1: Recursion
Time Complexity: O(n)
Space Complexity: O(n)

class Solution {
    public Node cloneTree(Node root) {
        if (root == null) {
            return null;
        }
        Node copyRoot = new Node(root.val);
        for (Node child : root.children) {
            copyRoot.children.add(cloneTree(child));
        }
        return copyRoot;
    }
}

Approach 2: DFS with Iteration
Time Complexity: O(n)
Space Complexity: O(n)

class Solution {
    public Node cloneTree(Node root) {
        if (root == null) {
            return null;
        }
        Node copyRoot = new Node(root.val);
        Deque<Node[]> stack = new ArrayDeque<>();
        stack.push(new Node[]{root, copyRoot});
        while (!stack.isEmpty()) {
            Node[] nodePair = stack.pop();
            Node oldNode = nodePair[0], newNode = nodePair[1];
            for (Node child : oldNode.children) {
                Node newChild = new Node(child.val);
                newNode.children.add(newChild);
                stack.push(new Node[]{child, newChild});
            }
        }
        return copyRoot;
    }
}

Approach 3: BFS
Time Complexity: O(n)
Space Complexity: O(n)

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children; 
    public Node() {
        children = new ArrayList<Node>();
    }  
    public Node(int _val) {
        val = _val;
        children = new ArrayList<Node>();
    }
    public Node(int _val,ArrayList<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public Node cloneTree(Node root) {
        if (root == null) {
            return null;
        }
        Node copyRoot = new Node(root.val);
        Queue<Node[]> q = new LinkedList<>();
        q.offer(new Node[]{root, copyRoot});
        while (!q.isEmpty()) {
            Node[] cur = q.poll();
            for (Node child : cur[0].children) {
                Node copyChild = new Node(child.val);
                cur[1].children.add(copyChild);
                q.offer(new Node[]{child, copyChild});
            }
        }
        return copyRoot;
    }
}
