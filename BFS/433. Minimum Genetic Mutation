A gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'.
Suppose we need to investigate a mutation from a gene string startGene to a gene string endGene where one mutation is defined as one single character changed in the gene string.
For example, "AACCGGTT" --> "AACCGGTA" is one mutation.
There is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.
Given the two gene strings startGene and endGene and the gene bank bank, return the minimum number of mutations needed to mutate from startGene to endGene. If there is no such a mutation, return -1.
Note that the starting point is assumed to be valid, so it might not be included in the bank.

Example 1:
Input: startGene = "AACCGGTT", endGene = "AACCGGTA", bank = ["AACCGGTA"]
Output: 1

Example 2:
Input: startGene = "AACCGGTT", endGene = "AAACGGTA", bank = ["AACCGGTA","AACCGCTA","AAACGGTA"]
Output: 2

Approach 1: BFS
Time complexity: O(n * b + m * n^2 * m^n), let b be the size of bank, gene strings could have length n and could have m (m = 4) kind of characters.
SPace complexity: O(n * b + m^n)

class Solution {
    public int minMutation(String startGene, String endGene, String[] bank) {
        Set<String> bankSet = new HashSet<>(Arrays.asList(bank));
        Queue<String> queue = new LinkedList<>();
        Set<String> seen = new HashSet<>();
        queue.offer(startGene);
        seen.add(startGene);
        int steps = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int j = 0; j < size; j++) {
                String cur = queue.poll();
                if (cur.equals(endGene)) {
                    return steps;
                }
                for (char c : new char[]{'A', 'C', 'G', 'T'}) {
                    for (int i = 0; i < cur.length(); i++) {
                        String neighbor = cur.substring(0, i) + c + cur.substring(i + 1);
                        if (!seen.contains(neighbor) && bankSet.contains(neighbor)) {
                            queue.add(neighbor);
                            seen.add(neighbor);
                        }
                    }
                }
            }      
            steps++;
        }   
        return -1;
    }
}

Approach 2: DFS

class Solution {
    private int count = Integer.MAX_VALUE;
    public int minMutation(String startGene, String endGene, String[] bank) {
        Set<String> visited = new HashSet<>();
        visited.add(startGene);
        dfs(startGene, endGene, bank, 0, visited);
        return count == Integer.MAX_VALUE ? -1 : count;
    }
    private void dfs(String start, String end, String[] bank, int moves, Set<String> visited) {
        if (start.equals(end)) {
            count = Math.min(count, moves);
            return;
        }
        for (String validStr : bank) {
            if (visited.contains(validStr)) {
                continue;
            }
            int diff = 0;
            for (int i = 0; i < 8; i++) {
                if (start.charAt(i) != validStr.charAt(i)) {     // Find out which VALID string only has one different than start.
                    diff++;
                }
                if (diff > 1) {
                    break;
                }
            }
            if (diff == 1) {                                    // Because we could only move once a time.
                visited.add(validStr);
                dfs(validStr, end, bank, moves + 1, visited);
                visited.remove(validStr);
            }
        }
    }
}
