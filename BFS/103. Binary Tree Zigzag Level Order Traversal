Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to
left for the next level and alternate between).
Example 1: 
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

Approach 1: BFS
Time complexity: O(n)
Space complexity: O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> rst = new ArrayList<>();
        if (root == null) {
            return rst;
        }
        boolean left = true;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()) {
            int size = q.size();
            List<Integer> level = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                root = q.remove();
                if (root.left != null) {
                    q.add(root.left);
                }
                if (root.right != null) {
                    q.add(root.right);
                }
                if (left) {
                    level.add(root.val);
                } else {
                    level.add(0, root.val);
                }
            }
            rst.add(level);
            left = !left;
        }
        return rst;
    }
}

Approach 2: DFS
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> rst = new ArrayList<>();
        if (root == null) {
            return rst;
        }
        dfs(root, 0, rst);
        return rst;
    }
    private void dfs(TreeNode node, int level, List<List<Integer>> rst) {
        if (level >= rst.size()) {
            LinkedList<Integer> newLevel = new LinkedList<>();
            newLevel.add(node.val);
            rst.add(newLevel);
        } else {
            if (level % 2 == 0) {
                rst.get(level).add(node.val);
            }
            else {
                rst.get(level).add(0, node.val);
            }
        }
        if (node.left != null) {
            dfs(node.left, level + 1, rst);
        }
        if (node.right != null) {
            dfs(node.right, level + 1, rst);
        }
    }
}
