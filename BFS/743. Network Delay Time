You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), 
where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.
We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.
Example 1:
Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2

Example 2:
Input: times = [[1,2,1]], n = 2, k = 1
Output: 1

Example 3:
Input: times = [[1,2,1]], n = 2, k = 2
Output: -1

Approach 1: DFS
Time complexity: O((V − 1)! + Elog⁡E)
Space complexity: O(V + E)

class Solution {
    Map<Integer, List<Pair<Integer, Integer>>> adj = new HashMap<>();
    public int networkDelayTime(int[][] times, int n, int k) {
        for (int[] time : times) {
            int source = time[0], dest = time[1], travelTime = time[2]; 
            adj.putIfAbsent(source, new ArrayList<>());
            adj.get(source).add(new Pair(travelTime, dest));
        }
        for (int node : adj.keySet()) {
            Collections.sort(adj.get(node), (a, b) -> a.getKey() - b.getKey());
        }
        int[] signalReceivedAt = new int[n + 1];
        Arrays.fill(signalReceivedAt, Integer.MAX_VALUE);
        dfs(signalReceivedAt, k, 0);
        int rst = Integer.MIN_VALUE;
        for (int node = 1; node <= n; node++) {
            rst = Math.max(rst, signalReceivedAt[node]);
        }
        return rst == Integer.MAX_VALUE ? -1 : rst;
    }
    private void dfs(int[] signalReceivedAt, int currNode, int currTime) {
        if (currTime >= signalReceivedAt[currNode]) {
            return;
        }
        signalReceivedAt[currNode] = currTime;
        if (!adj.containsKey(currNode)) {
            return;
        }
        for (Pair<Integer, Integer> edge : adj.get(currNode)) {
            int travelTime = edge.getKey(), neighborNode = edge.getValue();
            dfs(signalReceivedAt, neighborNode, currTime + travelTime);
        }
    }
}

Approach 2: BFS
Time complexity: O((V * E)
Space complexity: O(V * E)

class Solution {
    Map<Integer, List<Pair<Integer, Integer>>> adj = new HashMap<>();
    public int networkDelayTime(int[][] times, int n, int k) {
        for (int[] time : times) {
            int source = time[0], dest = time[1], travelTime = time[2]; 
            adj.putIfAbsent(source, new ArrayList<>());
            adj.get(source).add(new Pair(travelTime, dest));
        }
        int[] signalReceivedAt = new int[n + 1];
        Arrays.fill(signalReceivedAt, Integer.MAX_VALUE);
        bfs(signalReceivedAt, k);
        int rst = Integer.MIN_VALUE;
        for (int i = 1; i <= n; i++) {
            rst = Math.max(rst, signalReceivedAt[i]);
        }
        return rst == Integer.MAX_VALUE ? -1 : rst;
    }
    private void bfs(int[] signalReceivedAt, int source) {
        Queue<Integer> q = new LinkedList<>();
        q.add(source);
        signalReceivedAt[source] = 0;
        while (!q.isEmpty()) {
            int curr = q.remove();
            if (!adj.containsKey(curr)) {
                continue;
            }
            for (Pair<Integer, Integer> edge : adj.get(curr)) {
                int time = edge.getKey(), neighbor = edge.getValue();
                int arrivalTime = signalReceivedAt[curr] + time;
                if (signalReceivedAt[neighbor] > arrivalTime) {
                    signalReceivedAt[neighbor] = arrivalTime;
                    q.add(neighbor);
                }
            }
        }
    }
}
