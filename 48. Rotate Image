You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise).
Follow up: Could you do this in-place?

Solution 1: naive. Time complexity: O(n^2). Space complexity: O(n^2).
public class Solution {
    public void rotate(int[][] matrix) {
        if (matrix == null) {
            return;
        }
        int n = matrix.length;
        int[][] tmp = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                tmp[i][j] = matrix[n - 1 - j][i];
            }
        }
        // because java pass by value, need loop to assign each element to the array referenced by "matrix".
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = tmp[i][j];
            }
        }
    }
}

Solution 2: in-place. Time complexity: O(n^2). Space complexity: O(1).
public class Solution {
    public void rotate(int[][] matrix) {
        if (matrix == null) {
            return;
        }
        int n = matrix.length;
        for (int i = 0; i < n / 2; i++) {
            for (int j = i; j < n - 1 - i; j++) {
                int tmp = matrix[i][j];
                matrix[i][j] = matrix[n - 1 - j][i];
                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j];
                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]; 
                matrix[j][n - 1 - i] = tmp;
            }
        }
    }
}
