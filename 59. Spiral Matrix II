Given an integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.
For example, Given n = 3, You should return the following matrix:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]

Time complexity: O(n^2). Space complexity: O(1).
public class Solution {
    public int[][] generateMatrix(int n) {
        int[][] rst = new int[n][n];
        if (n < 1) {
            return rst;
        }
        int num = 1;
        int top = 0; 
        int left = 0;
        int right = n - 1;
        int bottom = n - 1;
        while (num <= n * n) {
            for (int i = left; i <= right; i++) {
                rst[top][i] = num++;
            }
            top++;
            for (int i = top; i <= bottom; i++) {
                rst[i][right] = num++;
            }
            right--;
            for (int i = right; i >= left; i--) {
                rst[bottom][i] = num++;
            }
            bottom--;
            for (int i = bottom; i >= top; i--) {
                rst[i][left] = num++;
            }
            left++;
        }
        return rst;
    }
}
