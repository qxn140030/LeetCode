Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).
For example: Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

Solution 1: BFS + one Queue. Time complexity: O(n). Space complexity: O(n).
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution { 
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (root == null) {
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<TreeNode>(); 
        queue.offer(root);
        while (!queue.isEmpty()) { 
            List<Integer> level = new ArrayList<Integer>();
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                root = queue.poll();
                level.add(root.val);
                if (root.left != null) {
                    queue.offer(root.left);
                }
                if (root.right != null) {
                    queue.offer(root.right);
                }
            }
            result.add(level);
        }
        return result;
    }
}

Solution 2: DFS. Time complexity: O(n). Space complexity: O(logn).
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> rst = new ArrayList<List<Integer>>();
        helper(root, rst, 0);
        return rst;
    }
    private void helper(TreeNode root, List<List<Integer>> rst, int level) {
        if (root == null) {
            return;
        }
        if (level >= rst.size()) {
            rst.add(new ArrayList<Integer>());
        }
        rst.get(level).add(root.val);
        helper(root.left, rst, level + 1);
        helper(root.right, rst, level + 1);
    }
}

Solution 3: BFS + two queues. Time complexity: O(n). Space complexity: O(n).
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List result = new ArrayList();
        if (root == null) {
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        Queue<TreeNode> child = new LinkedList<TreeNode>();
        queue.offer(root);
        while (!queue.isEmpty()) { 
            List<Integer> level = new ArrayList<Integer>();
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                level.add(node.val);
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
            queue.addAll(child);
            child.clear();
            result.add(level);
        }
        return result;
    }
}

Solution 4: BFS + one queue + dummy node. Time complexity: O(n). Space complexity: O(n).
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List result = new ArrayList();
        if (root == null) {
            return result;
        }
        TreeNode dummy = new TreeNode(0);
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        queue.offer(dummy);
        List<Integer> level = new ArrayList<Integer>();
        while (!queue.isEmpty()) { 
            TreeNode node = queue.poll();
            if (node == dummy) {
                if (level.size() == 0) {
                    break;
                }
                result.add(level);
                level = new ArrayList<Integer>();
                queue.offer(dummy);
                continue;
            }
            if (node.left != null) {
                queue.offer(node.left);
            }
            if (node.right != null) {
                queue.offer(node.right);
            }
            level.add(node.val);
        }
        return result;
    }
}
