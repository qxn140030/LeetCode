You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.
Return the size of the largest island in grid after applying this operation.
An island is a 4-directionally connected group of 1s.

Example 1:
Input: grid = [[1,0],[0,1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.

Example 2:
Input: grid = [[1,1],[1,0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.

Example 3:
Input: grid = [[1,1],[1,1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.

Approach 1: Naive DFS (Time Limit Exceeded)
Time Complexity: O(n^4)
Space Complexity: O(n^2)

class Solution {
    int[][] dir = new int[][]{{-1, 0}, {0, -1}, {1, 0}, {0, 1}};
    public int largestIsland(int[][] grid) {
        int n = grid.length, ans = 0;
        boolean hasZero = false;
        for (int r = 0; r < n; r++) {
            for (int c = 0; c < n; c++) {
                if (grid[r][c] == 0) {
                    hasZero = true;
                    grid[r][c] = 1;       
                    ans = Math.max(ans, check(grid, r, c));
                    grid[r][c] = 0;                           // revert the change after dfs.
                }
            }    
        }
        return hasZero ? ans : n * n;
    }
    private int check(int[][] grid, int r0, int c0) {
        int n = grid.length;
        Stack<Integer> stack = new Stack<>();
        Set<Integer> seen = new HashSet<>();
        stack.push(r0 * n + c0);
        seen.add(r0 * n + c0);
        while (!stack.isEmpty()) {
            int code = stack.pop();
            int r = code / n, c = code % n;
            for (int k = 0; k < 4; k++) {
                int nr = r + dir[k][0], nc = c + dir[k][1];
                if (!seen.contains(nr * n + nc) && nr >= 0 && nr < n && nc >= 0 && nc < n && grid[nr][nc] == 1) {
                    stack.push(nr * n + nc);
                    seen.add(nr * n + nc);
                }
            }
        }
        return seen.size();
    }
}

Approach 2: Component Sizes
Time Complexity: O(n^2)
Space Complexity: O(n^2)

