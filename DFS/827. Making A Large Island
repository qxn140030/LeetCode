You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.
Return the size of the largest island in grid after applying this operation.
An island is a 4-directionally connected group of 1s.

Example 1:
Input: grid = [[1,0],[0,1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.

Example 2:
Input: grid = [[1,1],[1,0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.

Example 3:
Input: grid = [[1,1],[1,1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.

Approach 1: Naive DFS (Time Limit Exceeded)
Time Complexity: O(n^4)
Space Complexity: O(n^2)

class Solution {
    int[][] dir = new int[][]{{-1, 0}, {0, -1}, {1, 0}, {0, 1}};
    public int largestIsland(int[][] grid) {
        int n = grid.length, ans = 0;
        boolean hasZero = false;
        for (int r = 0; r < n; r++) {
            for (int c = 0; c < n; c++) {
                if (grid[r][c] == 0) {
                    hasZero = true;
                    grid[r][c] = 1;       
                    ans = Math.max(ans, check(grid, r, c));
                    grid[r][c] = 0;                           // revert the change after dfs.
                }
            }    
        }
        return hasZero ? ans : n * n;
    }
    private int check(int[][] grid, int r0, int c0) {
        int n = grid.length;
        Stack<Integer> stack = new Stack<>();
        Set<Integer> seen = new HashSet<>();
        stack.push(r0 * n + c0);
        seen.add(r0 * n + c0);
        while (!stack.isEmpty()) {
            int code = stack.pop();
            int r = code / n, c = code % n;
            for (int k = 0; k < 4; k++) {
                int nr = r + dir[k][0], nc = c + dir[k][1];
                if (!seen.contains(nr * n + nc) && nr >= 0 && nr < n && nc >= 0 && nc < n && grid[nr][nc] == 1) {
                    stack.push(nr * n + nc);
                    seen.add(nr * n + nc);
                }
            }
        }
        return seen.size();
    }
}

Approach 2: Component Sizes
Time Complexity: O(n^2)
Space Complexity: O(n^2)

public int largestIsland(int[][] grid) {
    int m = grid.length, n = grid[0].length;
    DSU dsu = new DSU(m * n);
    int zeroCount = 0;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (grid[i][j] == 0) {
                zeroCount++;
            }
        }
    }
    if (zeroCount < 2) {
        return m * n;
    } 
    int[][] dir = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (grid[i][j] == 1) {
                int cur = i * n + j;
                for (int[] d : dir) {
                    int r = i + d[0], c = j + d[1];
                    if (r >= 0 && r < m && c >= 0 && c < n && grid[r][c] == 1) {
                        int next = r * n + c;
                        dsu.union(cur, next);
                    }
                }
            }
        }
    }
    int maxSize = 0;
    Set<Integer> uniqueRoots = new HashSet<>();
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (grid[i][j] == 0) {
                int curSize = 1;
                for (int[] d : dir) {
                    int r = i + d[0], c = j + d[1];
                    if (r >= 0 && r < m && c >= 0 && c < n && grid[r][c] == 1) {
                        int root = dsu.find(r * n + c);
                        if (uniqueRoots.add(root)) {
                            curSize += dsu.size[root];
                        }
                    }
                }
                uniqueRoots.clear();
                maxSize = Math.max(maxSize, curSize);
            }
        }
    }
    return maxSize;
}
class DSU {
    int[] parent, size;
    public DSU(int n) {
        parent = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }
    public int find(int x) {
        while (parent[x] != x) {
            parent[x] = parent[parent[x]];
            x = parent[x];
        }
        return x;
    }
    public void union(int x, int y) {
        int rootX = find(x), rootY = find(y);
        if (rootX != rootY) {
            if (size[rootX] < size[rootY]) {
                parent[rootX] = rootY;
                size[rootY] += size[rootX];
            } else {
                parent[rootY] = rootX;
                size[rootX] += size[rootY];
            }
        }
    }
}
