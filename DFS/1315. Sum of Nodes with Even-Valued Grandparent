Given the root of a binary tree, return the sum of values of nodes with an even-valued grandparent. If there are no nodes with an even-valued grandparent, return 0.
A grandparent of a node is the parent of its parent if it exists.
Example 1:
            6
           / \
          7   8
         / \ / \
        2  7 1  3
       /  / \    \
      9  1   4    5
Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 18 = 2 + 7 + 1 + 3 + 5
Explanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.

Example 2:
Input: root = [1]
Output: 0

Approach 1: DFS
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int sumEvenGrandparent(TreeNode root) {
        return solve(root, -1, -1);
    }
    private int solve(TreeNode root, int parent, int gParent) {
        if (root == null) {
            return 0;
        }
        return solve(root.left, root.val, parent) + solve(root.right, root.val, parent) + (gParent % 2 != 0 ? 0 : root.val);
    }
}

Approach 2: BFS
Time complexity: O(n)
Space complexity: O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int sumEvenGrandparent(TreeNode root) {
        if (root == null) {
            return 0;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        int sum = 0;
        while (!q.isEmpty()) {
            TreeNode curr = q.remove();
            if (curr.val % 2 == 0) {
                if (curr.left != null) {
                    sum += findVal(curr.left.left) + findVal(curr.left.right);
                }
                if (curr.right != null) {
                    sum += findVal(curr.right.left) + findVal(curr.right.right);
                }
            }
            if (curr.left != null)  {
                q.add(curr.left);
            }
            if (curr.right != null) {
                q.add(curr.right);
            }
        }   
        return sum;
    }
    private int findVal(TreeNode root) {
        return root == null ? 0 : root.val;
    }
}
