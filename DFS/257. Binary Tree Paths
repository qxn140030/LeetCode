Question: Given a binary tree, return all root-to-leaf paths.
For example, given the following binary tree:
   1
 /   \
2     3
 \
  5
All root-to-leaf paths are: ["1->2->5", "1->3"]

Approach 1: Recursion
Time complexity: O(n), each node is visited exactly once.
Space complexity: O(n)

class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> rst = new ArrayList<String>();
        List<Integer> path = new ArrayList<Integer>();
        helper(root, rst, path);
        return rst;
    }
    void helper(TreeNode root, List<String> rst, List<Integer> path) {
        if (root == null) {
            return;
        }
        path.add(root.val);
        if (root.left == null && root.right == null) {
            StringBuilder sb = new StringBuilder();
            for (int i : path) {
                sb.append(i).append("->");
            }
            String s = sb.toString();
            rst.add(s.substring(0, s.length() - 2));
        } else {
            helper(root.left, rst, path);
            helper(root.right, rst, path);
        }
        path.remove(path.size() - 1);         
    }
}

class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> rst = new ArrayList<>();
        paths(root, "", rst);
        return rst;
    }
    private void paths(TreeNode root, String path, List<String> rst) {
        if (root == null) {
            return;
        }
        path += root.val;
        if (root.left == null && root.right == null) {
            rst.add(path);
            return;
        } 
        paths(root.left, path + "->", rst);
        paths(root.right, path + "->", rst);
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> rst = new ArrayList<String>();
        List<Integer> path = new ArrayList<Integer>();
        helper(root, rst, path);
        return rst;
    }
    private void helper(TreeNode root, List<String> rst, List<Integer> path) {
        path.add(root.val);
        if (root.left == null && root.right == null) {
            StringBuilder sb = new StringBuilder();
            for (int i : path) {
                sb.append(i).append("->");
            }
            String s = sb.toString();
            rst.add(s.substring(0, s.length() - 2));
            return;
        }
        if (root.left != null) {
            helper(root.left, rst, path);
            path.remove(path.size() - 1);         // Note
        }
        if (root.right != null) {
            helper(root.right, rst, path);
            path.remove(path.size() - 1);         // Note
        }
    }
}

Approach 2: Iteration
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> rst = new ArrayList<>();
        if (root == null) {
            return rst;
        }
        Stack<TreeNode> nodeStack = new Stack<>();
        Stack<String> pathStack = new Stack<>();
        nodeStack.push(root);
        pathStack.push(Integer.toString(root.val));
        while (!nodeStack.isEmpty()) {
            TreeNode node = nodeStack.pop();
            String path = pathStack.pop();
            if (node.left == null && node.right == null) {
                rst.add(path);
            }
            if (node.left != null) {
                nodeStack.push(node.left);
                pathStack.push(path + "->" + node.left.val);
            }
            if (node.right != null) {
                nodeStack.push(node.right);
                pathStack.push(path + "->" + node.right.val);
            }
        }
        return rst;
    }
}
