Given the root of a binary tree, return the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them.
Example 1:    1
             / \
            2   3
           / \
          4   5
Output: 3, the length of the path [4,2,1,3] or [5,2,1,3].
 
Approach 1: Preorder traversal + max depth
Time complexity: O(n^2)
Space complexity: O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int rst = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        traverse(root);
        return rst;
    }
    private void traverse(TreeNode root) {
        if (root == null) {
            return;
        }
        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);
        rst = Math.max(rst, leftDepth + rightDepth);
        traverse(root.left);
        traverse(root.right);
    }
    private int maxDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
    }
}

Approach 2: Postorder traversal + max depth (DFS)
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    int rst = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        maxDepth(root);
        return rst;
    }
    private int maxDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);
        rst = Math.max(rst, leftDepth + rightDepth);
        return Math.max(leftDepth, rightDepth) + 1;
    }
}
