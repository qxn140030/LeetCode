Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by
connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.
Example 1:
11110
11010
11000
00000     Answer: 1

Example 2:
11000
11000
00100
00011     Answer: 3

Approach 1: DFS
merging adjacent lands, and the merging should be done recursively.
Time complexity: O(m * n)
Space complexity: O(m * n)

public class Solution {
    public int numIslands(char[][] grid) {
        int count = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == '1') {
                    helper(grid, i, j);
                    count++;
                }
            }
        }
        return count;
    }
    private void helper(char[][] grid, int row, int col) {
        if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || grid[row][col] != '1') {
            return;
        }
        grid[row][col] = '0';
        helper(grid, row + 1, col);
        helper(grid, row - 1, col);
        helper(grid, row, col + 1);
        helper(grid, row, col - 1);
    }
}

public int numIslands(char[][] grid) {
    int m = grid.length, n = grid[0].length, count = 0;
    boolean[][] visited = new boolean[m][n];
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (grid[i][j] == '1' && !visited[i][j]) {
                count++;
                helper(grid, i, j, visited);
            }
        }
    }
    return count;
}
void helper(char[][] grid, int i, int j, boolean[][] visited) {
    int m = grid.length, n = grid[0].length;
    if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j] || grid[i][j] == '0') {
        return;
    }
    visited[i][j] = true;
    helper(grid, i + 1, j, visited);
    helper(grid, i - 1, j, visited);
    helper(grid, i, j + 1, visited);
    helper(grid, i, j - 1, visited);
}

Approch 2: BFS
Time complexity: O(m * n)
Space complexity: O(min(m, n))

public class Solution {
    public int numIslands(char[][] grid) {
        int m = grid.length, n = grid[0].length, count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1') {
                    count++;
                    helper(grid, i, j);
                }
            }
        }
        return count;
    }
    private void helper(char[][] grid, int i, int j) {
        int m = grid.length, n = grid[0].length;
        grid[i][j] = '0';
        Queue<Integer> q = new LinkedList<>();
        int code = i * n + j;
        q.offer(code);
        while (!q.isEmpty()) {
            code = q.poll();
            int row = code / nï¼Œ col = code % n;
            if (row > 0 && grid[row - 1][col] == '1') {
                grid[row - 1][col] = '0';
                q.offer((row - 1) * n + col);
            }
            if (row < m - 1 && grid[row + 1][col] == '1') {
                grid[row + 1][col] = '0';
                q.offer((row + 1) * n + col);
            }
            if (col > 0 && grid[row][col - 1] == '1') {
                grid[row][col - 1] = '0';
                q.offer(row * n + col - 1);
            }
            if (col < n - 1 && grid[row][col + 1] == '1') {
                grid[row][col + 1] = '0';
                q.offer(row * n + col + 1);
            }
        }
    }
}

Approach 3: Union Find (aka Disjoint Set)
Time complexity: O(m * n)
Space complexity: O(m * n) as required by UnionFind data structure.

class Solution {
    public int numIslands(char[][] grid) {
        UnionFind uf = new UnionFind(grid);
        int m = grid.length, n = grid[0].length;
        for (int r = 0; r < m; r++) {
            for (int c = 0; c < n; c++) {
                if (grid[r][c] == '1') {
                    grid[r][c] = '0';
                    if (r - 1 >= 0 && grid[r - 1][c] == '1') {
                        uf.union(r * n + c, (r - 1) * n + c);
                    }
                    if (r + 1 < m && grid[r + 1][c] == '1') {
                        uf.union(r * n + c, (r + 1) * n + c);
                    }
                    if (c - 1 >= 0 && grid[r][c - 1] == '1') {
                        uf.union(r * n + c, r * n + c - 1);
                    }
                    if (c + 1 < n && grid[r][c + 1] == '1') {
                        uf.union(r * n + c, r * n + c + 1);
                    }
                }
            }
        }
        return uf.getCount();
    }
    class UnionFind {
        int count = 0;
        int[] parent;
        int[] rank;
        public UnionFind(char[][] grid) {
            int m = grid.length, n = grid[0].length;
            parent = new int[m * n];
            rank = new int[m * n];
            for (int i = 0; i < m; ++i) {
                for (int j = 0; j < n; ++j) {
                    if (grid[i][j] == '1') {
                        parent[i * n + j] = i * n + j;
                        ++count;
                    }
                    rank[i * n + j] = 0;
                }
            }
        }
        public int find(int i) { 
            if (parent[i] != i) {
                parent[i] = find(parent[i]);
            }
            return parent[i];
        }
        public void union(int x, int y) { 
            int rootx = find(x), rooty = find(y);
            if (rootx != rooty) {
                if (rank[rootx] > rank[rooty]) {
                    parent[rooty] = rootx;
                } else if (rank[rootx] < rank[rooty]) {
                    parent[rootx] = rooty;
                } else {
                    parent[rooty] = rootx; 
                    rank[rootx] += 1;
                }
                count--;
            }
        }
        public int getCount() {
            return count;
        }
    }
}
