Question: Given the root of a binary tree, return the postorder traversal of its nodes' values.
For example: Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [3,2,1].
Follow up: 
Recursive solution is trivial, could you do it iteratively?

Approach 1: Recursive
Time complexity: O(n)
Space complexity: O(logn)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> rst = new ArrayList<>();
        helper(root, rst);
        return rst;
    }
    void helper(TreeNode root, List<Integer> rst) {
        if (root == null) {
            return;
        }
        helper(root.left, rst);
        helper(root.right, rst);
        rst.add(root.val);
    }
} 

Time complexity: O(n^2)
public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> rst = new ArrayList<Integer>();
        if (root == null) {
            return rst;
        }
        rst.addAll(postorderTraversal(root.left));      // addAll() in Java: O(n)
        rst.addAll(postorderTraversal(root.right));
        rst.add(root.val);
        return rst;
    }
}

Approach 2: Iterative
Time complexity: O(n)
Space complexity: O(logn)

public class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> rst = new ArrayList<Integer>();
        if (root == null) {
            return rst;
        }
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while (!stack.empty()) {
            root = stack.peek();                                 // check the top of stack.
            if (root.left == null && root.right == null) {       // no children, then add to rst and pop.
                rst.add(root.val);
                stack.pop();
            } else {
                if (root.right != null) {                        
                    stack.push(root.right);            // push right child to stack first. 
                    root.right = null;                 // Note: then set the right child as null, important!!
                }
                if (root.left != null) {
                    stack.push(root.left);             // then push left child to stack.
                    root.left = null;                  // set the left child as null!
                }
            }
        }
        return rst;
    }
}
