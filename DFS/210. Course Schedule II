There are a total of n courses you have to take, labeled from 0 to n - 1.
Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]
Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all
courses.
There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty
array.
For example:
2, [[1,0]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]

4, [[1,0],[2,0],[3,1],[3,2]]
There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should
be taken after you finished course 0. So one correct course order is [0,1,2,3]. Another correct ordering is[0,2,1,3].
Note:
The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
Hints:
This problem is equivalent to finding the topological order in a directed graph. If a cycle exists, no topological ordering exists
and therefore it will be impossible to take all courses.
Topological sort could also be done via BFS.

Approach 1: DFS
Time complexity: O(e + v)
Space complexity: O(e + v)

class Solution {
    int order[], pos = 0;
    Set<Integer> visited = new HashSet<>();
    Map<Integer, List<Integer>> map = new HashMap<>();
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        for (int[] relation : prerequisites) {
            List<Integer> pre = map.getOrDefault(relation[0], new ArrayList<>());
            pre.add(relation[1]);
            map.put(relation[0], pre);
        }
        order = new int[numCourses];
        for (int i = 0; i < numCourses; i++) {
            if (!map.containsKey(i)){
                order[pos++] = i;
                visited.add(i);
            }
        }
        for (int[] p : prerequisites) {
            if (!visited.contains(p[0])){
                if (!dfs(p[0], new HashSet<>())) {
                    return new int[0];
                }
            }
        }
        return order;
    }
    private boolean dfs(int cur, Set<Integer> set) {
        if (visited.contains(cur)) {
            return true;
        }
        if (!map.containsKey(cur) || map.get(cur).size() == 0) {
            order[pos++] = cur;
        } else {
            for(int node : map.get(cur)){
                if (set.contains(node)) {
                    return false;
                }
                set.add(node);
                if (!visited.contains(node)) {
                    if (!dfs(node, set)) {
                        return false;
                    }
                }
                set.remove(node);
            }
            order[pos++] = cur;    
        }
        visited.add(cur);
        return true;
    }
}

Approach 2: Using Node Indegree (BFS)
Time complexity: O(e + v)
Space complexity: O(e + v)

public class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] indegrees = new int[numCourses];
        for (int[] pre : prerequisites) {
            indegrees[pre[0]]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegrees[i] == 0) {
                q.offer(i);
            }
        }
        int[] order = new int[numCourses];
        int index = 0;
        while (!q.isEmpty()) {
            int cur = q.poll();
            order[index++] = cur; 
            for (int[] pre : prerequisites) {
                if (pre[1] == cur) {
                    indegrees[pre[0]]--;
                    if (indegrees[pre[0]] == 0) {
                        q.offer(pre[0]);
                    }
                }
            }
        }
        if (index == numCourses) {
            return order;
        }
        return new int[0];         // return [] an empty array.
    }
}
