You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.
An island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.
Return the number of distinct islands.
Example 1:
            1  1  0  0  0
            1  1  0  0  0
            0  0  0  1  1
            0  0  0  1  1
Input: grid = [[1,1,0,0,0],[1,1,0,0,0],[0,0,0,1,1],[0,0,0,1,1]]
Output: 1

Example 2:
            1  1  0  1  1
            1  0  0  0  0
            0  0  0  0  1
            1  1  0  1  1
Input: grid = [[1,1,0,1,1],[1,0,0,0,0],[0,0,0,0,1],[1,1,0,1,1]]
Output: 3

Approach 1: Hash By Local Coordinates
Time Complexity : O(m * n)
Space complexity : O(m * n)

class Solution {
    private int[][] grid;
    private boolean[][] seen;
    private Set<Pair<Integer, Integer>> curIsland;
    private int currRowOrigin;
    private int currColOrigin;
    public int numDistinctIslands(int[][] grid) {
        this.grid = grid;
        this.seen = new boolean[grid.length][grid[0].length];   
        Set<Set<Pair<Integer, Integer>>> islands = new HashSet<>();
        for (int row = 0; row < grid.length; row++) {
            for (int col = 0; col < grid[0].length; col++) {
                this.curIsland = new HashSet<>();
                this.currRowOrigin = row;
                this.currColOrigin = col;
                dfs(row, col);
                if (!curIsland.isEmpty()) {
                    islands.add(curIsland);
                }
            }
        }         
        return islands.size();
    }
    private void dfs(int row, int col) {
        if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length) {
            return;
        }
        if (grid[row][col] == 0 || seen[row][col]) {
            return;
        }
        seen[row][col] = true;
        curIsland.add(new Pair<>(row - currRowOrigin, col - currColOrigin));
        dfs(row + 1, col);
        dfs(row - 1, col);
        dfs(row, col + 1);
        dfs(row, col - 1);    
    }
}

Approach 2: Hash By Path Signature
Time Complexity : O(m * n)
Space complexity : O(m * n)

class Solution {
    private int[][] grid;
    private boolean[][] visited;
    private StringBuilder curIsland;
    public int numDistinctIslands(int[][] grid) {
        this.grid = grid;
        this.visited = new boolean[grid.length][grid[0].length];   
        Set<String> islands = new HashSet<>();
        for (int row = 0; row < grid.length; row++) {
            for (int col = 0; col < grid[0].length; col++) {
                curIsland = new StringBuilder();
                dfs(row, col, '0');
                if (curIsland.length() == 0) {
                    continue;
                }
                islands.add(curIsland.toString());
            }
        }         
        return islands.size();
    }
    private void dfs(int row, int col, char dir) {
        if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length) {
            return;
        }
        if (grid[row][col] == 0 || visited[row][col]) {
            return;
        }
        visited[row][col] = true;
        curIsland.append(dir);
        dfs(row + 1, col, 'D');
        dfs(row - 1, col, 'U');
        dfs(row, col + 1, 'R');
        dfs(row, col - 1, 'L'); 
        curIsland.append(dir);          // we also need to record where we backtracked.
    }
}
