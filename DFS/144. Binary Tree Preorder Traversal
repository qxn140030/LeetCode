Given the root of a binary tree, return the preorder traversal of its nodes' values.
For example: Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,2,3].
Follow up: 
Recursive solution is trivial, could you do it iteratively?

Approach 1: Recursive
Time complexity: O(n)
Space complexity: O(logn) in average, O(n) in the worst case.

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        helper(root, list);
        return list;
    }
    void helper(TreeNode root, List<Integer> list) {
        if (root == null) {
            return;
        }
        list.add(root.val);
        helper(root.left, list);
        helper(root.right, list);
    }
}

Time complexity: O(n^2)
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> rst = new ArrayList<Integer>();
        if (root == null) {
            return rst;
        }
        rst.add(root.val);
        rst.addAll(preorderTraversal(root.left));      // addAll() in Java: O(n)
        rst.addAll(preorderTraversal(root.right));
        return rst;
    }
}

Approach 2: Iterative
Time complexity: O(n)
Space complexity: O(logn) in average, O(n) in the worst case when the tree is skewed.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> rst = new ArrayList<Integer>();
        if (root == null) {
            return rst;
        }
        Deque<TreeNode> stack = new ArrayDeque<>();
        stack.push(root);
        while (!stack.isEmpty()) {
            root = stack.pop();
            rst.add(root.val);
            if (root.right != null) {
                stack.push(root.right);
            }
            if (root.left != null) {
                stack.push(root.left);
            }
        }
        return rst;
    }
}

Approach 3: Morris Traversal
modify the tree in place instead of using extra space.
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> answer = new ArrayList<>();
        TreeNode curr = root, last;
        while (curr != null) { 
            if (curr.left == null) {                                      // If there is no left child, go for the right child.
                answer.add(curr.val);
                curr = curr.right;
            } else {
                last = curr.left;
                while (last.right != null && last.right != curr) {        // Otherwise, find the last node in the left subtree.
                    last = last.right;
                }
                if (last.right == null) {         // If the last node is not modified, we let 'curr' be its right child.
                    answer.add(curr.val);
                    last.right = curr;
                    curr = curr.left;
                } else {                          // Otherwise, it means we have finished visiting the entire left subtree.
                    last.right = null;
                    curr = curr.right;
                }
            }
        }    
        return answer;
    }
}
