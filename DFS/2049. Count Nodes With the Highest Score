There is a binary tree rooted at 0 consisting of n nodes. The nodes are labeled from 0 to n - 1. You are given a 0-indexed integer array parents representing the tree, where parents[i] is the parent of node i. Since node 0 is the root, parents[0] == -1.

Each node has a score. To find the score of a node, consider if the node and the edges connected to it were removed. The tree would become one or more non-empty subtrees. The size of a subtree is the number of the nodes in it. The score of the node is the product of the sizes of all those subtrees.

Return the number of nodes that have the highest score.

Example 1:

example-1
Input: parents = [-1,2,0,2,0]
Output: 3
Explanation:
- The score of node 0 is: 3 * 1 = 3
- The score of node 1 is: 4 = 4
- The score of node 2 is: 1 * 1 * 2 = 2
- The score of node 3 is: 4 = 4
- The score of node 4 is: 4 = 4
The highest score is 4, and three nodes (node 1, node 3, and node 4) have the highest score.
Example 2:

example-2
Input: parents = [-1,2,0]
Output: 2
Explanation:
- The score of node 0 is: 2 = 2
- The score of node 1 is: 2 = 2
- The score of node 2 is: 1 * 1 = 1
The highest score is 2, and two nodes (node 0 and node 1) have the highest score.


long maxScore = 0;
int count = 0;
int n;
List<Integer>[] tree;
public int countHighestScoreNodes(int[] parents) {
    n = parents.length;
    tree = new List[n];
    // Step 1: Build the tree as an adjacency list
    for (int i = 0; i < n; i++) {
        tree[i] = new ArrayList<>();
    }
    for (int i = 1; i < n; i++) {
        tree[parents[i]].add(i);
    }
    // Step 2: Start DFS from root (node 0)
    dfs(0);
    return count;
}
int dfs(int node) {// returns the size of the subtree rooted at `node`
    long score = 1;
    int size = n - 1;  // start with all nodes minus current node
    for (int child : tree[node]) {
        int childSize = dfs(child);
        score *= childSize;     // multiply size of each child subtree
        size -= childSize;      // reduce from remaining nodes
    }
    if (node != 0) {
        score *= size;  // multiply the remaining part if not the root
    }
    if (score > maxScore) {
        maxScore = score;
        count = 1;
    } else if (score == maxScore) {
        count++;
    }
    return n - size;  // return total size of subtree rooted at `node`
}
