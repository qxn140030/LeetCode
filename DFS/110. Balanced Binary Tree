Question: Given a binary tree, determine if it is height-balanced. 
For this problem, a height-balanced binary tree is defined as a binary tree in which 
the depth of the two subtrees of every node never differ by more than 1.

Approach 1: Top-down recursion
Time complexity: O(nlogn) = O(n) + 2 * O(n/2) + 4 * O(n/4) + ...
function height will be called on each node O(logn) times.
Space complexity: O(logn) or O(n)

class Solution {
  public boolean isBalanced(TreeNode root) {
    if (root == null) {
      return true;
    }
    return Math.abs(height(root.left) - height(root.right)) <= 1
        && isBalanced(root.left)
        && isBalanced(root.right);
  }
  private int height(TreeNode root) {
    if (root == null) {
      return 0;
    }
    return 1 + Math.max(height(root.left), height(root.right));
  }
}

Approach 2: Bottom-up recursion
Time complexity: O(n)
Space complexity: O(logn) or O(n) if tree is unbalanced.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution { 
    public boolean isBalanced(TreeNode root) {
        return maxDepth(root) != -1;
    }
    private int maxDepth(TreeNode root) { 
        if (root == null) {
            return 0;
        }
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        if (left == -1 || right == -1 || Math.abs(left - right) > 1) {
            return -1;
        }
        return Math.max(left, right) + 1;
    }
}
