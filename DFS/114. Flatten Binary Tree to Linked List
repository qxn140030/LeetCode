Given a binary tree, flatten it to a linked list in-place.
For example, Given
         1
        / \
       2   5
      / \   \
     3   4   6
The flattened tree should look like:
   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6
Hints:
If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal.
Follow up: 
Can you flatten the tree in-place (with O(1) extra space)?

Approach 1: Recursion
A common strategy for tree modification problems is recursion. A tree is a recursive structure.
Time complexity: O(n)
Space complexity: O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    private TreeNode pre = null;
    public void flatten(TreeNode root) {
        if (root == null) {
            return;
        }
        if (pre != null) {
            pre.right = root;
            pre.left = null;
        }
        pre = root;
        TreeNode right = root.right;
        flatten(root.left);
        flatten(right);
    }
}

class Solution {
    public void flatten(TreeNode root) {
        helper(root);
    }
    private TreeNode helper(TreeNode root) {
        if (root == null) {
            return null;
        }
        if (root.left == null && root.right == null) {
            return root;
        }
        TreeNode leftTail = helper(root.left);
        TreeNode rightTail = helper(root.right);
        if (leftTail != null) {
            leftTail.right = root.right;
            root.right = root.left;
            root.left = null;
        }
        return rightTail == null ? leftTail : rightTail;    // return the "rightmost" node after we are done wiring the new connections. 
    }
}

Approach 2: Iterative Using Stack
Time complexity: O(n)
Space complexity: O(n)

public class Solution {
    public void flatten(TreeNode root) {
        if (root == null) {
            return;
        }
        Deque<TreeNode> stack = new ArrayDeque<>();
        while (root != null || !stack.isEmpty()) {
            if (root.right != null) {
                stack.push(root.right);
            }
            if (root.left != null) {
                root.right = root.left;
                root.left = null;
            } else if (!stack.isEmpty()) {
                root.right = stack.pop();
            }
            root = root.right;
        }
    }
}

Approach 3: Morris Traversal
well known tree traversal out there that doesn't use any additional space at all.
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public void flatten(TreeNode root) {
        if (root == null) {
            return;
        }
        while (root != null) {   
            if (root.left != null) {   
                TreeNode rightmost = root.left;
                while (rightmost.right != null) {
                    rightmost = rightmost.right;
                }
                rightmost.right = root.right;
                root.right = root.left;
                root.left = null;
            } 
            root = root.right;                    // move on to the right side of the tree
        }
    }
}
