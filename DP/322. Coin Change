You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of
coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
You may assume that you have an infinite number of each kind of coin.
Example 1:
coins = [1, 2, 5], amount = 11
return 3 (11 = 5 + 5 + 1)

Example 2:
coins = [2], amount = 3
return -1.

Approach 1: Recursion
Time complexity: O(n^a), where n is the number of coins, a is the amount.
total number of nodes: n^a, foe each node, we have for loop: O(n), total time: n * n^a.
Space complexity: O(a). height of tree is the amount in the worst case, when all coin = 1.

public int coinChange(int[] coins, int amount) {
    if (amount <= 0) {
        return amount == 0 ? 0 : -1;
    }
    int res = amount + 1;
    for (int coin : coins) {
        int subProblem = coinChange(coins, amount - coin);
        if (subProblem > -1) {
            res = Math.min(res, subProblem + 1);
        }
    }
    return res == amount + 1 ? -1 : res;
}

Approach 2: Top-Down Approach using Memoization
Time complexity: O(a * n)
Space complexity: O(a)

public int coinChange(int[] coins, int amount) {
    int[] memo = new int[amount + 1];
    Arrays.fill(memo, amount + 1);
    return helper(coins, amount, memo);
}
int helper(int[] coins, int amount, int[] memo) {
    if (amount <= 0) {
        return amount == 0 ? 0 : -1;
    }
    if (memo[amount] < amount + 1) {
        return memo[amount];
    }
    int res = amount + 1;
    for (int coin : coins) {
        int subProblem = helper(coins, amount - coin, memo);
        if (subProblem > -1) {
            res = Math.min(res, subProblem + 1);  
        }
    }
    memo[amount] = res == amount + 1 ? -1 : res;
    return memo[amount];
}

Approach 3: Bottom-Up
Time complexity: O(a * n)
Space complexity: O(a)

public int coinChange(int[] coins, int amount) {
    int[] dp = new int[amount + 1];
    Arrays.fill(dp, amount + 1);         // Note: initialize the value to amount + 1 to avoid overflow.
    dp[0] = 0;
    for (int i = 1; i <= amount; i++) {
        for (int coin : coins) {
            if (i - coin >= 0) {
                dp[i] = Math.min(dp[i], 1 + dp[i - coin]);   // Note: if we initialize the values to Integer.MAX_VALUE, might cause overflow.        
            }
        }
    }
    return dp[amount] == amount + 1 ? -1 : dp[amount];
}
