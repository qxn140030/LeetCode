Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.

Approach 1: Brute Force (Recursion)
Time complexity: O(2^(m + n)). For every move, we have at most 2 options.
Space complexity: O(m + n)

class Solution {
    public int minPathSum(int[][] grid) {
        return calculate(grid, grid.length - 1, grid[0].length - 1);
    }
    private int calculate(int[][] grid, int i, int j) {
        if (i < 0 || j < 0) {
            return Integer.MAX_VALUE;
        }
        if (i == 0 && j == 0) {
            return grid[0][0];
        }
        return grid[i][j] + Math.min(calculate(grid, i - 1, j), calculate(grid, i, j - 1));
    }
}

Approach 2: DP 2D
Time complexity: O(m * n)
Space complexity: O(m * n)

class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] sum = new int[m][n];
        sum[0][0] = grid[0][0];
        for (int i = 1; i < m; i++) {
            sum[i][0] = sum[i - 1][0] + grid[i][0];
        }
        for (int j = 1; j < n; j++) {
            sum[0][j] = sum[0][j - 1] + grid[0][j];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                sum[i][j] = grid[i][j] + Math.min(sum[i - 1][j], sum[i][j - 1]);
            }
        }
        return sum[m - 1][n - 1];
    }
}

Approach 3: DP 1D
Time complexity: O(m * n)
Space complexity: O(n)

public int minPathSum(int[][] grid) {
    int m = grid.length, n = grid[0].length;
    int[] sum = new int[n];
    sum[0] = grid[0][0];
    for (int j = 1; j < n; j++) {
        sum[j] = sum[j - 1] + grid[0][j];
    }
    for (int i = 1; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (j == 0) {
                sum[j] += grid[i][j];
            } else {
                sum[j] = grid[i][j] + Math.min(sum[j - 1], sum[j]);
            }
        }
    }
    return sum[n - 1];
}

Approach 4: DP
Time complexity: O(m * n)
Space complexity: O(1)

public int minPathSum(int[][] grid) {
    int m = grid.length, n = grid[0].length;
    for (int j = 1; j < n; j++) {
        grid[0][j] += grid[0][j - 1];
    }
    for (int i = 1; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (j == 0) {
                grid[i][j] += grid[i - 1][j];
            } else {
                grid[i][j] += Math.min(grid[i - 1][j], grid[i][j - 1]);
            }
        }
    }
    return grid[m - 1][n - 1];
}
