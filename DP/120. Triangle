Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.
For example, given the following triangle
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).
Follow up: 
Could you do this using only O(n) extra space, where n is the total number of rows in the triangle?

Approach 1: DP (Bottom-up: In-place)
Time complexity: O(n^2)
Space complexity: O(1)

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        for (int row = 1; row < triangle.size(); row++) {
            for (int col = 0; col <= row; col++) {
                int smallestAbove = Integer.MAX_VALUE;           
                if (col > 0) {
                    smallestAbove = triangle.get(row - 1).get(col - 1);
                } 
                if (col < row) {
                    smallestAbove = Math.min(smallestAbove, triangle.get(row - 1).get(col));
                }
                int path = smallestAbove + triangle.get(row).get(col);
                triangle.get(row).set(col, path);
            }
        }
        return Collections.min(triangle.get(triangle.size() - 1));
    }
}

Approach 2: DP (Bottom-up: Auxiliary Space)
Time complexity: O(n^2)
Space complexity: O(n)

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        List<Integer> prevRow = triangle.get(0);
        for (int row = 1; row < triangle.size(); row++) {
            List<Integer> currRow = new ArrayList<>();
            for (int col = 0; col <= row; col++) {
                int smallestAbove = Integer.MAX_VALUE;           
                if (col > 0) {
                    smallestAbove = prevRow.get(col - 1);
                } 
                if (col < row) {
                    smallestAbove = Math.min(smallestAbove, prevRow.get(col));
                }
                currRow.add(smallestAbove + triangle.get(row).get(col));
            }
            prevRow = currRow;
        }
        return Collections.min(prevRow);
    }
}

Approach 3: DP (Bottom-up: Flip Triangle Upside Down)
Time complexity: O(n^2)
Space complexity: O(1)

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        for (int row = triangle.size() - 2; row >= 0; row--) {
            for (int col = 0; col <= row; col++) {
                int bestBelow = Math.min(
                    triangle.get(row + 1).get(col), 
                    triangle.get(row + 1).get(col + 1));
                triangle.get(row).set(col, bestBelow + triangle.get(row).get(col));
            }
        }
        return triangle.get(0).get(0);
    }
}

Time complexity: O(n^2)
Space complexity: O(n)

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        List<Integer> belowRow = triangle.get(triangle.size() - 1);
        for (int row = triangle.size() - 2; row >= 0; row--) {
            List<Integer> currRow = new ArrayList<>();
            for (int col = 0; col <= row; col++) {
                int bestBelow = Math.min(belowRow.get(col), belowRow.get(col + 1));
                currRow.add(bestBelow + triangle.get(row).get(col));
            }
            belowRow = currRow;
        }
        return belowRow.get(0);
    }
}

Approach 4: Memoization (Top-Down)
Time complexity: O(n^2)
Space complexity: O(n^2)

...




public class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        
        int n = triangle.size();
        int[] sum = new int[n];
        for (int i = 0; i < n; i++) {
            sum[i] = triangle.get(n - 1).get(i);
        }
        for (int i = n - 2; i >= 0; i--) {
            for (int j = 0; j <= i; j++) {
                sum[j] = triangle.get(i).get(j) + Math.min(sum[j], sum[j + 1]);
            }
        }
        return sum[0];
    }
}
