Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. 
Return all such possible sentences in any order.
Note that the same word in the dictionary may be reused multiple times in the segmentation.
For example, given s = "catsanddog", dict = ["cat", "cats", "and", "sand", "dog"].
A solution is ["cats and dog", "cat sand dog"].

Appraoch 1: bottom-up DP
Time complexity: O(n^2 * k), where n is the length of string s, k is the average number of sentences in dp[j]. 
Space complexity: O(2^n), due to the exponential number of sentence combinations in the worst case.

public List<String> wordBreak(String s, List<String> wordDict) {
    Set<String> wordSet = new HashSet<>(wordDict);
    int n = s.length();
    List<List<String>> dp = new ArrayList<>();
    for (int i = 0; i <= n; i++) {
        dp.add(new ArrayList<>());
    }
    dp.get(0).add("");             // Base case: empty string
    for (int i = 1; i <= n; i++) {
        List<String> sentences = new ArrayList<>();
        for (int j = 0; j < i; j++) {
            String word = s.substring(j, i);
            if (wordSet.contains(word) && !dp.get(j).isEmpty()) {
                for (String prev : dp.get(j)) {
                    sentences.add(prev.isEmpty() ? word : prev + " " + word);
                }
            }
        }
        if (!sentences.isEmpty()) {
            dp.set(i, sentences);
        }
    }
    return dp.get(n).isEmpty() ? new ArrayList<>() : dp.get(n);
}

Approach 1: Top-Down DP
Time complexity: O(n^2 + 2^n + m), where m is the number of words in the dictionary. 
Space complexity: O(n * 2^n + m)

class Solution {
    private Set<String> wordSet;
    private HashMap<String, List<List<String>>> memo;
    public List<String> wordBreak(String s, List<String> wordDict) {
        wordSet = new HashSet<>();
        for (String word : wordDict) {
            wordSet.add(word);
        }
        memo = new HashMap<>();
        helper(s);
        // chain up words together
        List<String> ret = new ArrayList<String>();
        for (List<String> words : memo.get(s)) {
            StringBuffer sentence = new StringBuffer();
            for (String word : words) {
                sentence.insert(0, word);
                sentence.insert(0, " ");
            }
            ret.add(sentence.toString().strip());
        }
        return ret;
    }
    private List<List<String>> helper(String s) {
        if (s.equals("")) {
            List<List<String>> rst = new ArrayList<>();
            rst.add(new ArrayList<>());
            return rst;
        }
        if (memo.containsKey(s)) {
            return memo.get(s);
        } else {
            List<List<String>> rst = new ArrayList<>();
            memo.put(s, rst);
        }
        for (int endIndex = 1; endIndex <= s.length(); endIndex++) {
            String word = s.substring(0, endIndex);
            if (wordSet.contains(word)) {
                List<List<String>> subsentences = helper(s.substring(endIndex));
                for (List<String> subsentence : subsentences) {
                    List<String> newSentence = new ArrayList<>(subsentence);
                    newSentence.add(word);
                    memo.get(s).add(newSentence);
                }
            }
        }
        return memo.get(s);
    }
}



Approach 1: Brute force. recursion. 
Time complexity: exponential. 
Space complexity: exponential.

public class Solution {
    public List<String> wordBreak(String s, Set<String> wordDict) {
        List<String> rst = new ArrayList<String>();
        if (s == null || s.length() == 0) {
            return rst;
        }
        List<String> path = new ArrayList<String>();
        helper(s, wordDict, rst, path, 0);
        return rst;
    }
    private void helper(String s, Set<String> wordDict, List<String> rst, List<String> path, int pos) {
        if (pos >= s.length()) {
            StringBuilder sb = new StringBuilder();
            for (String str : path) {
                sb.append(str).append(" ");
            }
            sb.deleteCharAt(sb.length() - 1);
            rst.add(sb.toString());
            return;
        }
        for (int i = pos; i < s.length(); i++) {
            String sub = s.substring(pos, i + 1);
            if (wordDict.contains(sub)) {
                path.add(sub);
                helper(s, wordDict, rst, path, i + 1);
                path.remove(path.size() - 1);
            }
        }
    }
}

Solution 2: 
Time complexity: exponential. 
Space complexity: exponential.

public class Solution {
    public List<String> wordBreak(String s, Set<String> wordDict) {
        List<String> rst = new ArrayList<String>();
        if (s == null || s.length() == 0) {
            return rst;
        }
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] && wordDict.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        if (!dp[s.length()]) {                        // check whether it can break first.
            return rst;
        }
        Map<Integer, List<String>> map = new HashMap<>();            // HashMap
        List<String> base = new ArrayList<String>();                 // Note
        base.add("");                                                // Note
        map.put(0, base);                                            // Note
        for (int i = 1; i <= s.length(); i++) {
            List<String> cur = new ArrayList<String>();
            map.put(i, cur);
            for (int j = 0; j < i; j++) {
                if (wordDict.contains(s.substring(j, i))) {
                    for (String str : map.get(j)) {
                        cur.add(str + (str.length() == 0 ? "" : " ") + s.substring(j, i));
                    }
                }
            }
        }
        return map.get(s.length());
    }
}
