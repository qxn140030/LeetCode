You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.
Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Example 1:
Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.

Example 2:
Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.

Approach 1: DP
Time complexity: O(k * n)
Space complexity: O(k * n)

public int maxProfit(int k, int[] prices) {
    int n = prices.length;
    if (k >= n / 2) {                         // whihc means we can make as many transactions as needed.
        return maxProfitUnlimited(prices);
    }
    int[][] dp = new int[k + 1][n];           // dp[t][i]: max profit on day i with at most t transactions.
    for (int t = 1; t <= k; t++) {
        int maxDiff = -prices[0];             // track the max diff between the price on a given day and the profit made on a previous day.
        for (int i = 1; i < n; i++) {
            dp[t][i] = Math.max(dp[t][i - 1], prices[i] + maxDiff);
            maxDiff = Math.max(maxDiff, dp[t - 1][i] - prices[i]);
        }            // Update maxDiff to track the best profit (buy price - previous day sell profit) up to today.
    }
    return dp[k][n - 1];
}
int maxProfitUnlimited(int[] prices) {                // which is 122. Best Time to Buy and Sell Stock II
    int profit = 0;
    for (int i = 1; i < prices.length; i++) {
        if (prices[i] > prices[i - 1]) {
            profit += prices[i] - prices[i - 1];
        }
    }
    return profit;
}
