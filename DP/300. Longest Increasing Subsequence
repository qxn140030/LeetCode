Given an unsorted array of integers, find the length of longest increasing subsequence.
Example 1:
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

Example 2:
Input: nums = [0,1,0,3,2,3]
Output: 4

Example 3:
Input: nums = [7,7,7,7,7,7,7]
Output: 1

Follow up: 
Could you improve it to O(nlogn) time complexity?

Approach 1: DP
Time complexity: O(n^2)
Space complexity: O(n)

class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length, max = 1;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                    max = Math.max(max, dp[i]);
                }
            }
        }
        return max;
    }
}

Approach 2: Intelligently Build a Subsequence
Time complexity: O(n^2)
Space complexity: O(n)

class Solution {
    public int lengthOfLIS(int[] nums) {
        List<Integer> sub = new ArrayList<>();
        sub.add(nums[0]);
        for (int i = 1; i < nums.length; i++) {
            int num = nums[i];
            if (num > sub.get(sub.size() - 1)) {
                sub.add(num);
            } else {                   // Find the first element in sub that is greater than or equal to num.
                int j = 0;
                while (num > sub.get(j)) {
                    j++;
                }    
                sub.set(j, num);
            }
        } 
        return sub.size();
    }
}

Approach 3: Binary Search
Since sub is in sorted order, we can use binary search instead to greatly improve the efficiency of our algorithm.
Time complexity: O(nlogn)
Space complexity: O(n)

public class Solution {
    public int lengthOfLIS(int[] nums) {
        List<Integer> rst = new ArrayList<>();
        for (int num : nums) {
            if (rst.size() == 0 || num > rst.get(rst.size() - 1)) {
                rst.add(num);
            } else {
                int i = 0, j = rst.size() - 1;
                while (i < j) {
                    int mid = (i + j) / 2;
                    if (rst.get(mid) >= num) {
                        j = mid;
                    } else {
                        i = mid + 1;
                    }
                }
                rst.set(j, num);
            }
        }
        return rst.size();    // the rst is not the correct longest increasing subsequence, it just has the same length with it.
    }
}
