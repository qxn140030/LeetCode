You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. 
All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one.  Meanwhile, adjacent houses 
have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.
Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight 
without alerting the police.
Example 1:
Input: nums = [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.

Example 2:
Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.

Example 3:
Input: nums = [1,2,3]
Output: 3

Approach 1: DP
Time complexity: O(n)
Space complexity: O(n)

public class Solution {
    public int rob(int[] nums) {
        if (nums.length == 1) {
            return nums[0];
        }
        int local1 = helper(nums, 0, nums.length - 2);
        int local2 = helper(nums, 1, nums.length - 1);
        return Math.max(local1, local2);
    }
    private int helper(int[] nums, int i, int j) {
        if (i == j) {
            return nums[i];
        }
        int[] dp = new int[nums.length];
        dp[i] = nums[i];
        dp[i + 1] = Math.max(nums[i], nums[i + 1]);
        for (int k = i + 2; k <= j; k++) {
            dp[k] = Math.max(dp[k - 2] + nums[k], dp[k - 1]);
        }
        return dp[j];
    }
}

Approach 2: DP (Improve Memory Usage)
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int rob(int[] nums) {
        if (nums.length == 1) {
            return nums[0];
        }
        int max1 = helper(nums, 0, nums.length - 2);
        int max2 = helper(nums, 1, nums.length - 1);
        return Math.max(max1, max2);
    }
    private int helper(int[] nums, int i, int j) {
        int local1 = 0, local2 = 0;
        for (int k = i; k <= j; k++) {
            int tmp = local1, curr = nums[k];
            local1 = Math.max(curr + local2, local1);
            local2 = tmp;
        }
        return local1;
    }
}
