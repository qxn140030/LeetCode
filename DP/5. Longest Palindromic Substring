Given a string S, find the longest palindromic substring in S. 
Example 1:
Input: s = "babad"
Output: "bab" or "aba".

Example 2:
Input: s = "cbbd"
Output: "bb"

Approach 1: Brute force
pick all possible starting and ending positions for a substring, and verify if it is a palindrome.
Time complexity: O(n^3)
There are a total of (n choose 2) = n * (n - 1) / 2 substrings, verifying each substring takes O(n) time.
Space complexity: O(1)

Approach 2: Reverse and find Longest Common Substring
But it fails when there exists a reversed copy of a non-palindromic substring in some other part of S.
To rectify this, each time we find a longest common substring candidate, we check if the substring's indices are the same as the original indices.
If it is, then we attempt to update the longest palindrome found so far; if not, we skip this and find the next candidate.

Approach 3: Expand Around Center
palindrome mirrors around its center. there are 2n - 1 centers, n letters and (n - 1) slots between two letters.
Time complexity: O(n^2). since expanding a palindrome around its center take O(n) time. 
Space complexity: O(1)

public String longestPalindrome(String s) {
    String longest = "";
    for (int i = 0; i < s.length(); i++) {
        String tmp = expandAroundCenter(s, i, i);
        if (tmp.length() > longest.length()) {
            longest = tmp;
        }
        tmp = expandAroundCenter(s, i, i + 1);
        if (tmp.length() > longest.length()) {
            longest = tmp;
        }
    }
    return longest;
}
String expandAroundCenter(String s, int left, int right) {
    while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
        right++;
        left--;
    }
    return s.substring(left + 1, right);
}

Approach 4: Dynamic Programming
Time complexity: O(n^2)
Space complexity: O(n^2)

public String longestPalindrome(String s) {
    int n = s.length(), start = 0, end = 0;
    boolean[][] isPalindrome = new boolean[n][n];
    for (int i = s.length() - 1; i >= 0 ; i--) {
        for (int j = i; j < s.length(); j++) {
            if (s.charAt(i) == s.charAt(j) && (j - i <= 2 || isPalindrome[i + 1][j - 1])) {
                isPalindrome[i][j] = true;
                if (j - i > end - start) {
                    start = i;
                    end = j;
                }
            }
        }
    }
    return s.substring(start, end + 1);
}
