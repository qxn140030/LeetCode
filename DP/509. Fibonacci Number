The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that 
each number is the sum of the two preceding ones, starting from 0 and 1. That is,
F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

Example 1:
Input: n = 2
Output: 1, F(2) = F(1) + F(0) = 1 + 0 = 1.

Example 2:
Input: n = 3
Output: 2, F(3) = F(2) + F(1) = 1 + 1 = 2.

Example 3:
Input: n = 4
Output: 3, F(4) = F(3) + F(2) = 2 + 1 = 3.

Approach 1: Recursion
Time complexity: O(2^n), total number of nodes in the recursion tree.
Space complexity: O(n)

class Solution {
    public int fib(int n) {
        if (n < 2) {
            return n;
        }
        return fib(n - 1) + fib(n - 2);
    }
}

Approach 2: Bottom-Up Approach using Tabulation
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int fib(int n) {
        if (n < 2) {
            return n;
        }
        int[] cache = new int[n + 1];
        cache[1] = 1;
        for (int i = 2; i <= n; i++) {
            cache[i] = cache[i - 1] + cache[i - 2];
        }
        return cache[n];
    }
}

Approach 3: Top-Down Approach using Memoization
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int fib(int n) {
        int[] memo = new int[n + 1];
        return helper(memo, n);
    }
    private int helper(int[] memo, int n) {
        if (n < 2) {
            return n;
        }
        if (memo[n] > 0) {
            return memo[n];
        }
        memo[n] = helper(memo, n - 1) + helper(memo, n - 2);
        return memo[n];
    }
}

Approach 4: Iterative Bottom-Up
Time complexity: O(n)
Space complexity: O(1)

class Solution {
    public int fib(int n) {
        if (n < 2) {
            return n;
        }
        int n1 = 0, n2 = 1;
        for (int i = 2; i <= n; i++) {
            int tmp = n1 + n2;
            n1 = n2;
            n2 = tmp;
        }
        return n2;
    }
}
