Given an integer array nums, find the subarray with the largest sum, and return its sum.
Follow up: 
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6, [4,-1,2,1] has the largest sum 6.

Example 2:
Input: nums = [1]
Output: 1

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23, [5,4,-1,7,8] has the largest sum 23.
     
Approach 1: Optimized Brute Force
The trick is to recognize that all of the subarrays starting at a particular value will share a common prefix.
Time complexity: O(n^2)
Space complexity: O(1)

class Solution {
    public int maxSubArray(int[] nums) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            int cur = 0;
            for (int j = i; j < nums.length; j++) {
                cur += nums[j];
                max = Math.max(max, cur);
            }
        }    
        return max;
    }
}

Approach 2: DP, Kadane's Algorithm
Time complexity: O(n)
Space complexity: O(1)

public int maxSubArray(int[] nums) {
   int local = nums[0], global = nums[0];
   for (int i = 1; i < nums.length; i++) {
       local = Math.max(nums[i], local + nums[i]);        // local max value must contain the current element.
       global = Math.max(global, local);
   }
   return global;
}

Approach 3: Divide & Conquer
Time complexity: O(nlogn)
Space complexity: O(logn)

public class Solution {
    public int maxSubArray(int[] nums) {
        return maxSub(nums, 0, nums.length - 1);
    }
    private int maxSub(int[] nums, int start, int end) {
        if (start == end) {
            return nums[start];
        }
        int mid = start + (end - start) / 2;
        int leftMax = maxSub(nums, start, mid);
        int rightMax = maxSub(nums, mid + 1, end);
        int leftSuf = nums[mid], rightPre = nums[mid + 1], tmp = 0;
        for (int i = mid; i >= start; i--) {
            tmp += nums[i];
            if (tmp > leftSuf) {
                leftSuf = tmp;
            }
        }
        tmp = 0;
        for (int i = mid + 1; i <= end; i++) {
            tmp += nums[i];
            if (tmp > rightPre) {
                rightPre = tmp;
            }
        }
        return Math.max(leftSuf + rightPre, Math.max(leftMax, rightMax));
    }
}
