Given a 2D grid of 0s and 1s, return the number of elements in the largest square subgrid that has all 1s on its border, or 0 if such a subgrid doesn't exist in the grid.

Example 1:
Input: grid = [[1,1,1],[1,0,1],[1,1,1]]
Output: 9

Example 2:
Input: grid = [[1,1,0,0]]
Output: 1

class Solution {
    public int largest1BorderedSquare(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][][] dp = new int[m][n][2];              // dp[i][j][0] - horizontal count ending at (i, j)
        int maxLen = 0;                               // dp[i][j][1] - vertical count ending at (i, j)
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {                // Count horizontal and vertical 1s ending here
                    dp[i][j][0] = (j > 0 ? dp[i][j - 1][0] : 0) + 1;
                    dp[i][j][1] = (i > 0 ? dp[i - 1][j][1] : 0) + 1;
                    int len = Math.min(dp[i][j][0], dp[i][j][1]);       // Try all possible square sizes ending at (i, j)
                    while (len > 0) {                                   // Check if top border and left border also have enough 1s
                        if (dp[i][j - len + 1][1] >= len && dp[i - len + 1][j][0] >= len) {
                            maxLen = Math.max(maxLen, len);
                            break;                         // found largest for this (i, j)
                        }
                        len--;
                    }
                }
            }
        }
        return maxLen * maxLen;
    }
}
