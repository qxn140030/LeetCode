Given a string s, partition s such that every substring of the partition is a palindrome.
Return the minimum cuts needed for a palindrome partitioning of s.
Example 1:
Input: s = "aab"
Output: 1
Explanation: The palindrome partitioning ["aa","b"] could be produced using 1 cut.

Example 2:
Input: s = "a"
Output: 0

Example 3:
Input: s = "ab"
Output: 1

Approach 1: Backtracking
Time complexity: O(n * 2^n)
Space complexity: O(n)

class Solution {
    public int minCut(String s) {
        return findMinimumCut(s, 0, s.length() - 1, s.length() - 1);
    }
    private int findMinimumCut(String s, int start, int end, int minimumCut) {
        // base condition, no cut needed for an empty substring or palindrome substring.
        if (start == end || isPalindrome(s, start, end)) {
            return 0;
        }
        for (int currentEndIndex = start; currentEndIndex <= end; currentEndIndex++) {
            // find result for substring (start, currentEndIndex) if it is palindrome
            if (isPalindrome(s, start, currentEndIndex)) {
                minimumCut = Math
                    .min(minimumCut, 1 + findMinimumCut(s, currentEndIndex + 1, end, minimumCut));
            }
        }
        return minimumCut;
    }
    private boolean isPalindrome(String s, int start, int end) {
        while (start < end) {
            if (s.charAt(start++) != s.charAt(end--)) {
                return false;
            }
        }
        return true;
    }
}

Approach 2: DP - Top Down (Recursion, Memoization)
Time complexity: O(n * n^2)
Space complexity: O(n^2)

class Solution {
    private Integer memoCuts[][];
    private Boolean memoPalindrome[][];
    public int minCut(String s) {
        int n = s.length();
        memoCuts = new Integer[n][n];
        memoPalindrome = new Boolean[n][n];
        return findMinimumCut(s, 0, n - 1, n - 1);
    }
    private int findMinimumCut(String s, int start, int end, int minimumCut) {
        if (start == end || isPalindrome(s, start, end)) {
            return 0;
        }
        // check for results in memoCuts
        if (memoCuts[start][end] != null) {
            return memoCuts[start][end];
        }
        for (int currentEndIndex = start; currentEndIndex <= end; currentEndIndex++) {
            if (isPalindrome(s, start, currentEndIndex)) {
                minimumCut = Math
                    .min(minimumCut, 1 + findMinimumCut(s, currentEndIndex + 1, end, minimumCut));
            }
        }
        return memoCuts[start][end] = minimumCut;
    }
    private boolean isPalindrome(String s, int start, int end) {
        if (start >= end) {
            return true;
        }
        // check for results in memoPalindrome
        if (memoPalindrome[start][end] != null) {
            return memoPalindrome[start][end];
        }
        return memoPalindrome[start][end] = (s.charAt(start) == s.charAt(end))
            && isPalindrome(s, start + 1, end - 1);
    }
}

Approach 3: DP - Top Down (Optimized Space Complexity)
Time complexity: O(n * n^2)
Space complexity: O(n^2)

class Solution {
    private Integer memoCuts[];
    private Boolean memoPalindrome[][];
    public int minCut(String s) {
        int n = s.length();
        memoCuts = new Integer[n];
        memoPalindrome = new Boolean[n][n];
        return findMinimumCut(s, 0, n - 1, n - 1);
    }
    private int findMinimumCut(String s, int start, int end, int minimumCut) {
        if (start == end || isPalindrome(s, start, end)) {
            return 0;
        }
        // check for results in memoCuts
        if (memoCuts[start] != null) {
            return memoCuts[start];
        }
        for (int currentEndIndex = start; currentEndIndex <= end; currentEndIndex++) {
            if (isPalindrome(s, start, currentEndIndex)) {
                minimumCut = Math
                    .min(minimumCut, 1 + findMinimumCut(s, currentEndIndex + 1, end, minimumCut));
            }
        }
        return memoCuts[start] = minimumCut;
    }
    private boolean isPalindrome(String s, int start, int end) {
        if (start >= end) {
            return true;
        }
        // check for results in memoPalindrome
        if (memoPalindrome[start][end] != null) {
            return memoPalindrome[start][end];
        }
        return memoPalindrome[start][end] = (s.charAt(start) == s.charAt(end))
            && isPalindrome(s, start + 1, end - 1);
    }
}

Approach 4: DP - Bottom Up (Tabulation)
Time complexity: O(n^2)
Space complexity: O(n^2)

class Solution {
    private Integer cutsDp[];
    private Boolean palindromeDp[][];
    public int minCut(String s) {
        int n = s.length();
        cutsDp = new Integer[n];
        palindromeDp = new Boolean[n][n];
        // build the palindrome cutsDp for all susbtrings
        buildPalindromeDp(s, n);
        for (int end = 0; end < n; end++) {
            int minimumCut = end;
            for (int start = 0; start <= end; start++) {
                if (palindromeDp[start][end]) {
                    minimumCut = start == 0 ? 0 : Math.min(minimumCut, cutsDp[start - 1] + 1);
                }
            }
            cutsDp[end] = minimumCut;
        }
        return cutsDp[n - 1];
    }
    private void buildPalindromeDp(String s, int n) {
        for (int end = 0; end < s.length(); end++) {
            for (int start = 0; start <= end; start++) {
                if (s.charAt(start) == s.charAt(end) && (end - start <= 2 
                    || palindromeDp[start + 1][end - 1])) {
                    palindromeDp[start][end] = true;
                } else {
                    palindromeDp[start][end] = false;
                }
            }
        }
    }
}

Approach 5: Optimized Tabulation
Time complexity: O(n^2)
Space complexity: O(n^2)

class Solution {
    public int minCut(String s) {
        int n = s.length();
        Integer cutsDp[] = new Integer[n];
        boolean palindromeDp[][] = new boolean[n][n];
        for (int end = 0; end < n; end++) {
            int minimumCut = end;
            for (int start = 0; start <= end; start++) {
                // check if substring (start, end) is palidrome
                if (s.charAt(start) == s.charAt(end) && (end - start <= 2 ||
                    palindromeDp[start + 1][end - 1])) {
                    palindromeDp[start][end] = true;
                    minimumCut = start == 0 ? 0 : Math.min(minimumCut, cutsDp[start - 1] + 1);
                }
            }
            cutsDp[end] = minimumCut;
        }
        return cutsDp[n - 1];
    }
}

Approach 6: Expand Around the Center
Time complexity: O(n^2)
Space complexity: O(n)

class Solution {
    public int minCut(String s) {
        int n = s.length();
        int cutsDp[] = new int[n];
        for (int i = 1; i < n; i++) {
            cutsDp[i] = i;
        }
        for (int mid = 0; mid < n; mid++) {
            // check for odd length palindrome around mid index
            findMinimumCuts(mid, mid, cutsDp, s);
            // check for even length palindrome around mid index
            findMinimumCuts(mid - 1, mid, cutsDp, s);
        }
        return cutsDp[n - 1];
    }
    private void findMinimumCuts(int startIndex, int endIndex, int[] cutsDp, String s) {
        for (int start = startIndex, end = endIndex;
            start >= 0 && end < s.length() && s.charAt(start) == s.charAt(end); start--, end++) {
            int newCut = start == 0 ? 0 : cutsDp[start - 1] + 1;
            cutsDp[end] = Math.min(cutsDp[end], newCut);
        }
    }
}


maintain two cache arrays, one tracks the partition position, one tracks the number of minimum cut.
Time complexity: O(n^2)
Space complexity: O(n^2)

public class Solution {
    public int minCut(String s) {
        int n = s.length();
        boolean[][] palin = new boolean[n][n];
        int[] cut = new int[n];
        for (int i = 1; i < n; i++) {
            cut[i] = i;                   // initialize cut[i] to a maximum number.
            for (int j = 0; j <= i; j++) {
                if (s.charAt(j) == s.charAt(i) && (i - j <= 2 || palin[j + 1][i - 1])) {
                    palin[j][i] = true;
                    // if [0...i] is a palindrome, no need to cut;
                    // if not, add one to the previous cut[j - 1].
                    cut[i] = j == 0 ? 0 : Math.min(cut[i], cut[j - 1] + 1);            // Note!
                }
            }
        }
        return cut[n - 1];
    }
}
