You are given a 0-indexed string s and a dictionary of words dictionary. You have to break s into one or more non-overlapping substrings such that each substring is present in dictionary. 
There may be some extra characters in s which are not present in any of the substrings.
Return the minimum number of extra characters left over if you break up s optimally.

Example 1:
Input: s = "leetscode", dictionary = ["leet","code","leetcode"]
Output: 1
Explanation: We can break s in two substrings: "leet" from index 0 to 3 and "code" from index 5 to 8. There is only 1 unused character (at index 4), so we return 1.

Example 2:
Input: s = "sayhelloworld", dictionary = ["hello","world"]
Output: 3
Explanation: We can break s in two substrings: "hello" from index 3 to 7 and "world" from index 8 to 12. The characters at indices 0, 1, 2 are not used in any substring and thus are considered as extra characters. 
Hence, we return 3.

Approach 1: Bottom Up DP with Substring Method
Time complexity: O(n^3), dp cost O(n^2), the substring method cost another O(n).
Space complexity: O(n + m)

class Solution {
    public int minExtraChar(String s, String[] dictionary) {
        Set<String> dict = new HashSet<>(Arrays.asList(dictionary));     // To achieve O(1) lookups, convert the list of strings in the dictionary to a set.
        int n = s.length();
        int[] dp = new int[n + 1];
        for (int i = n - 1; i >= 0; i--) {                               // Iterate over the string s from right to left.
            dp[i] = dp[i + 1] + 1;                                       // Note: consider the case where the character at index start is an extra character.
            for (int j = i; j < n; j++) {
                String sub = s.substring(i, j + 1);                     // consider all possible substrings starting from i and ending at various indices j.
                if (dict.contains(sub)) {
                    dp[i] = Math.min(dp[i], dp[j + 1]);
                }
            }
        }
        return dp[0];
    }
}
