Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:
Si % Sj = 0 or Sj % Si = 0.
If there are multiple solutions, return any subset is fine.
Example 1:
nums: [1,2,3]
Result: [1,2] (of course, [1,3] will also be ok)

Example 2:
nums: [1,2,4,8]
Result: [1,2,4,8]

Approach 1:
Time complexity: O()
Space complexity: O()

public class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        List<Integer> rst = new ArrayList<Integer>();
        if (nums == null || nums.length == 0) {
            return rst;
        }
        Arrays.sort(nums);
        int n = nums.length;
        int[] dp = new int[n];
        int[] index = new int[n];
        Arrays.fill(dp, 1);
        Arrays.fill(index, -1);
        int max = 0;
        int max_idx = -1;
        for (int i = 0; i < n; i++) {               // Note: i = 0
            for (int j = i - 1; j >= 0; j--) {
                if (nums[i] % nums[j] == 0 && dp[j] + 1 > dp[i]) {
                    dp[i] = dp[j] + 1;
                    index[i] = j;
                }
            }
            if (dp[i] > max) {
                max = dp[i];
                max_idx = i;
            }
        }
        int i = max_idx;
        while (i >= 0) {
            rst.add(nums[i]);
            i = index[i];
        }
        return rst;
    }
}
