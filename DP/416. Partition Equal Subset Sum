Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.
Example 1:
Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].

Example 2:
Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.

Approach 1: DP
Time complexity: O(n * sum)
Space complexity: O(n * sum)

class Solution {
    public boolean canPartition(int[] nums) {
        int total = 0;
        for (int num : nums) {
            total += num;
        }
        if (total % 2 != 0) {
            return false;
        }
        int sum = total / 2, n = nums.length;
        boolean[][] dp = new boolean[n + 1][sum + 1];      // Note.
        dp[0][0] = true;
        for (int i = 1; i <= n; i++) {
            int cur = nums[i - 1];
            for (int j = 0; j <= sum; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j >= cur) {
                    dp[i][j] |= dp[i - 1][j - cur];
                }
            }
        }
        return dp[n][sum];
    }
}
