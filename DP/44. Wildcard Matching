Implement wildcard pattern matching with support for '?' and '*'.
'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).
The function prototype should be:
bool isMatch(const char *s, const char *p)
Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false

Approach 1: Recursion with Memoization
Time complexity: O(m * n * (m + n))
Space complexity: O(m * n)




Approach 2: DP
Time complexity: O(m * n)
Space complexity: O(m * n)

class Solution {
    public boolean isMatch(String s, String p) {
        int m = s.length(), n = p.length();
        boolean[][] dp = new boolean[m + 1][n + 1];
        dp[0][0] = true;
        for (int i = 1; i <= n; i++) {
            if (p.charAt(i - 1) == '*') {
                dp[0][i] = dp[0][i - 1];
            }
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (s.charAt(i - 1) == p.charAt(j - 1) || p.charAt(j - 1) == '?') {
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (p.charAt(j - 1) == '*') {        
                    dp[i][j] = dp[i][j - 1] || dp[i - 1][j];                    
                }                   // beause dp[i][j] = dp[i][j - 1] || dp[i - 1][j - 1] || ... || dp[0][j - 1];
            }                       // and dp[i - 1][j] = dp[i - 1][j - 1] || dp[i - 2][j - 1] || ... || dp[0][j - 1];
        }
        return dp[m][n];
    }
}

Approach 3: Backtracking
Time complexity: O(m * n)
Space complexity: O(1)

class Solution {
    public boolean isMatch(String s, String p) {
        int sLen = s.length(), pLen = p.length();
        int sIdx = 0, pIdx = 0;
        int starIdx = -1, sTmpIdx = -1;
        while (sIdx < sLen) {
            if (pIdx < pLen && (p.charAt(pIdx) == '?' || p.charAt(pIdx) == s.charAt(sIdx))) {
                sIdx++;
                pIdx++;
            } else if (pIdx < pLen && p.charAt(pIdx) == '*') {     // when '*' matches no characters.
                starIdx = pIdx;
                sTmpIdx = sIdx;
                pIdx++;         
            } else if (starIdx == -1) {     // pattern char != string char or pattern is used up, no '*' character in pattern.
                return false;         
            } else {                        // there was '*' character in pattern before. Backtrack: check the situation when '*' matches one more character.
                pIdx = starIdx + 1;
                sIdx = sTmpIdx + 1;
                sTmpIdx = sIdx;
            }
        }
        for (int i = pIdx; i < pLen; i++) {
            if (p.charAt(i) != '*') {
                return false;
            }
        }
        return true;
    }
}
