Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.
For example, 
Given: s1 = "aabcc", s2 = "dbbca",
When s3 = "aadbbcbcac", return true.
When s3 = "aadbbbaccc", return false.

Approach 1: Brute Force
find every string possible by all interleavings of the two given strings.
Time complexity: O(2^(m + n)) 
Space complexity: O(m + n)

class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if (s1.length() + s2.length() != s3.length()) {
            return false;
        }
        return check(s1, 0, s2, 0, "", s3);
    }
    private boolean check(String s1, int i, String s2, int j, String res, String s3) {
        if (i == s1.length() && j == s2.length() && res.equals(s3)) {
            return true;
        }   
        boolean ans = false;
        if (i < s1.length()) {
            ans |= check(s1, i + 1, s2, j, res + s1.charAt(i), s3);
        }    
        if (j < s2.length()) {
            ans |= check(s1, i, s2, j + 1, res + s2.charAt(j), s3);
        }
        return ans;
    }
}

Approach 2: Recursion with memoization
Time complexity: O(m * n). each (i, j) combination is computed only once.
Space complexity: O(m * n)

class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if (s1.length() + s2.length() != s3.length()) {
            return false;
        }
        int m = s1.length(), n = s2.length();
        int[][] memo = new int[m][n];
        for (int[] row : memo) {
            Arrays.fill(row, -1);
        }
        return check(s1, 0, s2, 0, s3, 0, memo);
    }
    private boolean check(String s1, int i, String s2, int j, String s3, int k, int[][] memo) {
        if (i == s1.length()) {
            return s2.substring(j).equals(s3.substring(k));
        }
        if (j == s2.length()) {
            return s1.substring(i).equals(s3.substring(k));
        }
        if (memo[i][j] >= 0) {
            return memo[i][j] == 1;
        }   
        boolean ans = false;
        if ((s3.charAt(k) == s1.charAt(i) && check(s1, i + 1, s2, j, s3, k + 1, memo)) ||
            (s3.charAt(k) == s2.charAt(j) && check(s1, i, s2, j + 1, s3, k + 1, memo))) {
            ans = true;
        }
        memo[i][j] = ans ? 1 : 0;
        return ans;
    }
}

Approach 3: 2D DP
Time complexity: O(m * n) 
Space complexity: O(m * n)

class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if (s1.length() + s2.length() != s3.length()) {
            return false;
        }
        int m = s1.length(), n = s2.length();
        boolean[][] dp = new boolean[m + 1][n + 1];
        dp[0][0] = true;
        for (int i = 1; i <= m; i++) {
            if (s3.charAt(i - 1) == s1.charAt(i - 1) && dp[i - 1][0]) {
                dp[i][0] = true;
            }
        }
        for (int j = 1; j <= n; j++) {
            if (s3.charAt(j - 1) == s2.charAt(j - 1) && dp[0][j - 1]) {
                dp[0][j] = true;
            }
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if ((s3.charAt(i + j - 1) == s1.charAt(i - 1) && dp[i - 1][j]) ||
                    (s3.charAt(i + j - 1) == s2.charAt(j - 1) && dp[i][j - 1])) {
                    dp[i][j] = true;
                }
            }
        }
        return dp[m][n];
    }
}

Approach 4: 1D DP
Time complexity: O(m * n) 
Space complexity: O(n)

class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if (s1.length() + s2.length() != s3.length()) {
            return false;
        }
        int m = s1.length(), n = s2.length();
        boolean[] dp = new boolean[n + 1];
        dp[0] = true;
        for (int j = 1; j <= n; j++) {
            if (s3.charAt(j - 1) == s2.charAt(j - 1) && dp[j - 1]) {
                dp[j] = true;
            }
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                if (j == 0) {
                    dp[j] &= s1.charAt(i - 1) == s3.charAt(i - 1);
                } else {
                    dp[j] = (dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) || 
                        (dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));
                }
            }
        }
        return dp[n];
    }
}
