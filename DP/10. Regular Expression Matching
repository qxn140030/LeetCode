Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:
'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).
Example 1:
Input: s = "aa", p = "a"
Output: false

Example 2:
Input: s = "aa", p = "a*"
Output: true

Example 3:
Input: s = "ab", p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".

Approach 1: Recursion
Time complexity: exponential
Space complexity: exponential

class Solution {
    public boolean isMatch(String s, String p) {
        if (p.isEmpty()) {
            return s.isEmpty();
        }
        if (p.length() == 1) {
            return s.length() == 1 && charMatch(s.charAt(0), p.charAt(0));
        }
        if (p.charAt(1) != '*') {
            return s.length() > 0 && charMatch(s.charAt(0), p.charAt(0)) && isMatch(s.substring(1), p.substring(1));
        } 
        if (isMatch(s, p.substring(2))) {             // the preceding char + '*' stand for 0 elements.
            return true;
        }                                             // stand for 1 or more preceding element.
        return s.length() > 0 && charMatch(s.charAt(0), p.charAt(0)) && isMatch(s.substring(1), p);
    }
    private boolean charMatch(char c1, char c2) {
        return c2 == '.' || c1 == c2;
    }
}

Approach 2: DP
Time complexity: O(m * n)
Space complexity: O(m * n)

public class Solution {
    public boolean isMatch(String s, String p) {
        if (p.isEmpty()) {
            return s.isEmpty();
        }
        int m = s.length(), n = p.length();
        boolean[][] dp = new boolean[m + 1][n + 1];
        dp[0][0] = true;
        for (int j = 1; j <= n; j++) {
            if (p.charAt(j - 1) == '*') {
                dp[0][j] = dp[0][j - 2];
            }
        }
        for (int i = 1; i <= m; i++) {
            char si = s.charAt(i - 1);
            for (int j = 1; j <= n; j++) {                
                char pj = p.charAt(j - 1);
                if (pj == '.' || si == pj) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (pj == '*') {
                    if (p.charAt(j - 2) == '.' || si == p.charAt(j - 2)) {
                        // stand for 0                  1             more elements.
                        dp[i][j] = dp[i][j - 2] || dp[i][j - 1] || dp[i - 1][j];
                    } else {
                        dp[i][j] = dp[i][j - 2];              // stand for 0 element.
                    }   
                }
            }
        }
        return dp[m][n];
    }
}
