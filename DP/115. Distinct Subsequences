Given a string S and a string T, count the number of distinct subsequences of T in S.
A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the
characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE"
while "AEC" is not).
Here is an example:
S = "rabbbit", T = "rabbit", Return 3.

Approach 1: Recursion + Memoization
Time complexity: O(m * n)
Space complexity: O(m * n)

class Solution {
	// Dictionary that we will use for memoization
    private HashMap<Pair<Integer, Integer>, Integer> map;
    public int numDistinct(String s, String t) {
        map = new HashMap<>();        
        return recurse(s, t, 0, 0);
    }
    private int recurse(String s, String t, int i, int j) {  
        int m = s.length(), n = t.length();  
        // Base case
        if (i == m || j == n || m - i < n - j) {
            return j == n ? 1 : 0;
        }
        Pair<Integer, Integer> key = new Pair<>(i, j);
        // Check to see if the result for this recursive call is already cached
        if (map.containsKey(key)) {
            return map.get(key);
        }
        // Always calculate this result since it's required for both the cases
        int ans = recurse(s, t, i + 1, j);
        // If the characters match, then we make another recursion call and add the result to "ans"
        if (s.charAt(i) == t.charAt(j)) {
            ans += recurse(s, t, i + 1, j + 1);
        }
        map.put(key, ans);
        return ans;
    }
}

Approach 2: DP
Time complexity: O(m * n)
Space complexity: O(m * n)

public class Solution {
    public int numDistinct(String s, String t) {
        int m = s.length(), n = t.length();
        int[][] dp = new int[m + 1][n + 1];
    	for (int i = 0; i <= m; i++) {
    		dp[i][0] = 1;
        }
    	for (int i = 1; i <= m; i++) {
    		for (int j = 1; j <= n; j++) {
    		    dp[i][j] = dp[i - 1][j];
    			if (s.charAt(i - 1) == t.charAt(j - 1)) {
    				dp[i][j] += dp[i - 1][j - 1];
    			} 
    		}
    	}
    	return dp[m][n];
    }
}

Approach 3: Space optimized DP
Time complexity: O(m * n)
Space complexity: O(n)

public class Solution {
    public int numDistinct(String s, String t) {
        int m = s.length(), n = t.length();
        int[] dp = new int[n];
        // Iterate over the strings in reverse so as to satisfy the way we've modeled our recursive solution
    	for (int i = m - 1; i >= 0; i--) {
    	    // At each step we start with the last value in the row which is always 1. 
            // Notice how we are starting the loop from N - 1 instead of N like in the previous solution.
            int pre = 1;
            for (int j = n - 1; j >= 0; j--) {
                // Record the current value in this cell so that we can use it to calculate the value of dp[j - 1]
                int cur = dp[j];
                // If the characters match, we add the result of the next recursion call (in this case, the value of a cell in the dp table)
                if (s.charAt(i) == t.charAt(j)) {
                    dp[j] += pre;
                } 
                pre = cur;
    		}
    	}
    	return dp[0];
    }
}
