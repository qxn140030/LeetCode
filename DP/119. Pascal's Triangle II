Given an integer rowIndex, return the rowIndexth(0-indexed) row of the Pascal's triangle.
For example, given k = 3, Return [1,3,3,1].
Follow up: 
Could you optimize your algorithm to use only O(rowIndex) extra space?

Approach 1: Brute force recursion
Time complexity: O(2^n), we are calling recursive function for all column index of given row.
Space complexity: O(n)

class Solution {
  public List<Integer> getRow(int rowIndex) {
    List<Integer> ans = new ArrayList<>();
    for (int i = 0; i <= rowIndex; i++) {
      ans.add(getNum(rowIndex, i));
    }
    return ans;
  }
  private int getNum(int row, int col) {
    if (row == 0 || col == 0 || row == col) {
      return 1;
    }
    return getNum(row - 1, col - 1) + getNum(row - 1, col);
  }
}

Approach 2: DP
Time complexity: O(n^2)
Space complexity: O(n)

class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> pre = new ArrayList<>(){{add(1);}};
        List<Integer> cur = new ArrayList<>(){{add(1);}};
        for (int i = 1; i <= rowIndex; i++) {
            cur = new ArrayList<>(i + 1){{add(1);}};
            for (int j = 1; j < i; j++) {
                cur.add(pre.get(j - 1) + pre.get(j));
            }
            cur.add(1);
            pre = cur;
        }
        return cur;
    }
}

Approach 3: Memory-efficient DP
1 0 0 0    k = 0
1 1 0 0    k = 1
1 1 1 0
1 2 1 0    k = 2
1 2 1 1
1 2 3 1
1 3 3 1    k = 3
Time complexity: O(n^2)
Space complexity: O(1)

public class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> rst = new ArrayList<>();
        for (int i = 0; i <= rowIndex; i++) {
            rst.add(0);
        }
        rst.set(0, 1);
        for (int i = 1; i <= rowIndex; i++) {
            for (int j = i; j > 0; j--) {
                rst.set(j, rst.get(j - 1) + rst.get(j));
            }
        }
        return rst;
    }
}

class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> rst = new ArrayList<>();
        for (int i = 0; i <= rowIndex; i++) {
            rst.add(0, 1);
            for (int j = 1; j < rst.size() - 1; j++) {
                rst.set(j, rst.get(j) + rst.get(j + 1));
            }
        }
        return rst;
    }
}

Approach 4: Math
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> row = new ArrayList<>() {{add(1);}};
        for (int i = 1; i <= rowIndex; i++) {
            row.add((int) ((row.get(row.size() - 1) * (long) (rowIndex - i + 1)) / i));
        }
        return row;
    }
}
