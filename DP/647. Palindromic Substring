Given a string s, return the number of palindromic substrings in it.
A string is a palindrome when it reads the same backward as forward.
A substring is a contiguous sequence of characters within the string.

Example 1:
Input: s = "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".

Example 2:
Input: s = "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".

Approach 1: Check All Substrings
Time complaxity: O(n^3)
Space complexity: O(1)

public int countSubstrings(String s) {
    int ans = 0;
    for (int i = 0; i < s.length(); i++) {
        for (int j = i; j < s.length(); j++) {
            ans += isPalindrome(s, i, j) ? 1 : 0;
        }
    }
    return ans;
}
boolean isPalindrome(String s, int i, int j) {
    while (i < j) {
        if (s.charAt(i++) != s.charAt(j--)) {
            return false;
        }
    }
    return true;
}

Approach 2: DP
Time complaxity: O(n^2)
Space complexity: O(n^2)

public int countSubstrings(String s) {
    int n = s.length(), ans = 0;
    if (n == 0) {
        return 0;
    }
    boolean[][] dp = new boolean[n][n];
    for (int i = 0; i < n; i++, ans++) {
        dp[i][i] = true;                   // Base case: single letter substrings
    } 
    for (int i = 0; i < n - 1; i++) {
        if (s.charAt(i) == s.charAt(i + 1)) {
            dp[i][i + 1] = true;               // Base case: double letter substrings
            ans++;
        }
    }
    for (int len = 3; len <= n; len++) {
        for (int i = 0, j = i + len - 1; j < n; i++, j++) {
            if (dp[i + 1][j - 1] && s.charAt(i) == s.charAt(j)) {
                dp[i][j] = true;
                ans++;
            }
        }
    }
    return ans;
}

Approach 3: Expand Around Possible Centers
Time complaxity: O(n^2)
Space complexity: O(1)

public int countSubstrings(String s) {
    int ans = 0;
    for (int i = 0; i < s.length(); i++) {
        ans += countPalindromesAroundCenter(s, i, i);
        ans += countPalindromesAroundCenter(s, i, i + 1);
    }
    return ans;
}
int countPalindromesAroundCenter(String s, int i, int j) {
    int ans = 0;
    while (i >= 0 && j < s.length()) {
        if (s.charAt(i) != s.charAt(j)) {
            break;      // the first and last characters don't match!
        }
        i--;
        j++;
        ans++;
    }
    return ans;
}
