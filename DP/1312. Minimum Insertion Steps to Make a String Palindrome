Given a string s. In one step you can insert any character at any index of the string.
Return the minimum number of steps to make s palindrome.
A Palindrome String is one that reads the same backward as well as forward.

Example 1:
Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we do not need any insertions.

Example 2:
Input: s = "mbadm"
Output: 2
Explanation: String can be "mbdadbm" or "mdbabdm".

Example 3:
Input: s = "leetcode"
Output: 5
Explanation: Inserting 5 characters the string becomes "leetcodocteel".

Approach 1: DP
Time complexity: O(n^2)
Space complexity: O(n^2)

public int minInsertions(String s) {
    int n = s.length();
    int[][] dp = new int[n][n];
    for (int i = n - 2; i >= 0; i--) {
        for (int j = i + 1; j < n; j++) {
            if (s.charAt(i) == s.charAt(j)) {
                dp[i][j] = dp[i + 1][j - 1];
            } else {
                dp[i][j] = Math.min(dp[i + 1][j], dp[i][j - 1]) + 1;
            }
        }
    }
    return dp[0][n - 1];
}

Approach 2: DP - Space efficient
Time complexity: O(n^2)
Space complexity: O(n)

public int minInsertions(String s) {
    int n = s.length();
    int[] dp = new int[n];
    for (int i = n - 2; i >= 0; i--) {
        int pre = 0;
        for (int j = i + 1; j < n; j++) {
            int tmp = dp[j];
            if (s.charAt(i) == s.charAt(j)) {
                dp[j] = pre;
            } else {
                dp[j] = Math.min(dp[j], dp[j - 1]) + 1;
            }
            pre = tmp;
        }
    }
    return dp[n - 1];
}
