There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a
certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.
The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the
cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on... Find the
minimum cost to paint all houses.
Note:
All costs are positive integers.
Follow up:
Could you solve it in O(nk) runtime?

public class Solution {
    public int minCostII(int[][] costs) {
        if (costs == null || costs.length == 0 || costs[0].length == 0) {
            return 0;
        }
        int preMin = 0, preSecMin = 0, preIndex = -1;
        for (int i = 0; i < costs.length; i++) {
            int curMin = Integer.MAX_VALUE, curSecMin = Integer.MAX_VALUE, curIndex = -1;
            for (int j = 0; j < costs[0].length; j++) {
                if (j == preIndex) {
                    costs[i][j] += preSecMin;
                } else {
                    costs[i][j] += preMin;
                }
                if (costs[i][j] < curMin) {
                    curSecMin = curMin;
                    curMin = costs[i][j];
                    curIndex = j;
                } else if (costs[i][j] < curSecMin) {
                    curSecMin = costs[i][j];
                }
            }
            preMin = curMin;
            preSecMin = curSecMin;
            preIndex = curIndex;
        }
        return preMin;
    }
}
