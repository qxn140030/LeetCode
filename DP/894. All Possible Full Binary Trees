Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.
Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.
A full binary tree is a binary tree where each node has exactly 0 or 2 children.
Example 1:
           0                0               0              0                0
          / \              / \            /  \            / \              / \
         0   0            0   0          0    0          0   0            0   0
            / \              / \        / \  / \        / \              / \
           0   0            0   0      0  0  0  0      0   0            0   0
              / \          / \                            / \          / \
             0   0        0   0                          0   0        0   0
Input: n = 7
Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]

Example 2:
Input: n = 3
Output: [[0,0,0]]

Approach 1: Recursion + Memoization (Top-Down DP)
Time complexity: O(2^(n/2))
Space complexitty: O(n * 2^(n/2))

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<Integer, List<TreeNode>> memo = new HashMap<>();     // "n (number of nodes)" -> "all full binary trees with n nodes"
    public List<TreeNode> allPossibleFBT(int n) {            // Full binary trees have either 1 node or an odd number of nodes
        if (n % 2 == 0) {                                    // If n is even, there are no full binary trees
            return new ArrayList<>();
        }
        if (n == 1) {                                        // Base case: with 1 node, the only FBT is a single root
            return Arrays.asList(new TreeNode());
        }
        if (memo.containsKey(n)) {
            return memo.get(n);
        }
        List<TreeNode> res = new ArrayList<>();
        for (int i = 1; i < n; i += 2) {                       // Try all odd sizes i for the left subtree (must be odd to form FBT)
            List<TreeNode> left = allPossibleFBT(i);
            List<TreeNode> right = allPossibleFBT(n - i - 1);  // The right subtree uses the remaining nodes: subtract 1 for the root
            for (TreeNode l : left) {                          // Combine each left with each right under a new root to form unique FBTs
                for (TreeNode r : right) {
                    TreeNode root = new TreeNode(0, l, r);
                    res.add(root);
                }
            }
        }
        memo.put(n, res);
        return res;
    }
}

Approach 2: Iterative DP
Time complexity: O(2^(n/2))
Space complexitty: O(n * 2^(n/2))

class Solution {
    public List<TreeNode> allPossibleFBT(int n) {
        if (n % 2 == 0) {
            return new ArrayList<>();
        }
        List<List<TreeNode>> dp = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            dp.add(new ArrayList<>());
        }
        dp.get(1).add(new TreeNode(0));
        for (int count = 3; count <= n; count += 2) {
            for (int i = 1; i < count - 1; i += 2) {
                int j = count - 1 - i;
                for (TreeNode left : dp.get(i)) {
                    for (TreeNode right : dp.get(j)) {
                        TreeNode root = new TreeNode(0, left, right);
                        dp.get(count).add(root);
                    }
                }
            }
        }
        return dp.get(n);
    }
}
