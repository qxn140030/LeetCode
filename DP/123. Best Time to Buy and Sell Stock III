You are given an array prices where prices[i] is the price of a given stock on the ith day.
Find the maximum profit you can achieve. You may complete at most two transactions.
Note: 
You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
Example 1:
Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

Example 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.

Example 3:
Input: prices = [7,6,4,3,1]
Output: 0, no transaction is done, i.e. max profit = 0.

Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete at most two transactions.
Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

Approach 1: Bidirectional Dynamic Programming
we divide this problem into two subproblems, and each subproblem is actually of the same problem of Best Time to Buy and Sell Stock.
Time complexity: O(n)
Space complexity: O(n)

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int leftMin = prices[0];
        int rightMax = prices[n - 1];
        int[] leftProfits = new int[n];
        int[] rightProfits = new int[n + 1];
        for (int i = 1; i < n; i++) {
            leftProfits[i] = Math.max(leftProfits[i - 1], prices[i] - leftMin);
            leftMin = Math.min(leftMin, prices[i]);
            int j = n - 1 - i;
            rightProfits[j] = Math.max(rightProfits[j + 1], rightMax - prices[j]);
            rightMax = Math.max(rightMax, prices[j]);
        }
        int maxProfit = 0;
        for (int i = 0; i < n; i++) {
            maxProfit = Math.max(maxProfit, leftProfits[i] + rightProfits[i + 1]);
        }
        return maxProfit;
    }
}

public class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length < 2) {
    		return 0;
    	}
    	int[] left = new int[prices.length];       //highest profit in 0 ... i
    	int[] right = new int[prices.length];
    	left[0] = 0; 
    	int min = prices[0];
    	for (int i = 1; i < prices.length; i++) {
    		min = Math.min(min, prices[i]);
    		left[i] = Math.max(left[i - 1], prices[i] - min);
    	}
    	right[prices.length - 1] = 0;
    	int max = prices[prices.length - 1];
    	for (int i = prices.length - 2; i >= 0; i--) {
    		max = Math.max(max, prices[i]);
    		right[i] = Math.max(right[i + 1], max - prices[i]);
    	}
    	int profit = 0;
    	for (int i = 0; i < prices.length; i++) {
    		profit = Math.max(profit, left[i] + right[i]);
    	}
    	return profit;
    }
}

Approach 2: One-pass Simulation
Time complexity: O(n)
Space complexity: O(1)

public int maxProfit(int[] prices) {
    int t1Cost = Integer.MAX_VALUE, t2Cost = Integer.MAX_VALUE;
    int t1Profit = 0, t2Profit = 0;
    for (int price : prices) {
        // the maximum profit if only one transaction is allowed
        t1Cost = Math.min(t1Cost, price);
        t1Profit = Math.max(t1Profit, price - t1Cost);
        // reinvest the gained profit in the second transaction
        t2Cost = Math.min(t2Cost, price - t1Profit);
        t2Profit = Math.max(t2Profit, price - t2Cost);
    }
    return t2Profit;
}
