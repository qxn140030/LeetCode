Given an array and a value, remove all instances of that value in place and return the new length.
Do not allocate extra space for another array, you must do this in place with constant memory.
The order of elements can be changed. It doesn't matter what you leave beyond the new length.
Example: 
Given input array nums = [3,2,2,3], val = 3
Your function should return length = 2, with the first two elements of nums being 2.
Hint: 
Try two pointers.
Did you use the property of "the order of elements can be changed"?
What happens when the elements to remove are rare?

Solution 1: Time complexity: O(n). Space complexity: O(1).
public class Solution {
    public int removeElement(int[] nums, int val) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int len = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != val) {
                nums[len++] = nums[i];
            } 
        }
        return len;
    }
}

Solution 2: when the elements to remove are rare.
Time complexity: O(n). the number of assignment operation is equal to the number of elements to remove. So it is more
efficient if elements to remove are rare.
Space complexity: O(1).
public class Solution {
    public int removeElement(int[] nums, int val) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        int left = 0;
        int right = nums.length - 1;
        while (left <= right) {
            if (nums[left] == val) {
                nums[left] = nums[right--];                
            } else {
                left++;
            }
        }
        return left;
    }
}
