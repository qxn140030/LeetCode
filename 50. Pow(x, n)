Implement pow(x, n).

recursive. relation: x^n = x^(n/2) * x^(n/2) * x^(n%2). 
Time complexity: O(logn). Space complexity: O(logn).
public class Solution {
    public double myPow(double x, int n) {
        if (n == 0) {
            return 1;
        }
        double half = myPow(x, n / 2);
        if (n % 2 == 0) {
            return half * half;
        } else if (n > 0) {
            return half * half * x;
        } else {
            return half * half / x;
        }
    }
}

public class Solution {                     // Time Limit Exceeded.
    public double myPow(double x, int n) {
        double rst = 1;
        if (n > 0) {
            while (n-- > 0) {
                rst *= x;
            }
        } else {
            while (n++ < 0) {
                rst /= x;
            }
        }
        return rst;
    }
}
